name: AWS / MA/MR tests

on:
  schedule:
    - cron: 0 1 * * MON-FRI
  pull_request:
    paths:
      - '.github/workflows/aws-mamr.yml'
      - '.github/workflows/aws-tests.yml'
  workflow_dispatch:
    inputs:
      disableCaching:
        description: 'Disable Caching'
        required: false
        type: boolean
        default: false
      PYTEST_LOGLEVEL:
        type: choice
        description: Loglevel for PyTest
        options:
          - DEBUG
          - INFO
          - WARNING
          - ERROR
          - CRITICAL
        default: WARNING

env:
  IMAGE_NAME: "localstack/localstack"



jobs:
  generate-random-creds:
    name: "Generate random AWS credentials"
    runs-on: ubuntu-latest
    outputs:
      region: ${{ steps.generate-aws-values.outputs.region }}
      account_id: ${{ steps.generate-aws-values.outputs.account_id }}
    steps:
      - name: Generate values
        id: generate-aws-values
        run: |
          # Generate a random 12-digit number for TEST_AWS_ACCOUNT_ID
          ACCOUNT_ID=$(shuf -i 100000000000-999999999999 -n 1)
          echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          # Set TEST_AWS_REGION_NAME to a random AWS region other than us-east-1
          REGIONS=("us-east-2" "us-west-1" "us-west-2" "ap-southeast-2" "ap-northeast-1" "eu-central-1" "eu-west-1")
          REGION=${REGIONS[RANDOM % ${#REGIONS[@]}]}
          echo "region=$REGION" >> $GITHUB_OUTPUT

  test-ma-mr:
    name: "Run integration tests"
    needs: generate-random-creds
    uses: ./.github/workflows/aws-tests.yml
    with:
      disableCaching: ${{ inputs.disableCaching == true }}
      PYTEST_LOGLEVEL: ${{ inputs.PYTEST_LOGLEVEL }}
      testAWSRegion: ${{ needs.generate-random-creds.outputs.region }}
      testAWSAccountId: ${{ needs.generate-random-creds.outputs.account_id }}
      testAWSAccessKeyId: ${{ needs.generate-random-creds.outputs.account_id }}
    secrets:
      DOCKERHUB_PULL_USERNAME: ${{ secrets.DOCKERHUB_PULL_USERNAME }}
      DOCKERHUB_PULL_TOKEN: ${{ secrets.DOCKERHUB_PULL_TOKEN }}
      TINYBIRD_CI_TOKEN: ${{ secrets.TINYBIRD_CI_TOKEN }}

  push-to-tinybird:
    name: Push Workflow Status to Tinybird
    if: always() && github.ref == 'refs/heads/master' && github.repository == 'localstack/localstack'
    runs-on: ubuntu-latest
    needs:
      - test-ma-mr
    steps:
      - name: Push to Tinybird
        uses: localstack/tinybird-workflow-push@v3
        with:
          workflow_id: ${{ 'tests_mamr' }}
          tinybird_token: ${{ secrets.TINYBIRD_CI_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tinybird_datasource: "ci_workflows"
          # determine the output only for the jobs that are direct dependencies of this job (to avoid issues with workflow_call embeddings)
          outcome: ${{ ((contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) && 'failure') || 'success' }}
