version: 2.1

parameters:
  ubuntu-amd64-machine-image:
    type: string
    default: "ubuntu-2004:2022.04.1"
  ubuntu-arm64-machine-image:
    type: string
    default: "ubuntu-2004:2022.04.1"

executors:
  ubuntu-machine-amd64:
    machine:
      image: << pipeline.parameters.ubuntu-amd64-machine-image >>

jobs:
  install:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - checkout
      - restore_cache:
          key: python-requirements-{{ checksum "setup.cfg" }}
      - run:
          name: Install prerequisites
          command: |
            sudo apt-get update
            sudo apt-get install -y libsasl2-dev
      - run:
          name: Setup environment
          command: |
            make install
            mkdir -p target/reports
            mkdir -p target/coverage
      - save_cache:
          key: python-requirements-{{ checksum "setup.cfg" }}
          paths:
            - "~/.cache/pip"
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo

  preflight:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Linting
          command: make lint

  unit-tests:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Unit tests
          environment:
            TEST_PATH: "tests/unit"
            PYTEST_ARGS: "--junitxml=target/reports/unit-tests.xml -o junit_suite_name=unit-tests"
            COVERAGE_ARGS: "-p"
          command: make test-coverage
      - store_test_results:
          path: target/reports/
      - run:
          name: Store coverage results
          command: mv .coverage.* target/coverage/
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/target/coverage/

  itest-lambda-docker:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Pull Lambda runtimes
          command: |
            sudo useradd localstack -s /bin/bash
            docker pull -q lambci/lambda:nodejs12.x
            docker pull -q localstack/lambda-js:nodejs14.x
            docker pull -q lambci/lambda:ruby2.7
            docker pull -q lambci/lambda:python3.6
            docker pull -q lambci/lambda:python3.7
            docker pull -q lambci/lambda:python3.8
            docker pull -q mlupin/docker-lambda:python3.9
            docker pull -q lambci/lambda:dotnetcore3.1
            docker pull -q mlupin/docker-lambda:dotnet6
            docker pull -q lambci/lambda:provided
            docker pull -q lambci/lambda:java8
            docker pull -q lambci/lambda:java8.al2
            docker pull -q lambci/lambda:java11
      - run:
          name: Initialize Test Libraries
          command: make init-testlibs
      - run:
          name: Test Docker client
          environment:
            TEST_PATH: "tests/integration/docker_utils"
            TEST_SKIP_LOCALSTACK_START: 1
            PYTEST_ARGS: "--reruns 2 --junitxml=target/reports/docker-client.xml -o junit_suite_name='docker-client'"
            COVERAGE_ARGS: "-p"
          command: make test-coverage
      - run:
          name: Test 'docker' Lambda executor
          environment:
            LAMBDA_EXECUTOR: "docker"
            USE_SSL: 1
            TEST_PATH: "tests/integration/awslambda/ tests/integration/test_integration.py tests/integration/test_apigateway.py"
            PYTEST_ARGS: "--reruns 2 --junitxml=target/reports/lambda-docker.xml -o junit_suite_name='lambda-docker'"
            COVERAGE_ARGS: "-p"
          command: make test-coverage
      - run:
          name: Test 'docker-reuse' Lambda executor
          environment:
            LAMBDA_EXECUTOR: "docker-reuse"
            TEST_PATH: "tests/integration/awslambda/ tests/integration/test_integration.py tests/integration/test_apigateway.py"
            PYTEST_ARGS: "--reruns 2 --junitxml=target/reports/lambda-docker-reuse.xml -o junit_suite_name='lambda-docker-reuse'"
            COVERAGE_ARGS: "-p"
          command: make test-coverage
      - run:
          name: Store coverage results
          command: mv .coverage.* target/coverage/
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/target/coverage/
      - store_test_results:
          path: target/reports/

  itest-lambda-provider:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Test ASF Lambda provider
          environment:
            PROVIDER_OVERRIDE_LAMBDA: "asf"
            TEST_PATH: "tests/integration/awslambda/test_lambda_api.py"
            PYTEST_ARGS: "--reruns 3 --junitxml=target/reports/lambda_asf.xml -o junit_suite_name='lambda_asf'"
            COVERAGE_ARGS: "-p"
          command: make test-coverage || true
      - run:
          name: Store coverage results
          command: mv .coverage.* target/coverage/
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/target/coverage/
      - store_test_results:
          path: target/reports/

  docker-build:
    parameters:
      platform:
        description: "Platform to build for"
        default: "amd64"
        type: string
      machine_image:
        description: "CircleCI machine type to run at"
        default: "ubuntu-2004:202107-02"
        type: string
      resource_class:
        description: "CircleCI machine type to run at"
        default: "medium"
        type: string
    machine:
      image: << parameters.machine_image >>
      docker_layer_caching: true
    resource_class: << parameters.resource_class >>
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Build full docker image
          command: make docker-build
      - run:
          name: Save full docker image
          command: PLATFORM="<< parameters.platform >>" make docker-save-image
      - when:
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Build light docker image
                command: make docker-build-light
            - run:
                name: Run pre-release smoke tests
                command: make ci-pro-smoke-tests
            - run:
                name: Save light docker image
                command: PLATFORM="<< parameters.platform >>" make docker-save-image-light
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/target/

  docker-test:
    parameters:
      platform:
        description: "Platform to build for"
        default: "amd64"
        type: string
      resource_class:
        description: "CircleCI machine type to run at"
        default: "medium"
        type: string
      machine_image:
        description: "CircleCI machine type to run at"
        default: << pipeline.parameters.ubuntu-amd64-machine-image >>
        type: string
    machine:
      image: << parameters.machine_image >>
    resource_class: << parameters.resource_class >>
    working_directory: /tmp/workspace/repo
    parallelism: 2
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load docker localstack-full image
          command: docker load -i target/localstack-docker-image-<< parameters.platform >>.tar
      - run:
          name: Run integration tests
          # circleci split returns newline separated list, so `tr` is necessary to prevent problems in the Makefile
          command: |
            TEST_FILES=$(circleci tests glob "tests/integration/**/test_*.py" | circleci tests split --split-by=timings | tr '\n' ' ')
            PYTEST_ARGS="-o junit_family=legacy --junitxml=target/reports/test-report-<< parameters.platform >>-${CIRCLE_NODE_INDEX}.xml" \
            COVERAGE_FILE="target/coverage/.coverage.<< parameters.platform >>.${CIRCLE_NODE_INDEX}" \
            TEST_PATH=$TEST_FILES \
            make docker-run-tests
      - store_test_results:
          path: target/reports/
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/target/reports/
            - repo/target/coverage/
            - repo/target/metric_reports

  capture-not-implemented:
    parameters:
      pro:
        description: "Run tests against Pro?"
        default: false
        type: boolean
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load docker localstack-full image
          command: docker load -i target/localstack-docker-image-amd64.tar
      - run:
          name: Run localstack
          command: |
            <<#parameters.pro>>LOCALSTACK_API_KEY=$TEST_LOCALSTACK_API_KEY<</parameters.pro>> DISABLE_EVENTS="1" IMAGE_NAME="localstack/localstack-full:latest" bin/localstack start -d
            bin/localstack wait -t 120
      - run:
          name: Run capture-not-implemented
          command: |
            source .venv/bin/activate
            cd scripts
            <<#parameters.pro>>mkdir -p pro<</parameters.pro>>
            python -m capture_notimplemented_responses <<#parameters.pro>>./pro<</parameters.pro>>
      - run:
          name: Print the logs
          command: |
            source .venv/bin/activate
            localstack logs
      - run:
          name: Stop localstack
          command: |
            source .venv/bin/activate
            localstack stop
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/scripts/<<#parameters.pro>>pro/<</parameters.pro>>implementation_coverage_aggregated.csv
            - repo/scripts/<<#parameters.pro>>pro/<</parameters.pro>>implementation_coverage_full.csv

  report:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Collect coverage
          command: |
            source .venv/bin/activate
            cd target/coverage
            ls -la
            coverage combine
            mv .coverage ../../
      - run:
          name: Report coverage statistics
          command: |
            source .venv/bin/activate
            coverage report || true
            coverage html || true
            coveralls || true
      - run:
          name: Parity metric aggregation
          command: |
            source .venv/bin/activate
            python -m scripts.metric_aggregator . amd64
      - store_artifacts:
          path: parity_metrics/
      - store_artifacts:
          path: scripts/implementation_coverage_aggregated.csv
          destination: community/implementation_coverage_aggregated.csv
      - store_artifacts:
          path: scripts/implementation_coverage_full.csv
          destination: community/implementation_coverage_full.csv
      - store_artifacts:
          path: scripts/pro/implementation_coverage_aggregated.csv
          destination: pro/implementation_coverage_aggregated.csv
      - store_artifacts:
          path: scripts/pro/implementation_coverage_full.csv
          destination: pro/implementation_coverage_full.csv

  docker-push:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load docker image - amd64/full
          command: |
            # Load localstack/localstack-full:latest for AMD64
            docker load -i target/localstack-docker-image-amd64.tar
      - run:
          name: Load docker image - amd64/light
          command: |
            # Load localstack/localstack-light:latest
            docker load -i target/localstack-docker-image-light-amd64.tar
      - run:
          name: Log in to ECR registry
          command: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
      - run:
          name: Push docker images - amd64
          command: |
            # Push to Docker Hub
            PLATFORM="amd64" make docker-push-master-all
            # Push to Amazon Public ECR
            PLATFORM="amd64" SOURCE_IMAGE_NAME="localstack/localstack-light" TARGET_IMAGE_NAME="public.ecr.aws/localstack/localstack" make docker-push-master
      # Load and push per architecture (load overwrites the previous ones)
      - run:
          name: Load docker image - arm64/full
          command: |
            # Load localstack/localstack-full:latest for ARM64
            docker load -i target/localstack-docker-image-arm64.tar
      - run:
          name: Load docker image - arm64/light
          command: docker load -i target/localstack-docker-image-light-arm64.tar
      - run:
          name: Push docker images - arm64
          command: |
            # Push to Docker Hub
            PLATFORM="arm64" make docker-push-master-all
            # Push to Amazon Public ECR
            PLATFORM="arm64" SOURCE_IMAGE_NAME="localstack/localstack-light" TARGET_IMAGE_NAME="public.ecr.aws/localstack/localstack" make docker-push-master
      - run:
          name: Create multi-platform manifests - full
          command: |
            # Push to Docker Hub
            make docker-create-push-manifests
      - run:
          name: Create multi-platform manifests - light
          command: |
            # Push to Docker Hub
            make docker-create-push-manifests-light
            # Push to Amazon Public ECR
            MANIFEST_IMAGE_NAME="public.ecr.aws/localstack/localstack" make docker-create-push-manifests

workflows:
  main:
    jobs:
      - install
      - preflight:
          requires:
            - install
      - itest-lambda-docker:
          requires:
            - preflight
      - itest-lambda-provider:
          requires:
            - preflight
      - unit-tests:
          requires:
            - preflight
      - docker-build:
          name: docker-build-amd64
          platform: amd64
          machine_image: << pipeline.parameters.ubuntu-amd64-machine-image >>
          resource_class: medium
          requires:
            - preflight
      - docker-build:
          name: docker-build-arm64
          platform: arm64
          # The latest version of ubuntu is not yet supported for ARM:
          # https://circleci.com/docs/2.0/arm-resources/
          machine_image: << pipeline.parameters.ubuntu-arm64-machine-image >>
          resource_class: arm.medium
          requires:
            - preflight
      - docker-test:
          name: docker-test-arm64
          platform: arm64
          resource_class: arm.medium
          machine_image: << pipeline.parameters.ubuntu-arm64-machine-image >>
          requires:
            - docker-build-arm64
      - docker-test:
          name: docker-test-amd64
          platform: amd64
          resource_class: medium
          machine_image: << pipeline.parameters.ubuntu-amd64-machine-image >>
          requires:
            - docker-build-amd64
      - capture-not-implemented:
          name: collect-not-implemented-community
          requires:
            - docker-build-amd64
      - capture-not-implemented:
          name: collect-not-implemented-pro
          pro: true
          requires:
            - docker-build-amd64
      - report:
          requires:
            - itest-lambda-docker
            - itest-lambda-provider
            - docker-test-amd64
            - docker-test-arm64
            - collect-not-implemented-community
            - collect-not-implemented-pro
            - unit-tests
      - docker-push:
          filters:
            branches:
              only: master
          requires:
            - itest-lambda-docker
            - itest-lambda-provider
            - docker-test-amd64
            - docker-test-arm64
            - unit-tests
