version: 2.1

parameters:
  ubuntu-amd64-machine-image:
    type: string
    default: "ubuntu-2004:2022.04.1"
  ubuntu-arm64-machine-image:
    type: string
    default: "ubuntu-2004:2022.04.1"

executors:
  ubuntu-machine-amd64:
    machine:
      image: << pipeline.parameters.ubuntu-amd64-machine-image >>

commands:
  prepare-pytest-tinybird:
    steps:
      - run:
          name: Setup Environment Variables
          command: |
            if [[ $CIRCLE_BRANCH == "master" ]] ; then
              echo "export TINYBIRD_PYTEST_ARGS='--report-to-tinybird '" >> $BASH_ENV
            fi
            echo "export TINYBIRD_DATASOURCE=localstack-tests-circleci" >> $BASH_ENV
            echo "export TINYBIRD_TOKEN=${TINYBIRD_CI_TOKEN}" >> $BASH_ENV
            echo "export CI_COMMIT_BRANCH=${CIRCLE_BRANCH}" >> $BASH_ENV
            echo "export CI_COMMIT_SHA=${CIRCLE_SHA1}" >> $BASH_ENV
            echo "export CI_JOB_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
            echo "export CI_JOB_NAME=${CIRCLE_JOB}" >> $BASH_ENV
            echo "export CI_JOB_ID=${CIRCLE_WORKFLOW_JOB_ID}" >> $BASH_ENV
            source $BASH_ENV

jobs:
  install:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - checkout
      - restore_cache:
          key: python-requirements-{{ checksum "setup.cfg" }}
      - run:
          name: Install prerequisites
          command: |
            # fix for: https://discuss.circleci.com/t/heroku-gpg-issues-in-ubuntu-images/43834/3
            sudo rm -rf /etc/apt/sources.list.d/heroku.list
            sudo apt-get update
            sudo apt-get install -y libsasl2-dev
      - run:
          name: Setup environment
          command: |
            make install
            mkdir -p target/reports
            mkdir -p target/coverage
      - save_cache:
          key: python-requirements-{{ checksum "setup.cfg" }}
          paths:
            - "~/.cache/pip"
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo

  preflight:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Linting
          command: make lint
      - run:
          name: Checking AWS compatibility markers
          command: make check-aws-markers

  unit-tests:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - prepare-pytest-tinybird
      - run:
          name: Unit tests
          environment:
            TEST_PATH: "tests/unit"
            COVERAGE_ARGS: "-p"
          command: |
            PYTEST_ARGS="${TINYBIRD_PYTEST_ARGS}--junitxml=target/reports/unit-tests.xml -o junit_suite_name=unit-tests" make test-coverage
      - store_test_results:
          path: target/reports/
      - run:
          name: Store coverage results
          command: mv .coverage.* target/coverage/
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/target/coverage/

  itest-lambda-legacy-local:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - prepare-pytest-tinybird
      - run:
          name: Test 'local' Lambda executor
          environment:
            LAMBDA_EXECUTOR: "local"
            PROVIDER_OVERRIDE_LAMBDA: "legacy"
            TEST_PATH: "tests/aws/services/lambda_/ tests/aws/test_integration.py tests/aws/services/apigateway/test_apigateway_basic.py tests/aws/services/cloudformation/resources/test_lambda.py"
            COVERAGE_ARGS: "-p"
          command: |
            PYTEST_ARGS="${TINYBIRD_PYTEST_ARGS}--reruns 2 --junitxml=target/reports/lambda-docker.xml -o junit_suite_name='legacy-lambda-local'" make test-coverage
      - run:
          name: Store coverage results
          command: mv .coverage.* target/coverage/
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/target/coverage/
      - store_test_results:
          path: target/reports/

  itest-sfn-v2-provider:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - prepare-pytest-tinybird
      - run:
          name: Test SFN V2 provider
          environment:
            PROVIDER_OVERRIDE_STEPFUNCTIONS: "v2"
            TEST_PATH: "tests/aws/services/stepfunctions/v2/"
            COVERAGE_ARGS: "-p"
          command: |
            PYTEST_ARGS="${TINYBIRD_PYTEST_ARGS}--reruns 3 --junitxml=target/reports/sfn_v2.xml -o junit_suite_name='sfn_v2'" make test-coverage
      - run:
          name: Store coverage results
          command: mv .coverage.* target/coverage/
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/target/coverage/
      - store_test_results:
          path: target/reports/

  itest-s3-stream-provider:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - prepare-pytest-tinybird
      - run:
          name: Test S3 Streaming provider
          environment:
            PROVIDER_OVERRIDE_S3: "stream"
            TEST_PATH: "tests/aws/services/s3/"
            COVERAGE_ARGS: "-p"
          command: |
            PYTEST_ARGS="${TINYBIRD_PYTEST_ARGS}--reruns 3 --junitxml=target/reports/s3_stream.xml -o junit_suite_name='s3_stream'" make test-coverage
      - run:
          name: Store coverage results
          command: mv .coverage.* target/coverage/
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/target/coverage/
      - store_test_results:
          path: target/reports/

  docker-build:
    parameters:
      platform:
        description: "Platform to build for"
        default: "amd64"
        type: string
      machine_image:
        description: "CircleCI machine type to run at"
        default: "ubuntu-2004:202107-02"
        type: string
      resource_class:
        description: "CircleCI machine type to run at"
        default: "medium"
        type: string
    machine:
      image: << parameters.machine_image >>
    resource_class: << parameters.resource_class >>
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Build community docker image
          command: make docker-build
      - run:
          name: Save docker image
          command: PLATFORM="<< parameters.platform >>" make docker-save-image
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/target/

  docker-test:
    parameters:
      platform:
        description: "Platform to build for"
        default: "amd64"
        type: string
      resource_class:
        description: "CircleCI machine type to run at"
        default: "medium"
        type: string
      machine_image:
        description: "CircleCI machine type to run at"
        default: << pipeline.parameters.ubuntu-amd64-machine-image >>
        type: string
    machine:
      image: << parameters.machine_image >>
    resource_class: << parameters.resource_class >>
    working_directory: /tmp/workspace/repo
    parallelism: 4
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load docker image
          command: docker load -i target/localstack-docker-image-<< parameters.platform >>.tar
      - when:
          condition:
            equal: [ "amd64", << parameters.platform >>]
          steps:
            - run:
                name: compute-src-hashes
                command: |
                  find tests/aws/services/lambda_/functions/common -type f -path '**/src/**' -not -path '*/.*' | xargs sha256sum > /tmp/common-functions-checksums
            - restore_cache:
                key: common-functions-{{ checksum "/tmp/common-functions-checksums" }}
            - run:
                name: pre-build lambda common test packages
                command: ./scripts/build_common_test_functions.sh `pwd`/tests/aws/services/lambda_/functions/common
            - save_cache:
                key: common-functions-{{ checksum "/tmp/common-functions-checksums" }}
                paths:
                  - "tests/aws/services/lambda_/functions/common"
      - prepare-pytest-tinybird
      - run:
          name: Run integration tests
          # circleci split returns newline separated list, so `tr` is necessary to prevent problems in the Makefile
          command: |
            TEST_FILES=$(circleci tests glob "tests/aws/**/test_*.py" "tests/integration/**/test_*.py" | circleci tests split --split-by=timings | tr '\n' ' ')
            PYTEST_ARGS="${TINYBIRD_PYTEST_ARGS}-o junit_family=legacy --junitxml=target/reports/test-report-<< parameters.platform >>-${CIRCLE_NODE_INDEX}.xml" \
            COVERAGE_FILE="target/coverage/.coverage.<< parameters.platform >>.${CIRCLE_NODE_INDEX}" \
            TEST_PATH=$TEST_FILES \
            DEBUG=1 \
            make docker-run-tests
      - store_test_results:
          path: target/reports/
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/target/reports/
            - repo/target/coverage/
            - repo/target/metric_reports

  bootstrap-tests:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load docker image
          command: docker load -i target/localstack-docker-image-amd64.tar
      - prepare-pytest-tinybird
      - run:
          name: Run bootstrap tests
          environment:
            TEST_PATH: "tests/bootstrap"
            COVERAGE_ARGS: "-p"
          command: |
            PYTEST_ARGS="${TINYBIRD_PYTEST_ARGS}--junitxml=target/reports/bootstrap-tests.xml -o junit_suite_name=bootstrap-tests" make test-coverage
      - store_test_results:
          path: target/reports/
      - run:
          name: Store coverage results
          command: mv .coverage.* target/coverage/
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/target/coverage/

  capture-not-implemented:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load docker image
          command: docker load -i target/localstack-docker-image-amd64.tar
      - run:
          name: Run localstack
          command: |
            DEBUG=1 DISABLE_EVENTS="1" IMAGE_NAME="localstack/localstack:latest" bin/localstack start -d
            bin/localstack wait -t 120 || (bin/localstack logs && false)
      - run:
          name: Run capture-not-implemented
          command: |
            source .venv/bin/activate
            cd scripts
            python -m capture_notimplemented_responses
      - run:
          name: Print the logs
          command: |
            source .venv/bin/activate
            localstack logs
      - run:
          name: Stop localstack
          command: |
            source .venv/bin/activate
            localstack stop
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/scripts/implementation_coverage_aggregated.csv
            - repo/scripts/implementation_coverage_full.csv

  report:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Collect coverage
          command: |
            source .venv/bin/activate
            cd target/coverage
            ls -la
            coverage combine
            mv .coverage ../../
      - run:
          name: Report coverage statistics
          command: |
            source .venv/bin/activate
            coverage report || true
            coverage html || true
            coveralls || true
      - run:
          name: Upload test metrics and implemented coverage data to tinybird
          command: |
            source .venv/bin/activate
            mkdir parity_metrics && mv target/metric_reports/metric-report-raw-data-*amd64*.csv parity_metrics
            METRIC_REPORT_DIR_PATH=parity_metrics \
            IMPLEMENTATION_COVERAGE_FILE=scripts/implementation_coverage_full.csv \
            SOURCE_TYPE=community \
            python -m scripts.tinybird.upload_raw_test_metrics_and_coverage
      - store_artifacts:
          path: parity_metrics/
      - store_artifacts:
          path: scripts/implementation_coverage_aggregated.csv
          destination: community/implementation_coverage_aggregated.csv
      - store_artifacts:
          path: scripts/implementation_coverage_full.csv
          destination: community/implementation_coverage_full.csv
      - store_artifacts:
          path: .coverage

  push:
    executor: ubuntu-machine-amd64
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load docker image - amd64
          command: |
            # Load all image for AMD64
            docker load -i target/localstack-docker-image-amd64.tar
      - run:
          name: Log in to ECR registry
          command: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
      - run:
          name: Push docker image - amd64
          command: |
            # Push to Docker Hub
            PLATFORM="amd64" make docker-push-master
            # Push to Amazon Public ECR
            PLATFORM="amd64" SOURCE_IMAGE_NAME="localstack/localstack" TARGET_IMAGE_NAME="public.ecr.aws/localstack/localstack" make docker-push-master
      # Load and push per architecture (load overwrites the previous ones)
      - run:
          name: Load docker image - arm64
          command: |
            # Load all image for AMD64
            docker load -i target/localstack-docker-image-arm64.tar
      - run:
          name: Push docker image - arm64
          command: |
            # Push to Docker Hub
            PLATFORM="arm64" make docker-push-master
            # Push to Amazon Public ECR
            PLATFORM="arm64" SOURCE_IMAGE_NAME="localstack/localstack" TARGET_IMAGE_NAME="public.ecr.aws/localstack/localstack" make docker-push-master
      - run:
          name: Create multi-platform manifests
          command: |
            # Push to Docker Hub
            make docker-create-push-manifests
            # Push to Amazon Public ECR
            MANIFEST_IMAGE_NAME="public.ecr.aws/localstack/localstack" make docker-create-push-manifests
      - run:
          name: Publish a dev release
          command: |
            source .venv/bin/activate
            bin/release-helper.sh set-ver $(bin/release-helper.sh next-dev-ver)
            make publish



workflows:
  main:
    jobs:
      - install
      - preflight:
          requires:
            - install
      - itest-lambda-legacy-local:
          requires:
            - preflight
      - itest-sfn-v2-provider:
          requires:
            - preflight
      - itest-s3-stream-provider:
          requires:
            - preflight
      - unit-tests:
          requires:
            - preflight
      - docker-build:
          name: docker-build-amd64
          platform: amd64
          machine_image: << pipeline.parameters.ubuntu-amd64-machine-image >>
          resource_class: medium
          requires:
            - preflight
      - docker-build:
          name: docker-build-arm64
          platform: arm64
          # The latest version of ubuntu is not yet supported for ARM:
          # https://circleci.com/docs/2.0/arm-resources/
          machine_image: << pipeline.parameters.ubuntu-arm64-machine-image >>
          resource_class: arm.medium
          requires:
            - preflight
      - docker-test:
          name: docker-test-arm64
          platform: arm64
          resource_class: arm.medium
          machine_image: << pipeline.parameters.ubuntu-arm64-machine-image >>
          requires:
            - docker-build-arm64
      - docker-test:
          name: docker-test-amd64
          platform: amd64
          resource_class: medium
          machine_image: << pipeline.parameters.ubuntu-amd64-machine-image >>
          requires:
            - docker-build-amd64
      - bootstrap-tests:
          requires:
            - docker-build-amd64
      - capture-not-implemented:
          name: collect-not-implemented
          requires:
            - docker-build-amd64
      - report:
          requires:
            - itest-lambda-legacy-local
            - itest-sfn-v2-provider
            - docker-test-amd64
            - docker-test-arm64
            - collect-not-implemented
            - unit-tests
      - push:
          filters:
            branches:
              only: master
          requires:
            - itest-lambda-legacy-local
            - itest-sfn-v2-provider
            - docker-test-amd64
            - docker-test-arm64
            - unit-tests
