# LocalStack Resource Provider Scaffolding v2
from __future__ import annotations

from pathlib import Path
from typing import Optional, TypedDict

import localstack.services.cloudformation.provider_utils as util
from localstack.services.cloudformation.resource_provider import (
    OperationStatus,
    ProgressEvent,
    ResourceProvider,
    ResourceRequest,
)


class SecretsManagerSecretTargetAttachmentProperties(TypedDict):
    SecretId: Optional[str]
    TargetId: Optional[str]
    TargetType: Optional[str]
    Id: Optional[str]


REPEATED_INVOCATION = "repeated_invocation"


class SecretsManagerSecretTargetAttachmentProvider(
    ResourceProvider[SecretsManagerSecretTargetAttachmentProperties]
):
    TYPE = "AWS::SecretsManager::SecretTargetAttachment"  # Autogenerated. Don't change
    SCHEMA = util.get_schema_path(Path(__file__))  # Autogenerated. Don't change

    def create(
        self,
        request: ResourceRequest[SecretsManagerSecretTargetAttachmentProperties],
    ) -> ProgressEvent[SecretsManagerSecretTargetAttachmentProperties]:
        """
        Create a new resource.

        Primary identifier fields:
          - /properties/Id

        Required properties:
          - TargetType
          - TargetId
          - SecretId



        Read-only properties:
          - /properties/Id



        """
        model = request.desired_state
        if not model.get("Id"):
            model["Id"] = util.generate_default_name(
                stack_name=request.stack_name, logical_resource_id=request.logical_resource_id
            )

        return ProgressEvent(
            status=OperationStatus.SUCCESS,
            resource_model=model,
            custom_context=request.custom_context,
        )

    def read(
        self,
        request: ResourceRequest[SecretsManagerSecretTargetAttachmentProperties],
    ) -> ProgressEvent[SecretsManagerSecretTargetAttachmentProperties]:
        """
        Fetch resource information


        """
        raise NotImplementedError

    def delete(
        self,
        request: ResourceRequest[SecretsManagerSecretTargetAttachmentProperties],
    ) -> ProgressEvent[SecretsManagerSecretTargetAttachmentProperties]:
        """
        Delete a resource


        """
        model = request.desired_state

        return ProgressEvent(
            status=OperationStatus.SUCCESS,
            resource_model=model,
            custom_context=request.custom_context,
        )

    def update(
        self,
        request: ResourceRequest[SecretsManagerSecretTargetAttachmentProperties],
    ) -> ProgressEvent[SecretsManagerSecretTargetAttachmentProperties]:
        """
        Update a resource


        """
        raise NotImplementedError
