import os

from localstack.utils.files import load_file
from localstack.utils.strings import short_uid
from localstack.utils.sync import retry


def test_nested_stack(s3_client, cfn_client, deploy_cfn_template, s3_create_bucket):
    # upload template to S3
    artifacts_bucket = f"cf-artifacts-{short_uid()}"
    artifacts_path = "stack.yaml"
    s3_create_bucket(Bucket=artifacts_bucket, ACL="public-read")
    s3_client.put_object(
        Bucket=artifacts_bucket,
        Key=artifacts_path,
        Body=load_file(os.path.join(os.path.dirname(__file__), "../templates/template5.yaml")),
    )

    # deploy template
    param_value = short_uid()
    stack_bucket_name = f"test-{param_value}"  # this is the bucket name generated by template5

    deploy_cfn_template(
        template=load_file(os.path.join(os.path.dirname(__file__), "../templates/template6.yaml"))
        % (artifacts_bucket, artifacts_path),
        parameters={"GlobalParam": param_value},
    )

    # assert that nested resources have been created
    def assert_bucket_exists():
        response = s3_client.head_bucket(Bucket=stack_bucket_name)
        assert 200 == response["ResponseMetadata"]["HTTPStatusCode"]

    retry(assert_bucket_exists)
