{
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_list_and_delete_apis": {
    "recorded-date": "01-02-2023, 20:16:52",
    "recorded-content": {
      "create-rest-api-1": {
        "apiKeySource": "HEADER",
        "createdDate": "datetime",
        "description": "this is my api",
        "disableExecuteApiEndpoint": false,
        "endpointConfiguration": {
          "types": [
            "EDGE"
          ]
        },
        "id": "<id:1>",
        "name": "<name:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "create-rest-api-2": {
        "apiKeySource": "HEADER",
        "createdDate": "datetime",
        "description": "this is my api2",
        "disableExecuteApiEndpoint": false,
        "endpointConfiguration": {
          "types": [
            "EDGE"
          ]
        },
        "id": "<id:2>",
        "name": "<name:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "get-rest-api-before-delete": {
        "items": [
          {
            "apiKeySource": "HEADER",
            "createdDate": "datetime",
            "description": "this is my api",
            "disableExecuteApiEndpoint": false,
            "endpointConfiguration": {
              "types": [
                "EDGE"
              ]
            },
            "id": "<id:1>",
            "name": "<name:1>"
          },
          {
            "apiKeySource": "HEADER",
            "createdDate": "datetime",
            "description": "this is my api2",
            "disableExecuteApiEndpoint": false,
            "endpointConfiguration": {
              "types": [
                "EDGE"
              ]
            },
            "id": "<id:2>",
            "name": "<name:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-rest-api": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 202
        }
      },
      "get-rest-api-after-delete": {
        "items": [
          {
            "apiKeySource": "HEADER",
            "createdDate": "datetime",
            "description": "this is my api2",
            "disableExecuteApiEndpoint": false,
            "endpointConfiguration": {
              "types": [
                "EDGE"
              ]
            },
            "id": "<id:2>",
            "name": "<name:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_create_rest_api_with_tags": {
    "recorded-date": "01-02-2023, 20:11:19",
    "recorded-content": {
      "create-rest-api-w-tags": {
        "apiKeySource": "HEADER",
        "createdDate": "datetime",
        "description": "this is my api",
        "disableExecuteApiEndpoint": false,
        "endpointConfiguration": {
          "types": [
            "EDGE"
          ]
        },
        "id": "<id:1>",
        "name": "<name:1>",
        "tags": {
          "MY_TAG1": "MY_VALUE1"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "get-rest-api-w-tags": {
        "apiKeySource": "HEADER",
        "createdDate": "datetime",
        "description": "this is my api",
        "disableExecuteApiEndpoint": false,
        "endpointConfiguration": {
          "types": [
            "EDGE"
          ]
        },
        "id": "<id:1>",
        "name": "<name:1>",
        "tags": {
          "MY_TAG1": "MY_VALUE1"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-rest-apis-w-tags": {
        "items": [
          {
            "apiKeySource": "HEADER",
            "createdDate": "datetime",
            "description": "this is my api",
            "disableExecuteApiEndpoint": false,
            "endpointConfiguration": {
              "types": [
                "EDGE"
              ]
            },
            "id": "<id:1>",
            "name": "<name:1>",
            "tags": {
              "MY_TAG1": "MY_VALUE1"
            }
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_update_rest_api_operation_add_remove": {
    "recorded-date": "01-02-2023, 20:11:40",
    "recorded-content": {
      "update-rest-api-add": {
        "apiKeySource": "HEADER",
        "binaryMediaTypes": [
          "image/png",
          "image/jpeg"
        ],
        "createdDate": "datetime",
        "description": "this is my api",
        "disableExecuteApiEndpoint": false,
        "endpointConfiguration": {
          "types": [
            "EDGE"
          ]
        },
        "id": "<id:1>",
        "name": "<name:1>",
        "tags": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "update-rest-api-replace": {
        "apiKeySource": "HEADER",
        "binaryMediaTypes": [
          "image/jpeg",
          "image/gif"
        ],
        "createdDate": "datetime",
        "description": "this is my api",
        "disableExecuteApiEndpoint": false,
        "endpointConfiguration": {
          "types": [
            "EDGE"
          ]
        },
        "id": "<id:1>",
        "name": "<name:1>",
        "tags": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "update-rest-api-remove": {
        "apiKeySource": "HEADER",
        "binaryMediaTypes": [
          "image/jpeg"
        ],
        "createdDate": "datetime",
        "disableExecuteApiEndpoint": false,
        "endpointConfiguration": {
          "types": [
            "EDGE"
          ]
        },
        "id": "<id:1>",
        "name": "<name:1>",
        "tags": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_update_rest_api_behaviour": {
    "recorded-date": "01-02-2023, 20:27:17",
    "recorded-content": {
      "update-rest-api-array": {
        "apiKeySource": "HEADER",
        "binaryMediaTypes": [
          "-"
        ],
        "createdDate": "datetime",
        "description": "this is my api",
        "disableExecuteApiEndpoint": false,
        "endpointConfiguration": {
          "types": [
            "EDGE"
          ]
        },
        "id": "<id:1>",
        "name": "<name:1>",
        "tags": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "update-rest-api-add-base-path": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid patch path /binaryMediaTypes"
        },
        "message": "Invalid patch path /binaryMediaTypes",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "update-rest-api-replace-base-path": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid patch path /binaryMediaTypes"
        },
        "message": "Invalid patch path /binaryMediaTypes",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "update-rest-api-remove-base-path": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid patch path /binaryMediaTypes"
        },
        "message": "Invalid patch path /binaryMediaTypes",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::test_import_rest_api": {
    "recorded-date": "10-01-2023, 20:08:25",
    "recorded-content": {
      "import_rest_api": {
        "apiKeySource": "HEADER",
        "binaryMediaTypes": [
          "*/*"
        ],
        "createdDate": "datetime",
        "disableExecuteApiEndpoint": false,
        "endpointConfiguration": {
          "types": [
            "EDGE"
          ]
        },
        "id": "<id:1>",
        "name": "<name:1>",
        "version": "1.0",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_update_rest_api_invalid_api_id": {
    "recorded-date": "01-02-2023, 22:26:45",
    "recorded-content": {
      "not-found-update-rest-api": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid API identifier specified 111111111111:api_id"
        },
        "message": "Invalid API identifier specified 111111111111:api_id",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_create_rest_api_with_optional_params": {
    "recorded-date": "01-02-2023, 23:48:05",
    "recorded-content": {
      "create-only-name": {
        "apiKeySource": "HEADER",
        "createdDate": "datetime",
        "disableExecuteApiEndpoint": false,
        "endpointConfiguration": {
          "types": [
            "EDGE"
          ]
        },
        "id": "<id:1>",
        "name": "<name:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "create-empty-desc": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Description cannot be an empty string"
        },
        "message": "Description cannot be an empty string",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create-with-version": {
        "apiKeySource": "HEADER",
        "createdDate": "datetime",
        "disableExecuteApiEndpoint": false,
        "endpointConfiguration": {
          "types": [
            "EDGE"
          ]
        },
        "id": "<id:2>",
        "name": "<name:2>",
        "version": "v1",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "create-with-empty-binary-media": {
        "apiKeySource": "HEADER",
        "createdDate": "datetime",
        "disableExecuteApiEndpoint": false,
        "endpointConfiguration": {
          "types": [
            "EDGE"
          ]
        },
        "id": "<id:3>",
        "name": "<name:3>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_resource_lifecycle": {
    "recorded-date": "23-02-2023, 22:08:31",
    "recorded-content": {
      "rest-api-root-resource": {
        "items": [
          {
            "id": "<id:1>",
            "path": "/"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-resource": {
        "id": "<id:2>",
        "parentId": "<id:1>",
        "path": "/pets",
        "pathPart": "pets",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "rest-api-resources-after-create": {
        "items": [
          {
            "id": "<id:1>",
            "path": "/"
          },
          {
            "id": "<id:2>",
            "parentId": "<id:1>",
            "path": "/pets",
            "pathPart": "pets"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-subresource": {
        "id": "<id:3>",
        "parentId": "<id:2>",
        "path": "/pets/subpets",
        "pathPart": "subpets",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "rest-api-resources-after-create-sub": {
        "items": [
          {
            "id": "<id:1>",
            "path": "/"
          },
          {
            "id": "<id:2>",
            "parentId": "<id:1>",
            "path": "/pets",
            "pathPart": "pets"
          },
          {
            "id": "<id:3>",
            "parentId": "<id:2>",
            "path": "/pets/subpets",
            "pathPart": "subpets"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "update-path-part": {
        "id": "<id:2>",
        "parentId": "<id:1>",
        "path": "/dogs",
        "pathPart": "dogs",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-resp-after-update-path-part": {
        "id": "<id:2>",
        "parentId": "<id:1>",
        "path": "/dogs",
        "pathPart": "dogs",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "del-resource": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 202
        }
      },
      "rest-api-resources-after-delete": {
        "items": [
          {
            "id": "<id:1>",
            "path": "/"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_update_resource_behaviour": {
    "recorded-date": "24-02-2023, 17:56:07",
    "recorded-content": {
      "nonexistent-resource": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid Resource identifier specified"
        },
        "message": "Invalid Resource identifier specified",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "invalid-path-part": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid patch path  '/invalid' specified for op 'replace'. Must be one of: [/parentId, /pathPart]"
        },
        "message": "Invalid patch path  '/invalid' specified for op 'replace'. Must be one of: [/parentId, /pathPart]",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-parent-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid Resource identifier specified"
        },
        "message": "Invalid Resource identifier specified",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "create-subresource": {
        "id": "<id:1>",
        "parentId": "<parent-id:1>",
        "path": "/pets/subpets",
        "pathPart": "subpets",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "create-subresource-child": {
        "id": "<id:2>",
        "parentId": "<id:1>",
        "path": "/pets/subpets/pets",
        "pathPart": "pets",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "existing-future-sibling-path": {
        "Error": {
          "Code": "ConflictException",
          "Message": "Another resource with the same parent already has this name: pets"
        },
        "message": "Another resource with the same parent already has this name: pets",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      },
      "update-parent-id-to-subresource-id": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Resources cannot be cyclical."
        },
        "message": "Resources cannot be cyclical.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "update-parent-id-to-root-id": {
        "id": "<id:1>",
        "parentId": "<id:3>",
        "path": "/subpets",
        "pathPart": "subpets",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "update-path-already-exists": {
        "Error": {
          "Code": "ConflictException",
          "Message": "Another resource with the same parent already has this name: pets"
        },
        "message": "Another resource with the same parent already has this name: pets",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      },
      "resources-after-deletion": {
        "items": [
          {
            "id": "<id:3>",
            "path": "/"
          },
          {
            "id": "<id:1>",
            "parentId": "<id:3>",
            "path": "/subpets",
            "pathPart": "subpets"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "remove-unsupported": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid patch path  '/pathPart' specified for op 'remove'. Please choose supported operations"
        },
        "message": "Invalid patch path  '/pathPart' specified for op 'remove'. Please choose supported operations",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "add-unsupported": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid patch path  '/pathPart' specified for op 'add'. Please choose supported operations"
        },
        "message": "Invalid patch path  '/pathPart' specified for op 'add'. Please choose supported operations",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_delete_resource": {
    "recorded-date": "23-02-2023, 20:41:28",
    "recorded-content": {
      "delete-resource": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 202
        }
      },
      "get-resources": {
        "items": [
          {
            "id": "<id:1>",
            "path": "/"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-subresource": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid Resource identifier specified"
        },
        "message": "Invalid Resource identifier specified",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_create_proxy_resource": {
    "recorded-date": "24-02-2023, 15:56:43",
    "recorded-content": {
      "create-base-proxy-resource": {
        "id": "<id:1>",
        "parentId": "<id:5>",
        "path": "/{proxy+}",
        "pathPart": "{proxy+}",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "create-proxy-sibling-resource": "<id:6>",
      "create-proxy-sibling-proxy-child-resource": {
        "id": "<id:2>",
        "parentId": "<id:6>",
        "path": "/parent/{proxy+}",
        "pathPart": "{proxy+}",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "create-proxy-sibling-static-child-resource": {
        "id": "<id:3>",
        "parentId": "<id:6>",
        "path": "/parent/child",
        "pathPart": "child",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "create-static-child-proxy-resource": {
        "id": "<id:4>",
        "parentId": "<id:3>",
        "path": "/parent/child/{proxy+}",
        "pathPart": "{proxy+}",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "all-resources": {
        "items": [
          {
            "id": "<id:5>",
            "path": "/"
          },
          {
            "id": "<id:6>",
            "parentId": "<id:5>",
            "path": "/parent",
            "pathPart": "parent"
          },
          {
            "id": "<id:3>",
            "parentId": "<id:6>",
            "path": "/parent/child",
            "pathPart": "child"
          },
          {
            "id": "<id:4>",
            "parentId": "<id:3>",
            "path": "/parent/child/{proxy+}",
            "pathPart": "{proxy+}"
          },
          {
            "id": "<id:2>",
            "parentId": "<id:6>",
            "path": "/parent/{proxy+}",
            "pathPart": "{proxy+}"
          },
          {
            "id": "<id:1>",
            "parentId": "<id:5>",
            "path": "/{proxy+}",
            "pathPart": "{proxy+}"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-proxy-sibling-dynamic-child-resource": {
        "id": "<id:7>",
        "parentId": "<id:6>",
        "path": "/parent/{child}",
        "pathPart": "{child}",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "create-dynamic-child-proxy-resource": {
        "id": "<id:8>",
        "parentId": "<id:7>",
        "path": "/parent/{child}/{proxy+}",
        "pathPart": "{proxy+}",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "all-resources-2": {
        "items": [
          {
            "id": "<id:5>",
            "path": "/"
          },
          {
            "id": "<id:6>",
            "parentId": "<id:5>",
            "path": "/parent",
            "pathPart": "parent"
          },
          {
            "id": "<id:3>",
            "parentId": "<id:6>",
            "path": "/parent/child",
            "pathPart": "child"
          },
          {
            "id": "<id:4>",
            "parentId": "<id:3>",
            "path": "/parent/child/{proxy+}",
            "pathPart": "{proxy+}"
          },
          {
            "id": "<id:7>",
            "parentId": "<id:6>",
            "path": "/parent/{child}",
            "pathPart": "{child}"
          },
          {
            "id": "<id:8>",
            "parentId": "<id:7>",
            "path": "/parent/{child}/{proxy+}",
            "pathPart": "{proxy+}"
          },
          {
            "id": "<id:1>",
            "parentId": "<id:5>",
            "path": "/{proxy+}",
            "pathPart": "{proxy+}"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_create_proxy_resource_validation": {
    "recorded-date": "24-02-2023, 16:17:00",
    "recorded-content": {
      "create-base-proxy-resource": {
        "id": "<id:1>",
        "parentId": "<parent-id:1>",
        "path": "/{proxy+}",
        "pathPart": "{proxy+}",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "create-proxy-dynamic-sibling-resource": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "A sibling ({proxy+}) of this resource already has a variable path part -- only one is allowed"
        },
        "message": "A sibling ({proxy+}) of this resource already has a variable path part -- only one is allowed",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create-proxy-static-child-resource": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Cannot create a child of a resource with a greedy path variable: {proxy+}"
        },
        "message": "Cannot create a child of a resource with a greedy path variable: {proxy+}",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create-proxy-dynamic-child-resource": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Cannot create a child of a resource with a greedy path variable: {proxy+}"
        },
        "message": "Cannot create a child of a resource with a greedy path variable: {proxy+}",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create-greedy-child-resource": {
        "id": "<id:2>",
        "parentId": "<parent-id:2>",
        "path": "/parent/{child+}",
        "pathPart": "{child+}",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_create_resource_parent_invalid": {
    "recorded-date": "24-02-2023, 16:39:00",
    "recorded-content": {
      "wrong-resource-parent-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid Resource identifier specified"
        },
        "message": "Invalid Resource identifier specified",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::test_import_tf_rest_api": {
    "recorded-date": "02-03-2023, 21:45:22",
    "recorded-content": {
      "import_tf_rest_api": {
        "apiKeySource": "HEADER",
        "createdDate": "datetime",
        "disableExecuteApiEndpoint": false,
        "endpointConfiguration": {
          "types": [
            "EDGE"
          ]
        },
        "id": "<id:1>",
        "name": "<name:1>",
        "version": "1",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "resources": {
        "items": [
          {
            "id": "<id:2>",
            "path": "/",
            "resourceMethods": {
              "GET": {},
              "OPTIONS": {}
            }
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "method-response-get": {
        "responseModels": {
          "application/json": "Empty"
        },
        "responseParameters": {
          "method.response.header.Access-Control-Allow-Origin": false
        },
        "statusCode": "200",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "integration-get": {
        "cacheKeyParameters": [],
        "cacheNamespace": "<id:2>",
        "contentHandling": "CONVERT_TO_TEXT",
        "httpMethod": "POST",
        "integrationResponses": {
          "200": {
            "responseParameters": {
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            },
            "statusCode": "200"
          }
        },
        "passthroughBehavior": "WHEN_NO_MATCH",
        "timeoutInMillis": 29000,
        "type": "AWS_PROXY",
        "uri": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:000000000000:function:s3OnObjectCreatedLambda-60c92b6/invocations",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "integration-response-get": {
        "responseParameters": {
          "method.response.header.Access-Control-Allow-Origin": "'*'"
        },
        "statusCode": "200",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "method-response-options": {
        "responseModels": {
          "application/json": "Empty"
        },
        "responseParameters": {
          "method.response.header.Access-Control-Allow-Headers": false,
          "method.response.header.Access-Control-Allow-Methods": false,
          "method.response.header.Access-Control-Allow-Origin": false
        },
        "statusCode": "200",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "integration-options": {
        "cacheKeyParameters": [],
        "cacheNamespace": "<id:2>",
        "integrationResponses": {
          "200": {
            "responseParameters": {
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
              "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            },
            "statusCode": "200"
          }
        },
        "passthroughBehavior": "WHEN_NO_MATCH",
        "requestTemplates": {
          "application/json": {
            "statusCode": 200
          }
        },
        "timeoutInMillis": 29000,
        "type": "MOCK",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "integration-response-options": {
        "responseParameters": {
          "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
          "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
          "method.response.header.Access-Control-Allow-Origin": "'*'"
        },
        "statusCode": "200",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_authorizer_crud_no_api": {
    "recorded-date": "28-02-2023, 20:06:16",
    "recorded-content": {
      "wrong-rest-api-id-create-authorizer": {
        "Error": {
          "Code": "ConflictException",
          "Message": "Unable to complete operation due to concurrent modification. Please try again later."
        },
        "message": "Unable to complete operation due to concurrent modification. Please try again later.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      },
      "wrong-rest-api-id-get-authorizers": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid API identifier specified 111111111111:test-fake-rest-id"
        },
        "message": "Invalid API identifier specified 111111111111:test-fake-rest-id",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_doc_arts_crud_no_api": {
    "recorded-date": "28-02-2023, 20:11:32",
    "recorded-content": {
      "wrong-rest-api-id-create-doc-part": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid API identifier specified 111111111111:test-fake-rest-id"
        },
        "message": "Invalid API identifier specified 111111111111:test-fake-rest-id",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "wrong-rest-api-id-get-doc-parts": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid API identifier specified 111111111111:test-fake-rest-id"
        },
        "message": "Invalid API identifier specified 111111111111:test-fake-rest-id",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_validators_crud_no_api": {
    "recorded-date": "28-02-2023, 20:18:59",
    "recorded-content": {
      "wrong-rest-api-id-create-validator": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid REST API identifier specified"
        },
        "message": "Invalid REST API identifier specified",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "wrong-rest-api-id-get-validators": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid API identifier specified 111111111111:test-fake-rest-id"
        },
        "message": "Invalid API identifier specified 111111111111:test-fake-rest-id",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_get_api_case_insensitive": {
    "recorded-date": "01-03-2023, 16:26:45",
    "recorded-content": {
      "create-rest-api": {
        "apiKeySource": "HEADER",
        "createdDate": "datetime",
        "description": "lower case api",
        "disableExecuteApiEndpoint": false,
        "endpointConfiguration": {
          "types": [
            "EDGE"
          ]
        },
        "id": "<id:1>",
        "name": "<name:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "get-api-upper-case": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid API identifier specified 111111111111:<upper-id>"
        },
        "message": "Invalid API identifier specified 111111111111:<upper-id>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_method_lifecycle": {
    "recorded-date": "15-03-2023, 12:06:26",
    "recorded-content": {
      "put-base-method-response": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "ANY",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "get-base-method-response": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "ANY",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "del-base-method-response": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "get-deleted-method-response": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid Method identifier specified"
        },
        "message": "Invalid Method identifier specified",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "delete-deleted-method-response": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid Method identifier specified"
        },
        "message": "Invalid Method identifier specified",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_method_request_parameters": {
    "recorded-date": "24-02-2023, 19:25:22",
    "recorded-content": {
      "put-method-request-params-response": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "ANY",
        "requestParameters": {
          "method.request.header.h_optional": false,
          "method.request.header.h_required": true,
          "method.request.querystring.q_optional": false,
          "method.request.querystring.q_required": true
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "get-method-request-params-response": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "ANY",
        "requestParameters": {
          "method.request.header.h_optional": false,
          "method.request.header.h_required": true,
          "method.request.querystring.q_optional": false,
          "method.request.querystring.q_required": true
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "req-params-same-name": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Parameter names must be unique across querystring, header and path"
        },
        "message": "Parameter names must be unique across querystring, header and path",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_put_method_validation": {
    "recorded-date": "25-02-2023, 17:49:08",
    "recorded-content": {
      "wrong-api": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid Resource identifier specified"
        },
        "message": "Invalid Resource identifier specified",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "wrong-resource": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid Resource identifier specified"
        },
        "message": "Invalid Resource identifier specified",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "wrong-method": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid HttpMethod specified. Valid options are GET,PUT,POST,DELETE,PATCH,OPTIONS,HEAD,ANY"
        },
        "message": "Invalid HttpMethod specified. Valid options are GET,PUT,POST,DELETE,PATCH,OPTIONS,HEAD,ANY",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "missing-authorizer-id": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid authorizer ID specified. Setting the authorization type to CUSTOM or COGNITO_USER_POOLS requires a valid authorizer."
        },
        "message": "Invalid authorizer ID specified. Setting the authorization type to CUSTOM or COGNITO_USER_POOLS requires a valid authorizer.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-request-validator": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid Request Validator identifier specified"
        },
        "message": "Invalid Request Validator identifier specified",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-model-name": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid model identifier specified: petModel"
        },
        "message": "Invalid model identifier specified: petModel",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_update_method": {
    "recorded-date": "13-03-2023, 23:31:44",
    "recorded-content": {
      "put-method-response": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "ANY",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "update-method-add": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "ANY",
        "requestModels": {
          "application/json": "Empty"
        },
        "requestParameters": {
          "method.request.querystring.optional": true
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "update-method-replace": {
        "apiKeyRequired": true,
        "authorizationType": "AWS_IAM",
        "httpMethod": "ANY",
        "operationName": "ReplacedOperationName",
        "requestModels": {
          "application/json": "Empty"
        },
        "requestParameters": {
          "method.request.querystring.optional": false
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "update-method-replace-authorizer": {
        "apiKeyRequired": true,
        "authorizationType": "CUSTOM",
        "authorizerId": "<authorizer-id:1>",
        "httpMethod": "ANY",
        "operationName": "ReplacedOperationName",
        "requestModels": {
          "application/json": "Empty"
        },
        "requestParameters": {
          "method.request.querystring.optional": false
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "update-method-remove": {
        "apiKeyRequired": true,
        "authorizationType": "CUSTOM",
        "authorizerId": "<authorizer-id:1>",
        "httpMethod": "ANY",
        "operationName": "ReplacedOperationName",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_update_method_validation": {
    "recorded-date": "13-03-2023, 23:36:56",
    "recorded-content": {
      "wrong-rest-api": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid Resource identifier specified"
        },
        "message": "Invalid Resource identifier specified",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "wrong-resource-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid Resource identifier specified"
        },
        "message": "Invalid Resource identifier specified",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "method-does-not-exist": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid Method identifier specified"
        },
        "message": "Invalid Method identifier specified",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put-method-response": {
        "apiKeyRequired": true,
        "authorizationType": "NONE",
        "httpMethod": "ANY",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "unsupported-operation": {
        "apiKeyRequired": true,
        "authorizationType": "NONE",
        "httpMethod": "ANY",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "unsupported-path": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid patch path /httpMethod"
        },
        "message": "Invalid patch path /httpMethod",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "wrong-path-request-parameters": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid patch path /requestParameters"
        },
        "message": "Invalid patch path /requestParameters",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "wrong-path-request-models": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid patch path /requestModels/application/json"
        },
        "message": "Invalid patch path /requestModels/application/json",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "wrong-value-type": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "ANY",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "wrong-auth-type": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid authorizer ID specified. Setting the authorization type to CUSTOM or COGNITO_USER_POOLS requires a valid authorizer."
        },
        "message": "Invalid authorizer ID specified. Setting the authorization type to CUSTOM or COGNITO_USER_POOLS requires a valid authorizer.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "skip-auth-id-with-wrong-type": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "ANY",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "wrong-auth-id": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid authorizer ID specified. Setting the authorization type to CUSTOM or COGNITO_USER_POOLS requires a valid authorizer."
        },
        "message": "Invalid authorizer ID specified. Setting the authorization type to CUSTOM or COGNITO_USER_POOLS requires a valid authorizer.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "wrong-req-validator-id": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid Request Validator identifier specified"
        },
        "message": "Invalid Request Validator identifier specified",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_model_lifecycle": {
    "recorded-date": "06-03-2023, 16:18:23",
    "recorded-content": {
      "create-model": {
        "contentType": "application/json",
        "description": "Calc output model",
        "id": "<id:1>",
        "name": "<name:1>",
        "schema": {
          "title": "Calc output",
          "type": "object",
          "properties": {
            "a": {
              "type": "number"
            },
            "b": {
              "type": "number"
            },
            "op": {
              "description": "operation of +, -, * or /",
              "type": "string"
            },
            "c": {
              "type": "number"
            }
          },
          "required": [
            "a",
            "b",
            "op"
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "get-models": {
        "items": [
          {
            "contentType": "application/json",
            "description": "Calc output model",
            "id": "<id:1>",
            "name": "<name:1>",
            "schema": {
              "title": "Calc output",
              "type": "object",
              "properties": {
                "a": {
                  "type": "number"
                },
                "b": {
                  "type": "number"
                },
                "op": {
                  "description": "operation of +, -, * or /",
                  "type": "string"
                },
                "c": {
                  "type": "number"
                }
              },
              "required": [
                "a",
                "b",
                "op"
              ]
            }
          },
          {
            "contentType": "application/json",
            "description": "This is a default empty schema model",
            "id": "<id:2>",
            "name": "<name:2>",
            "schema": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "title": "<name:2> Schema",
              "type": "object"
            }
          },
          {
            "contentType": "application/json",
            "description": "This is a default error schema model",
            "id": "<id:3>",
            "name": "<name:3>",
            "schema": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "title": "<name:3> Schema",
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-model": {
        "contentType": "application/json",
        "description": "Calc output model",
        "id": "<id:1>",
        "name": "<name:1>",
        "schema": {
          "title": "Calc output",
          "type": "object",
          "properties": {
            "a": {
              "type": "number"
            },
            "b": {
              "type": "number"
            },
            "op": {
              "description": "operation of +, -, * or /",
              "type": "string"
            },
            "c": {
              "type": "number"
            }
          },
          "required": [
            "a",
            "b",
            "op"
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "del-model": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 202
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_model_validation": {
    "recorded-date": "09-03-2023, 19:13:20",
    "recorded-content": {
      "create-model-wrong-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid API identifier specified 111111111111:abcde0"
        },
        "message": "Invalid API identifier specified 111111111111:abcde0",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "get-models-wrong-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid API identifier specified 111111111111:abcde0"
        },
        "message": "Invalid API identifier specified 111111111111:abcde0",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "get-model-wrong-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid model name specified: MySchema"
        },
        "message": "Invalid model name specified: MySchema",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "del-model-wrong-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid model name specified: MySchema"
        },
        "message": "Invalid model name specified: MySchema",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "create-model-already-exists": {
        "Error": {
          "Code": "ConflictException",
          "Message": "Model name already exists for this REST API"
        },
        "message": "Model name already exists for this REST API",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      },
      "create-model-empty-name": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Model name must be non-empty"
        },
        "message": "Model name must be non-empty",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create-model-empty-schema": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Model schema must have at least 1 property or array items defined"
        },
        "message": "Model schema must have at least 1 property or array items defined",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create-model-no-schema-json": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Model schema must have at least 1 property or array items defined"
        },
        "message": "Model schema must have at least 1 property or array items defined",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create-model-no-schema-xml": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Model schema must have at least 1 property or array items defined"
        },
        "message": "Model schema must have at least 1 property or array items defined",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_update_model": {
    "recorded-date": "09-03-2023, 19:39:34",
    "recorded-content": {
      "update-model-wrong-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid model name specified: mySchema"
        },
        "message": "Invalid model name specified: mySchema",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "create-model": {
        "contentType": "application/json",
        "id": "<id:1>",
        "name": "<name:1>",
        "schema": {
          "title": "<name:1>",
          "type": "object"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "update-model": {
        "contentType": "application/json",
        "id": "<id:1>",
        "name": "<name:1>",
        "schema": {
          "title": "Updated schema",
          "type": "object"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "update-model-invalid-op": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid patch path  '/wrong-path' specified for op 'add'. Please choose supported operations"
        },
        "message": "Invalid patch path  '/wrong-path' specified for op 'add'. Please choose supported operations",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "update-model-invalid-path": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid patch path  '/name' specified for op 'replace'. Must be one of: [/description, /schema]"
        },
        "message": "Invalid patch path  '/name' specified for op 'replace'. Must be one of: [/description, /schema]",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "update-model-empty-schema": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Model schema must have at least 1 property or array items defined"
        },
        "message": "Model schema must have at least 1 property or array items defined",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/apigateway/test_apigateway_api.py::TestApiGatewayApi::test_put_method_model": {
    "recorded-date": "15-03-2023, 12:12:59",
    "recorded-content": {
      "create-model": {
        "contentType": "application/json",
        "id": "<id:1>",
        "name": "<name:1>",
        "schema": {
          "title": "<name:1>",
          "type": "object"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "create-model-2": {
        "contentType": "application/json",
        "id": "<id:2>",
        "name": "<name:1>Two",
        "schema": {
          "title": "<name:1>Two",
          "type": "object"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "put-method-request-models": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "ANY",
        "requestModels": {
          "application/json": "<name:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "delete-model-used": {
        "Error": {
          "Code": "ConflictException",
          "Message": "Cannot delete model '<name:1>', is referenced in method request: //ANY"
        },
        "message": "Cannot delete model '<name:1>', is referenced in method request: //ANY",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      },
      "update-method-model": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "ANY",
        "requestModels": {
          "application/json": "<name:1>Two"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-model-unused": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 202
        }
      },
      "delete-model-used-2": {
        "Error": {
          "Code": "ConflictException",
          "Message": "Cannot delete model '<name:1>Two', is referenced in method request: //ANY"
        },
        "message": "Cannot delete model '<name:1>Two', is referenced in method request: //ANY",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      },
      "put-method-2-request-models": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "ANY",
        "requestModels": {
          "application/json": "<name:1>Two"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "delete-model-used-by-2-method": {
        "Error": {
          "Code": "ConflictException",
          "Message": "Cannot delete model '<name:1>Two', is referenced in method request: /test/ANY"
        },
        "message": "Cannot delete model '<name:1>Two', is referenced in method request: /test/ANY",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      },
      "update-method-model-2": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "ANY",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-model-used-by-method-1": {
        "Error": {
          "Code": "ConflictException",
          "Message": "Cannot delete model '<name:1>Two', is referenced in method request: //ANY"
        },
        "message": "Cannot delete model '<name:1>Two', is referenced in method request: //ANY",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      },
      "delete-method-using-model-2": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "delete-model-unused-2": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 202
        }
      }
    }
  }
}
