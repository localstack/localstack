Resources:
  queue276F7297:
    Type: AWS::SQS::Queue
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  waitFnServiceRole0216D1B5:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  waitFnServiceRoleDefaultPolicy76952F54:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:ReceiveMessage
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueUrl
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - queue276F7297
                - Arn
          - Action:
              - states:SendTaskSuccess
              - states:SendTaskFailure
              - states:SendTaskHeartbeat
            Effect: Allow
            Resource:
              Ref: statemachineC5962F3E
        Version: "2012-10-17"
      PolicyName: waitFnServiceRoleDefaultPolicy76952F54
      Roles:
        - Ref: waitFnServiceRole0216D1B5
  waitFnF267ED7D:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import os

          import boto3


          def create_client(svc_name: str):
              if "LOCALSTACK_HOSTNAME" in os.environ:
                  return boto3.client(
                      svc_name, endpoint_url=f"http://{os.environ['LOCALSTACK_HOSTNAME']}:{os.environ['EDGE_PORT']}"
                  )
              else:
                  return boto3.client(svc_name)


          sfn_client = create_client("stepfunctions")


          def handler(event, context):
              print(event)

              records = event["Records"]
              record = records[0]
              data = json.loads(record["body"])

              if data["ShouldFail"] == "yes":
                  sfn_client.send_task_failure(taskToken=data["TaskToken"], error="IntentionalFail", cause="Intentional failure")
              else:
                  sfn_client.send_task_success(taskToken=data["TaskToken"], output=json.dumps({"message": "Successfully executed lambda"}))
      Role:
        Fn::GetAtt:
          - waitFnServiceRole0216D1B5
          - Arn
      Handler: index.handler
      Runtime: python3.9
    DependsOn:
      - waitFnServiceRoleDefaultPolicy76952F54
      - waitFnServiceRole0216D1B5
  waitFnEventInvokeConfig11670229:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      FunctionName:
        Ref: waitFnF267ED7D
      Qualifier: $LATEST
      MaximumRetryAttempts: 0
  waitFnSqsEventSourceWaitForCallbackqueue5A0C181CF1A9D0B1:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName:
        Ref: waitFnF267ED7D
      BatchSize: 1
      EventSourceArn:
        Fn::GetAtt:
          - queue276F7297
          - Arn
  statemachineRole52044F93:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::FindInMap:
                  - ServiceprincipalMap
                  - Ref: AWS::Region
                  - states
        Version: "2012-10-17"
  statemachineRoleDefaultPolicy9AE064E2:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sqs:SendMessage
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - queue276F7297
                - Arn
        Version: "2012-10-17"
      PolicyName: statemachineRoleDefaultPolicy9AE064E2
      Roles:
        - Ref: statemachineRole52044F93
  statemachineC5962F3E:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn:
        Fn::GetAtt:
          - statemachineRole52044F93
          - Arn
      DefinitionString:
        Fn::Join:
          - ""
          - - '{"StartAt":"Start Task And Wait For Callback","States":{"Start Task And Wait For Callback":{"Next":"Succeed State","Catch":[{"ErrorEquals":["States.ALL"],"Next":"Fail State"}],"Type":"Task","Resource":"arn:'
            - Ref: AWS::Partition
            - :states:::sqs:sendMessage.waitForTaskToken","Parameters":{"QueueUrl":"
            - Ref: queue276F7297
            - '","MessageBody":{"MessageTitle":"Task started by Step Functions. Waiting for callback with task token.","ShouldFail.$":"$.shouldfail","TaskToken.$":"$$.Task.Token"}}},"Succeed State":{"Type":"Succeed"},"Fail State":{"Type":"Fail"}}}'
    DependsOn:
      - statemachineRoleDefaultPolicy9AE064E2
      - statemachineRole52044F93
Outputs:
  StateMachineArn:
    Value:
      Ref: statemachineC5962F3E
  StateMachineName:
    Value:
      Fn::GetAtt:
        - statemachineC5962F3E
        - Name
  RoleArn:
    Value:
      Fn::GetAtt:
        - statemachineRole52044F93
        - Arn
  RoleName:
    Value:
      Ref: statemachineRole52044F93
Mappings:
  ServiceprincipalMap:
    af-south-1:
      states: states.af-south-1.amazonaws.com
    ap-east-1:
      states: states.ap-east-1.amazonaws.com
    ap-northeast-1:
      states: states.ap-northeast-1.amazonaws.com
    ap-northeast-2:
      states: states.ap-northeast-2.amazonaws.com
    ap-northeast-3:
      states: states.ap-northeast-3.amazonaws.com
    ap-south-1:
      states: states.ap-south-1.amazonaws.com
    ap-south-2:
      states: states.ap-south-2.amazonaws.com
    ap-southeast-1:
      states: states.ap-southeast-1.amazonaws.com
    ap-southeast-2:
      states: states.ap-southeast-2.amazonaws.com
    ap-southeast-3:
      states: states.ap-southeast-3.amazonaws.com
    ca-central-1:
      states: states.ca-central-1.amazonaws.com
    cn-north-1:
      states: states.cn-north-1.amazonaws.com
    cn-northwest-1:
      states: states.cn-northwest-1.amazonaws.com
    eu-central-1:
      states: states.eu-central-1.amazonaws.com
    eu-north-1:
      states: states.eu-north-1.amazonaws.com
    eu-south-1:
      states: states.eu-south-1.amazonaws.com
    eu-south-2:
      states: states.eu-south-2.amazonaws.com
    eu-west-1:
      states: states.eu-west-1.amazonaws.com
    eu-west-2:
      states: states.eu-west-2.amazonaws.com
    eu-west-3:
      states: states.eu-west-3.amazonaws.com
    me-central-1:
      states: states.me-central-1.amazonaws.com
    me-south-1:
      states: states.me-south-1.amazonaws.com
    sa-east-1:
      states: states.sa-east-1.amazonaws.com
    us-east-1:
      states: states.us-east-1.amazonaws.com
    us-east-2:
      states: states.us-east-2.amazonaws.com
    us-gov-east-1:
      states: states.us-gov-east-1.amazonaws.com
    us-gov-west-1:
      states: states.us-gov-west-1.amazonaws.com
    us-iso-east-1:
      states: states.amazonaws.com
    us-iso-west-1:
      states: states.amazonaws.com
    us-isob-east-1:
      states: states.amazonaws.com
    us-west-1:
      states: states.us-west-1.amazonaws.com
    us-west-2:
      states: states.us-west-2.amazonaws.com
