{
  "tests/integration/s3/test_s3.py::TestS3::test_put_and_get_object_with_utf8_key": {
    "recorded-date": "02-06-2022, 11:43:43",
    "recorded-content": {
      "put-object": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "ETag": "\"e99a18c428cb38d5f260853678922e03\""
      },
      "get-object": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "AcceptRanges": "bytes",
        "LastModified": "datetime",
        "ContentLength": 6,
        "ETag": "\"e99a18c428cb38d5f260853678922e03\"",
        "ContentType": "binary/octet-stream",
        "Metadata": {},
        "Body": ""
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_metadata_header_character_decoding": {
    "recorded-date": "31-05-2022, 09:37:56",
    "recorded-content": {
      "head-object": {
        "test_meta_1": "foo",
        "__meta_2": "bar"
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_bucket_with_content": {
    "recorded-date": "31-05-2022, 09:36:16",
    "recorded-content": {
      "list-objects": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "IsTruncated": false,
        "Marker": "",
        "Contents": [
          {
            "Key": "test-key-0",
            "LastModified": "datetime",
            "ETag": "\"86639701cdcc5b39438a5f009bd74cb1\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-1",
            "LastModified": "datetime",
            "ETag": "\"70a37754eb5a2e7db8cd887aaf11cda7\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-2",
            "LastModified": "datetime",
            "ETag": "\"282ff2cb3d9dadeb831bb3ba0128f2f4\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-3",
            "LastModified": "datetime",
            "ETag": "\"2b61ddda48445374b35a927b6ae2cd6d\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-4",
            "LastModified": "datetime",
            "ETag": "\"f533f549a84b9d7a381a7ed55c4f46b9\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-5",
            "LastModified": "datetime",
            "ETag": "\"0efcf24eb64fa875c294d05703096b0d\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-6",
            "LastModified": "datetime",
            "ETag": "\"7b1b88bb19a8c5a6a1d53eaa75108b80\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-7",
            "LastModified": "datetime",
            "ETag": "\"698fbf838fdda3065e058190398514f8\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-8",
            "LastModified": "datetime",
            "ETag": "\"96c2178517e273d4001ab7f68fdde969\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          },
          {
            "Key": "test-key-9",
            "LastModified": "datetime",
            "ETag": "\"da51d6e22a1ae095154e69b07eef731b\"",
            "Size": 6,
            "StorageClass": "STANDARD",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            }
          }
        ],
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "MaxKeys": 100,
        "EncodingType": "url"
      },
      "list-buckets": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "Buckets": [],
        "Owner": {
          "DisplayName": "<display-name>",
          "ID": "<owner-id>"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_region_header_exists": {
    "recorded-date": "02-06-2022, 11:23:16",
    "recorded-content": {
      "head_bucket": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        }
      },
      "list_objects_v2": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "IsTruncated": false,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "MaxKeys": 1000,
        "EncodingType": "url",
        "KeyCount": 0
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_upload_file_multipart": {
    "recorded-date": "02-06-2022, 11:52:47",
    "recorded-content": {
      "get_object": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "AcceptRanges": "bytes",
        "LastModified": "datetime",
        "ContentLength": 6144,
        "ETag": "\"8eabe9d6b43316e840b079170916c079-1\"",
        "ContentType": "binary/octet-stream",
        "Metadata": {},
        "Body": ""
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_put_object": {
    "recorded-date": "02-06-2022, 11:55:55",
    "recorded-content": {
      "get_object": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "AcceptRanges": "bytes",
        "LastModified": "datetime",
        "ContentLength": 9,
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "ContentType": "binary/octet-stream",
        "Metadata": {},
        "Body": ""
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_put_url_metadata": {
    "recorded-date": "02-06-2022, 12:05:29",
    "recorded-content": {
      "head_object": {
        "ResponseMetadata": {
          "HTTPStatusCode": 200,
          "HTTPHeaders": {}
        },
        "AcceptRanges": "bytes",
        "LastModified": "datetime",
        "ContentLength": 11,
        "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
        "ContentType": "binary/octet-stream",
        "Metadata": {
          "foo": "bar"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_and_get_object_with_hash_prefix": {
    "recorded-date": "26-07-2022, 15:37:04",
    "recorded-content": {
      "put-object": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        },
        "ETag": "\"39d0d586a701e199389d954f2d592720\""
      },
      "get-object": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        },
        "AcceptRanges": "bytes",
        "LastModified": "datetime",
        "ContentLength": 8,
        "ETag": "\"39d0d586a701e199389d954f2d592720\"",
        "ContentType": "binary/octet-stream",
        "Metadata": {},
        "Body": ""
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_object_tagging_empty_list": {
    "recorded-date": "09-08-2022, 15:20:21",
    "recorded-content": {
      "created-object-tags": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        },
        "TagSet": []
      },
      "updated-object-tags": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        },
        "TagSet": [
          {
            "Key": "tag1",
            "Value": "tag1"
          }
        ]
      },
      "deleted-object-tags": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        },
        "TagSet": []
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_get_object_attributes": {
    "recorded-date": "09-08-2022, 15:35:20",
    "recorded-content": {
      "object-attrs": {
        "ETag": "e92499db864217242396e8ef766079a9",
        "LastModified": "datetime",
        "ObjectSize": 7,
        "StorageClass": "STANDARD",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_head_object_fields": {
    "recorded-date": "09-08-2022, 16:38:09",
    "recorded-content": {
      "head-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e8dc4081b13434b45189a720b77b6818\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_get_object_after_deleted_in_versioned_bucket": {
    "recorded-date": "09-08-2022, 17:23:32",
    "recorded-content": {
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "abcdefgh",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e8dc4081b13434b45189a720b77b6818\"",
        "LastModified": "datetime",
        "Metadata": {},
        "VersionId": "dHbAQTgztqVidv2H01dsECtk0x7LN0CJ",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-after-delete": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "my-key",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_copy_metadata_replace": {
    "recorded-date": "18-08-2022, 17:31:08",
    "recorded-content": {
      "put_object": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy_object": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_copy": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/javascript",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "another-key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_copy_content_type_and_metadata": {
    "recorded-date": "18-08-2022, 17:52:12",
    "recorded-content": {
      "put_object": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy_object": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_copy": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy_object_second": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_second_copy": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_multipart_upload_acls": {
    "recorded-date": "19-08-2022, 16:57:09",
    "recorded-content": {
      "bucket-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "READ"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "permission-acl-key0": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "permission-acl-key1": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "permission-acl-key2": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "READ"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "WRITE"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_object_expiry": {
    "recorded-date": "22-08-2022, 18:02:13",
    "recorded-content": {
      "head-object-expired": {
        "AcceptRanges": "bytes",
        "ContentLength": 3,
        "ContentType": "binary/octet-stream",
        "ETag": "\"acbd18db4cc2f85cedef654fccc4a4d8\"",
        "Expires": "datetime",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-not-yet-expired": {
        "AcceptRanges": "bytes",
        "Body": "foo",
        "ContentLength": 3,
        "ContentType": "binary/octet-stream",
        "ETag": "\"acbd18db4cc2f85cedef654fccc4a4d8\"",
        "Expires": "datetime",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_bucket_availability": {
    "recorded-date": "22-08-2022, 20:06:27",
    "recorded-content": {
      "bucket-lifecycle": {
        "Error": {
          "BucketName": "test-bucket-lifecycle",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "bucket-replication": {
        "Error": {
          "BucketName": "test-bucket-lifecycle",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_upload_file_with_xml_preamble": {
    "recorded-date": "23-08-2022, 12:03:04",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><test/>",
        "ContentLength": 45,
        "ContentType": "binary/octet-stream",
        "ETag": "\"8a793423f1e69103a7056b99e4ad6c0b\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_different_location_constraint": {
    "recorded-date": "23-08-2022, 18:45:59",
    "recorded-content": {
      "get_bucket_location_bucket_1": {
        "LocationConstraint": null,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_location_bucket_2": {
        "LocationConstraint": "us-east-2",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create_bucket_constraint_exc": {
        "Error": {
          "Code": "IllegalLocationConstraintException",
          "Message": "The unspecified location constraint is incompatible for the region specific endpoint this request was sent to."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create_bucket_bucket_3": {
        "Location": "<location>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_location_bucket_3": {
        "LocationConstraint": "us-east-2",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_get_object_with_anon_credentials": {
    "recorded-date": "24-08-2022, 11:01:27",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "body data",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"53ebc26c3ff5decfe9ffc7bdbaa02459\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_putobject_with_multiple_keys": {
    "recorded-date": "24-08-2022, 19:09:22",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "test",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_bucket_lifecycle_configuration": {
    "recorded-date": "08-09-2022, 20:59:00",
    "recorded-content": {
      "get-bucket-lifecycle-exc-1": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchLifecycleConfiguration",
          "Message": "The lifecycle configuration does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": {
              "Days": 7
            },
            "Filter": {
              "Prefix": ""
            },
            "ID": "wholebucket",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-lifecycle-exc-2": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchLifecycleConfiguration",
          "Message": "The lifecycle configuration does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_lifecycle_configuration_on_bucket_deletion": {
    "recorded-date": "25-08-2022, 17:12:56",
    "recorded-content": {
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": {
              "Days": 7
            },
            "Filter": {
              "Prefix": ""
            },
            "ID": "wholebucket",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-lifecycle-exc": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchLifecycleConfiguration",
          "Message": "The lifecycle configuration does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_range_header_body_length": {
    "recorded-date": "25-08-2022, 18:02:59",
    "recorded-content": {
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentLength": 1024,
        "ContentRange": "bytes 0-1023/2048",
        "ContentType": "binary/octet-stream",
        "ETag": "\"7be4229686e4047603196e6edb58692d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 206
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_object_tagging": {
    "recorded-date": "26-08-2022, 01:29:53",
    "recorded-content": {
      "get-obj": {
        "AcceptRanges": "bytes",
        "Body": "something",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-after-tag-deletion": {
        "AcceptRanges": "bytes",
        "Body": "something",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3Cors::test_cors_with_allowed_origins": {
    "recorded-date": "26-08-2022, 15:10:47",
    "recorded-content": {
      "raw-response-headers": {
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "https://localhost:4200",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "0",
        "Date": "<date>",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      },
      "raw-response-headers-2": {
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "https://localhost:4200",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "0",
        "Date": "<date>",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      },
      "raw-response-headers-3": {
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "https://localhost:4200",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "0",
        "Date": "<date>",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      },
      "raw-response-headers-4": {
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "https://localhost:4201",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "0",
        "Date": "<date>",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3Cors::test_cors_configurations": {
    "recorded-date": "26-08-2022, 16:34:52",
    "recorded-content": {
      "raw-response-headers": {
        "Accept-Ranges": "bytes",
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "http://localhost:4566",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "16",
        "Content-Type": "binary/octet-stream",
        "Date": "<date>",
        "ETag": "\"aa4315fde513528bf6580028d3341f0b\"",
        "Last-Modified": "<date>",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      },
      "raw-response-headers-2": {
        "Accept-Ranges": "bytes",
        "Content-Length": "16",
        "Content-Type": "binary/octet-stream",
        "Date": "<date>",
        "ETag": "\"aa4315fde513528bf6580028d3341f0b\"",
        "Last-Modified": "<date>",
        "Server": "<server>",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_precondition_failed_error": {
    "recorded-date": "26-08-2022, 17:06:05",
    "recorded-content": {
      "get-object-if-match": {
        "Error": {
          "Code": "PreconditionFailed",
          "Condition": "If-Match",
          "Message": "At least one of the pre-conditions you specified did not hold"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 412
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_non_existing_keys_in_non_existing_bucket": {
    "recorded-date": "26-08-2022, 15:41:56",
    "recorded-content": {
      "error-non-existent-bucket": {
        "Error": {
          "BucketName": "non-existent-bucket",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_request_payer": {
    "recorded-date": "26-08-2022, 15:48:13",
    "recorded-content": {
      "put-bucket-request-payment": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-request-payment": {
        "Payer": "Requester",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_bucket_exists": {
    "recorded-date": "26-08-2022, 15:53:56",
    "recorded-content": {
      "get-bucket-cors": {
        "CORSRules": [
          {
            "AllowedMethods": [
              "GET",
              "POST",
              "PUT",
              "DELETE"
            ],
            "AllowedOrigins": [
              "localhost"
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-not-exists": {
        "Error": {
          "BucketName": "bucket-not-exists",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_uppercase_key_names": {
    "recorded-date": "26-08-2022, 16:13:42",
    "recorded-content": {
      "response": {
        "AcceptRanges": "bytes",
        "Body": "something",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "wrong-case-key": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "camelcasekey",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_non_existing_keys": {
    "recorded-date": "29-08-2022, 10:23:50",
    "recorded-content": {
      "deleted-resp": {
        "Deleted": [
          {
            "Key": "dummy1"
          },
          {
            "Key": "dummy2"
          },
          {
            "Key": "test-key-nonexistent"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_copy_md5": {
    "recorded-date": "29-08-2022, 12:07:36",
    "recorded-content": {
      "copy-obj": {
        "CopyObjectResult": {
          "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
          "LastModified": "datetime"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_invalid_content_md5": {
    "recorded-date": "29-08-2022, 12:15:05",
    "recorded-content": {
      "md5-error-0": {
        "Error": {
          "Code": "InvalidDigest",
          "Content-MD5": "__invalid__",
          "Message": "The Content-MD5 you specified was invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "md5-error-1": {
        "Error": {
          "Code": "InvalidDigest",
          "Content-MD5": "000",
          "Message": "The Content-MD5 you specified was invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "md5-error-2": {
        "Error": {
          "Code": "InvalidDigest",
          "Content-MD5": "not base64 encoded checksum",
          "Message": "The Content-MD5 you specified was invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "md5-error-3": {
        "Error": {
          "Code": "InvalidDigest",
          "Content-MD5": "MTIz",
          "Message": "The Content-MD5 you specified was invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_upload_download_gzip": {
    "recorded-date": "29-08-2022, 12:18:22",
    "recorded-content": {
      "put-object": {
        "ETag": "\"f84006d978dfac9da356af8c41b83150\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentEncoding": "gzip",
        "ContentLength": 41,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f84006d978dfac9da356af8c41b83150\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_multipart_copy_object_etag": {
    "recorded-date": "29-08-2022, 12:32:37",
    "recorded-content": {
      "multipart-upload": {
        "Bucket": "<bucket:1>",
        "ETag": "\"b972025bc34adf8d76d6d51e93c035cc-1\"",
        "Key": "test.file",
        "Location": "<location:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object": {
        "CopyObjectResult": {
          "ETag": "\"eee506dd7ada7ded524c77e359a0e7c6\"",
          "LastModified": "datetime"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_set_external_hostname": {
    "recorded-date": "29-08-2022, 15:12:54",
    "recorded-content": {
      "multipart-upload": {
        "Bucket": "<bucket:1>",
        "ETag": "\"b972025bc34adf8d76d6d51e93c035cc-1\"",
        "Key": "test.file",
        "Location": "<location:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "Bucket": "<bucket:1>",
        "ETag": "\"b972025bc34adf8d76d6d51e93c035cc-1\"",
        "Key": "test.file",
        "Location": "<location:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_get_deep_archive_object_restore": {
    "recorded-date": "02-09-2022, 12:16:13",
    "recorded-content": {
      "get_object_invalid_state": {
        "Error": {
          "Code": "InvalidObjectState",
          "Message": "The operation is not valid for the object's storage class",
          "StorageClass": "DEEP_ARCHIVE"
        },
        "StorageClass": "DEEP_ARCHIVE",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "restore_object": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 202
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_list_objects_empty_marker": {
    "recorded-date": "02-09-2022, 13:13:55",
    "recorded-content": {
      "list-objects": {
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_put_more_than_1000_items": {
    "recorded-date": "02-09-2022, 14:49:04",
    "recorded-content": {
      "get_object-1009": {
        "AcceptRanges": "bytes",
        "Body": "test-1009",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"7d2a1f93cc456846faba49b73eefc5b2\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_object-0": {
        "AcceptRanges": "bytes",
        "Body": "test-0",
        "ContentLength": 6,
        "ContentType": "binary/octet-stream",
        "ETag": "\"86639701cdcc5b39438a5f009bd74cb1\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects": {
        "Contents": "<content>",
        "Delimiter": "/",
        "EncodingType": "url",
        "IsTruncated": true,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "NextMarker": "test-key-99",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-next_marker": {
        "Contents": [
          {
            "ETag": "\"469aa468e8b397232fe0754ba11ba9f3\"",
            "Key": "test-key-990",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"aa50de431ca7e15fa7f769df3615bac1\"",
            "Key": "test-key-991",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"07844c1200a3eeb13dd3885d336c300e\"",
            "Key": "test-key-992",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"43a56bbd65ff5cfa706996026b11f627\"",
            "Key": "test-key-993",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"05e2fb7108663f7398dfeb41a048bf32\"",
            "Key": "test-key-994",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"ca06c6ef5b6317771502c23ae4e941d7\"",
            "Key": "test-key-995",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"bd6e51d9b1c43aa30906314e5ed9d857\"",
            "Key": "test-key-996",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"3fda8ced7c145b9820e3d95d6458cbb9\"",
            "Key": "test-key-997",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"b3ed4e42f8e008bfeb879a9b0aeeff23\"",
            "Key": "test-key-998",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"880a4a8e1643dc0014d8f0fc297327f4\"",
            "Key": "test-key-999",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "test-key-99",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_upload_big_file": {
    "recorded-date": "02-09-2022, 15:06:55",
    "recorded-content": {
      "put_object_key1": {
        "ETag": "\"a649c4228b2b9e8bfca3510ed9d9a764\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put_object_key2": {
        "ETag": "\"7095bae098259e0dda4b7acc624de4e2\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_key1": {
        "AcceptRanges": "bytes",
        "ContentLength": 10000000,
        "ContentType": "binary/octet-stream",
        "ETag": "\"7095bae098259e0dda4b7acc624de4e2\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_key2": {
        "AcceptRanges": "bytes",
        "ContentLength": 10000000,
        "ContentType": "binary/octet-stream",
        "ETag": "\"7095bae098259e0dda4b7acc624de4e2\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_get_bucket_versioning_order": {
    "recorded-date": "02-09-2022, 15:21:13",
    "recorded-content": {
      "list_object_versions_before": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put_bucket_versioning": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_versioning": {
        "Status": "Enabled",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_object_versions": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"841a2d689ad86bd1611447453c22c6fc\"",
            "IsLatest": true,
            "Key": "test",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 4,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          },
          {
            "ETag": "\"841a2d689ad86bd1611447453c22c6fc\"",
            "IsLatest": false,
            "Key": "test",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 4,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          },
          {
            "ETag": "\"841a2d689ad86bd1611447453c22c6fc\"",
            "IsLatest": true,
            "Key": "test2",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 4,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_etag_on_get_object_call": {
    "recorded-date": "02-09-2022, 15:32:43",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... ",
        "ContentLength": 960,
        "ContentType": "binary/octet-stream",
        "ETag": "\"c289c6e309be295fe68af649d1e6c6ec\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_object_range": {
        "AcceptRanges": "bytes",
        "Body": "Lorem ipsum dolor",
        "ContentLength": 17,
        "ContentRange": "bytes 0-16/960",
        "ContentType": "binary/octet-stream",
        "ETag": "\"c289c6e309be295fe68af649d1e6c6ec\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 206
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_delete_object_with_version_id": {
    "recorded-date": "02-09-2022, 15:49:00",
    "recorded-content": {
      "get_bucket_versioning": {
        "Status": "Enabled",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete_objects": {
        "Deleted": [
          {
            "Key": "aws/s3/testkey1.txt",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_object_versions_after_delete": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"c289c6e309be295fe68af649d1e6c6ec\"",
            "IsLatest": true,
            "Key": "aws/s3/testkey2.txt",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 960,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_versioning_suspended": {
        "Status": "Suspended",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_lambda_integration": {
    "recorded-date": "05-09-2022, 12:40:12",
    "recorded-content": {
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLength": 0,
        "ContentType": "binary/octet-stream",
        "ETag": "\"d41d8cd98f00b204e9800998ecf8427e\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_get_object_no_such_bucket": {
    "recorded-date": "13-09-2022, 15:36:32",
    "recorded-content": {
      "expected_error": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_bucket_no_such_bucket": {
    "recorded-date": "05-09-2022, 13:49:41",
    "recorded-content": {
      "expected_error": {
        "Error": {
          "BucketName": "does-not-exist-1581ad5c",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_get_bucket_notification_configuration_no_such_bucket": {
    "recorded-date": "13-09-2022, 15:34:44",
    "recorded-content": {
      "expected_error": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_batch_delete_objects_using_requests": {
    "recorded-date": "05-09-2022, 16:45:46",
    "recorded-content": {
      "multi-delete-with-requests": {
        "DeleteResult": {
          "Deleted": {
            "Key": "key-created-by-anonymous"
          },
          "Error": {
            "Code": "AccessDenied",
            "Key": "key-created-by-owner",
            "Message": "Access Denied"
          }
        }
      },
      "list-remaining-objects": {
        "Contents": [
          {
            "ETag": "\"ba29429d259d94823554cb60b325d8fe\"",
            "Key": "key-created-by-owner",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 18,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_batch_delete_public_objects_using_requests": {
    "recorded-date": "05-09-2022, 16:53:55",
    "recorded-content": {
      "multi-delete-with-requests": {
        "DeleteResult": {
          "Deleted": [
            {
              "Key": "key-created-by-anonymous-1"
            },
            {
              "Key": "key-created-by-anonymous-2"
            }
          ]
        }
      },
      "list-remaining-objects": {
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_object_checksum[CRC32]": {
    "recorded-date": "12-09-2022, 19:48:18",
    "recorded-content": {
      "put-wrong-checksum": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Value for x-amz-checksum-crc32 header is invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-generated": {
        "ChecksumCRC32": "cZWHwQ==",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-autogenerated": {
        "ChecksumCRC32": "cZWHwQ==",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_object_checksum[CRC32C]": {
    "recorded-date": "12-09-2022, 19:48:20",
    "recorded-content": {
      "put-wrong-checksum": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Value for x-amz-checksum-crc32c header is invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-generated": {
        "ChecksumCRC32C": "Pf4upw==",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-autogenerated": {
        "ChecksumCRC32C": "Pf4upw==",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_object_checksum[SHA1]": {
    "recorded-date": "12-09-2022, 19:48:23",
    "recorded-content": {
      "put-wrong-checksum": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Value for x-amz-checksum-sha1 header is invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-generated": {
        "ChecksumSHA1": "B++3uSfJMSHWToQMQ1g6lIJY5Eo=",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-autogenerated": {
        "ChecksumSHA1": "B++3uSfJMSHWToQMQ1g6lIJY5Eo=",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_object_checksum[SHA256]": {
    "recorded-date": "12-09-2022, 19:48:27",
    "recorded-content": {
      "put-wrong-checksum": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Value for x-amz-checksum-sha256 header is invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-generated": {
        "ChecksumSHA256": "2l26x0trnT0r2AvakoFk2MB7eKVKzYESLMxSAKAzoik=",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-autogenerated": {
        "ChecksumSHA256": "2l26x0trnT0r2AvakoFk2MB7eKVKzYESLMxSAKAzoik=",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_uppercase_bucket_name": {
    "recorded-date": "09-09-2022, 13:18:19",
    "recorded-content": {
      "uppercase-bucket": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "InvalidBucketName",
          "Message": "The specified bucket is not valid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_create_bucket_with_existing_name": {
    "recorded-date": "09-09-2022, 16:06:06",
    "recorded-content": {
      "create-bucket-us-west-1": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "BucketAlreadyOwnedByYou",
          "Message": "Your previous request to create the named bucket succeeded and you already own it."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      },
      "create-bucket-us-east-2": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "BucketAlreadyOwnedByYou",
          "Message": "Your previous request to create the named bucket succeeded and you already own it."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_list_objects_with_prefix[/]": {
    "recorded-date": "09-09-2022, 19:35:53",
    "recorded-content": {
      "list-objects": {
        "CommonPrefixes": [
          {
            "Prefix": "test/foo/"
          }
        ],
        "Delimiter": "/",
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1,
        "Name": "<bucket-name:1>",
        "Prefix": "test/",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_list_objects_with_prefix[%2F]": {
    "recorded-date": "09-09-2022, 19:35:56",
    "recorded-content": {
      "list-objects": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test/foo/bar/123",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "Delimiter": "%252F",
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1,
        "Name": "<bucket-name:1>",
        "Prefix": "test/",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_bucket_lifecycle_configuration_object_expiry": {
    "recorded-date": "09-09-2022, 22:19:34",
    "recorded-content": {
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": "<expiration>",
            "Filter": {
              "Prefix": ""
            },
            "ID": "wholebucket",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-expiry": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-expiry": {
        "AcceptRanges": "bytes",
        "Body": "test",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_and_get_bucket_policy": {
    "recorded-date": "09-09-2022, 22:39:34",
    "recorded-content": {
      "put-bucket-policy": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "get-bucket-policy": {
        "Policy": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": "s3:GetObject",
              "Resource": "<resource:1>"
            }
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_invalid_range_error": {
    "recorded-date": "13-09-2022, 16:01:02",
    "recorded-content": {
      "exc": {
        "Error": {
          "ActualObjectSize": "8",
          "Code": "InvalidRange",
          "Message": "The requested range is not satisfiable",
          "RangeRequested": "bytes=1024-4096"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 416
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_range_key_not_exists": {
    "recorded-date": "13-09-2022, 16:05:49",
    "recorded-content": {
      "exc": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "my-key",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  }
}
