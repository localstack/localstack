{
  "tests/integration/s3/test_s3.py::TestS3::test_region_header_exists": {
    "recorded-date": "21-09-2022, 13:34:35",
    "recorded-content": {
      "head_bucket": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_objects_v2": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 0,
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_bucket_with_content": {
    "recorded-date": "21-09-2022, 13:34:41",
    "recorded-content": {
      "list-objects": {
        "Contents": [
          {
            "ETag": "\"86639701cdcc5b39438a5f009bd74cb1\"",
            "Key": "test-key-0",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"70a37754eb5a2e7db8cd887aaf11cda7\"",
            "Key": "test-key-1",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"282ff2cb3d9dadeb831bb3ba0128f2f4\"",
            "Key": "test-key-2",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"2b61ddda48445374b35a927b6ae2cd6d\"",
            "Key": "test-key-3",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"f533f549a84b9d7a381a7ed55c4f46b9\"",
            "Key": "test-key-4",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0efcf24eb64fa875c294d05703096b0d\"",
            "Key": "test-key-5",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"7b1b88bb19a8c5a6a1d53eaa75108b80\"",
            "Key": "test-key-6",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"698fbf838fdda3065e058190398514f8\"",
            "Key": "test-key-7",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"96c2178517e273d4001ab7f68fdde969\"",
            "Key": "test-key-8",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"da51d6e22a1ae095154e69b07eef731b\"",
            "Key": "test-key-9",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 100,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-buckets": {
        "Buckets": [
          {
            "CreationDate": "datetime",
            "Name": "<bucket-name:2>"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name>",
          "ID": "<owner-id>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_and_get_object_with_utf8_key": {
    "recorded-date": "21-09-2022, 13:34:43",
    "recorded-content": {
      "put-object": {
        "ETag": "\"e99a18c428cb38d5f260853678922e03\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentLength": 6,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e99a18c428cb38d5f260853678922e03\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_metadata_header_character_decoding": {
    "recorded-date": "21-09-2022, 13:34:49",
    "recorded-content": {
      "head-object": {
        "__meta_2": "bar",
        "test_meta_1": "foo"
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_upload_file_multipart": {
    "recorded-date": "21-09-2022, 13:34:53",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentLength": 6144,
        "ContentType": "binary/octet-stream",
        "ETag": "\"8eabe9d6b43316e840b079170916c079-1\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_list_objects_with_prefix[/]": {
    "recorded-date": "21-09-2022, 13:34:55",
    "recorded-content": {
      "list-objects": {
        "CommonPrefixes": [
          {
            "Prefix": "test/foo/"
          }
        ],
        "Delimiter": "/",
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1,
        "Name": "<bucket-name:1>",
        "Prefix": "test/",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_list_objects_with_prefix[%2F]": {
    "recorded-date": "21-09-2022, 13:34:58",
    "recorded-content": {
      "list-objects": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test/foo/bar/123",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "Delimiter": "%252F",
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1,
        "Name": "<bucket-name:1>",
        "Prefix": "test/",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_get_object_no_such_bucket": {
    "recorded-date": "21-09-2022, 13:34:59",
    "recorded-content": {
      "expected_error": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_bucket_no_such_bucket": {
    "recorded-date": "21-09-2022, 13:35:00",
    "recorded-content": {
      "expected_error": {
        "Error": {
          "BucketName": "does-not-exist-7a2b1426",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_get_bucket_notification_configuration_no_such_bucket": {
    "recorded-date": "21-09-2022, 13:35:00",
    "recorded-content": {
      "expected_error": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_get_object_attributes": {
    "recorded-date": "06-10-2022, 19:45:18",
    "recorded-content": {
      "object-attrs": {
        "ETag": "e92499db864217242396e8ef766079a9",
        "LastModified": "datetime",
        "ObjectSize": 7,
        "StorageClass": "STANDARD",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs-multiparts-1-part": {
        "ETag": "e747540af6911dbc890f8d3e0b48549b-1",
        "LastModified": "datetime",
        "ObjectParts": {
          "TotalPartsCount": 1
        },
        "ObjectSize": 65,
        "StorageClass": "STANDARD",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs-multiparts-2-parts": {
        "ETag": "5389a7fb9c7e4b97c90255e2ee5e57f7-2",
        "LastModified": "datetime",
        "ObjectParts": {
          "TotalPartsCount": 2
        },
        "ObjectSize": 5242965,
        "StorageClass": "STANDARD",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_and_get_object_with_hash_prefix": {
    "recorded-date": "21-09-2022, 13:35:04",
    "recorded-content": {
      "put-object": {
        "ETag": "\"39d0d586a701e199389d954f2d592720\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"39d0d586a701e199389d954f2d592720\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_invalid_range_error": {
    "recorded-date": "21-09-2022, 13:35:07",
    "recorded-content": {
      "exc": {
        "Error": {
          "ActualObjectSize": "8",
          "Code": "InvalidRange",
          "Message": "The requested range is not satisfiable",
          "RangeRequested": "bytes=1024-4096"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 416
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_range_key_not_exists": {
    "recorded-date": "21-09-2022, 13:35:09",
    "recorded-content": {
      "exc": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "my-key",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_and_get_bucket_policy": {
    "recorded-date": "21-09-2022, 13:35:13",
    "recorded-content": {
      "put-bucket-policy": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "get-bucket-policy": {
        "Policy": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": "s3:GetObject",
              "Resource": "<resource:1>"
            }
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_object_tagging_empty_list": {
    "recorded-date": "21-09-2022, 13:35:15",
    "recorded-content": {
      "created-object-tags": {
        "TagSet": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "updated-object-tags": {
        "TagSet": [
          {
            "Key": "tag1",
            "Value": "tag1"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "deleted-object-tags": {
        "TagSet": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_get_object_after_deleted_in_versioned_bucket": {
    "recorded-date": "06-10-2022, 22:35:23",
    "recorded-content": {
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "abcdefgh",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e8dc4081b13434b45189a720b77b6818\"",
        "LastModified": "datetime",
        "Metadata": {},
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-after-delete": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "my-key",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_object_checksum[CRC32]": {
    "recorded-date": "21-09-2022, 13:35:21",
    "recorded-content": {
      "put-wrong-checksum": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Value for x-amz-checksum-crc32 header is invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-generated": {
        "ChecksumCRC32": "cZWHwQ==",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-autogenerated": {
        "ChecksumCRC32": "cZWHwQ==",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_object_checksum[CRC32C]": {
    "recorded-date": "21-09-2022, 13:35:24",
    "recorded-content": {
      "put-wrong-checksum": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Value for x-amz-checksum-crc32c header is invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-generated": {
        "ChecksumCRC32C": "Pf4upw==",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-autogenerated": {
        "ChecksumCRC32C": "Pf4upw==",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_object_checksum[SHA1]": {
    "recorded-date": "21-09-2022, 13:35:27",
    "recorded-content": {
      "put-wrong-checksum": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Value for x-amz-checksum-sha1 header is invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-generated": {
        "ChecksumSHA1": "B++3uSfJMSHWToQMQ1g6lIJY5Eo=",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-autogenerated": {
        "ChecksumSHA1": "B++3uSfJMSHWToQMQ1g6lIJY5Eo=",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_object_checksum[SHA256]": {
    "recorded-date": "21-09-2022, 13:35:29",
    "recorded-content": {
      "put-wrong-checksum": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Value for x-amz-checksum-sha256 header is invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-generated": {
        "ChecksumSHA256": "2l26x0trnT0r2AvakoFk2MB7eKVKzYESLMxSAKAzoik=",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-autogenerated": {
        "ChecksumSHA256": "2l26x0trnT0r2AvakoFk2MB7eKVKzYESLMxSAKAzoik=",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_copy_metadata_replace": {
    "recorded-date": "21-09-2022, 13:35:32",
    "recorded-content": {
      "put_object": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy_object": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_copy": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/javascript",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "another-key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_copy_content_type_and_metadata": {
    "recorded-date": "21-09-2022, 13:35:36",
    "recorded-content": {
      "put_object": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy_object": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_copy": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy_object_second": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_second_copy": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_multipart_upload_acls": {
    "recorded-date": "21-09-2022, 13:35:40",
    "recorded-content": {
      "bucket-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "READ"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "permission-acl-key0": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "permission-acl-key1": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "permission-acl-key2": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "READ"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "WRITE"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_object_expiry": {
    "recorded-date": "21-09-2022, 13:35:46",
    "recorded-content": {
      "head-object-expired": {
        "AcceptRanges": "bytes",
        "ContentLength": 3,
        "ContentType": "binary/octet-stream",
        "ETag": "\"acbd18db4cc2f85cedef654fccc4a4d8\"",
        "Expires": "datetime",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-not-yet-expired": {
        "AcceptRanges": "bytes",
        "Body": "foo",
        "ContentLength": 3,
        "ContentType": "binary/octet-stream",
        "ETag": "\"acbd18db4cc2f85cedef654fccc4a4d8\"",
        "Expires": "datetime",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_upload_file_with_xml_preamble": {
    "recorded-date": "21-09-2022, 13:35:48",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><test/>",
        "ContentLength": 45,
        "ContentType": "binary/octet-stream",
        "ETag": "\"8a793423f1e69103a7056b99e4ad6c0b\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_bucket_availability": {
    "recorded-date": "21-09-2022, 13:35:50",
    "recorded-content": {
      "bucket-lifecycle": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "bucket-replication": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_different_location_constraint": {
    "recorded-date": "21-09-2022, 13:35:57",
    "recorded-content": {
      "get_bucket_location_bucket_1": {
        "LocationConstraint": null,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_location_bucket_2": {
        "LocationConstraint": "us-east-2",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create_bucket_constraint_exc": {
        "Error": {
          "Code": "IllegalLocationConstraintException",
          "Message": "The unspecified location constraint is incompatible for the region specific endpoint this request was sent to."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create_bucket_bucket_3": {
        "Location": "<location>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_location_bucket_3": {
        "LocationConstraint": "us-east-2",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_get_object_with_anon_credentials": {
    "recorded-date": "21-09-2022, 13:36:04",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "body data",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"53ebc26c3ff5decfe9ffc7bdbaa02459\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_putobject_with_multiple_keys": {
    "recorded-date": "21-09-2022, 13:36:06",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "test",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_bucket_lifecycle_configuration": {
    "recorded-date": "21-09-2022, 13:36:09",
    "recorded-content": {
      "get-bucket-lifecycle-exc-1": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchLifecycleConfiguration",
          "Message": "The lifecycle configuration does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "delete-bucket-lifecycle-no-bucket": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": {
              "Days": 7
            },
            "Filter": {
              "Prefix": ""
            },
            "ID": "wholebucket",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-lifecycle-exc-2": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchLifecycleConfiguration",
          "Message": "The lifecycle configuration does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_lifecycle_configuration_on_bucket_deletion": {
    "recorded-date": "21-09-2022, 13:36:12",
    "recorded-content": {
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": {
              "Days": 7
            },
            "Filter": {
              "Prefix": ""
            },
            "ID": "wholebucket",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-lifecycle-exc": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchLifecycleConfiguration",
          "Message": "The lifecycle configuration does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_bucket_lifecycle_configuration_object_expiry": {
    "recorded-date": "21-09-2022, 13:36:14",
    "recorded-content": {
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": "<expiration>",
            "Filter": {
              "Prefix": ""
            },
            "ID": "wholebucket",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-expiry": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-expiry": {
        "AcceptRanges": "bytes",
        "Body": "test",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_range_header_body_length": {
    "recorded-date": "21-09-2022, 16:11:28",
    "recorded-content": {
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentLength": 1024,
        "ContentRange": "bytes 0-1023/2048",
        "ContentType": "binary/octet-stream",
        "ETag": "<e-tag:1>",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 206
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_object_tagging": {
    "recorded-date": "21-09-2022, 13:36:22",
    "recorded-content": {
      "get-obj": {
        "AcceptRanges": "bytes",
        "Body": "something",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-after-tag-deletion": {
        "AcceptRanges": "bytes",
        "Body": "something",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_non_existing_keys": {
    "recorded-date": "21-09-2022, 13:36:25",
    "recorded-content": {
      "deleted-resp": {
        "Deleted": [
          {
            "Key": "dummy1"
          },
          {
            "Key": "dummy2"
          },
          {
            "Key": "test-key-nonexistent"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_non_existing_keys_in_non_existing_bucket": {
    "recorded-date": "21-09-2022, 13:36:26",
    "recorded-content": {
      "error-non-existent-bucket": {
        "Error": {
          "BucketName": "non-existent-bucket",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_request_payer": {
    "recorded-date": "21-09-2022, 13:36:27",
    "recorded-content": {
      "put-bucket-request-payment": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-request-payment": {
        "Payer": "Requester",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_request_payer_exceptions": {
    "recorded-date": "21-09-2022, 13:36:28",
    "recorded-content": {
      "wrong-payer-type": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_bucket_exists": {
    "recorded-date": "21-09-2022, 13:36:31",
    "recorded-content": {
      "get-bucket-cors": {
        "CORSRules": [
          {
            "AllowedMethods": [
              "GET",
              "POST",
              "PUT",
              "DELETE"
            ],
            "AllowedOrigins": [
              "localhost"
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-not-exists": {
        "Error": {
          "BucketName": "bucket-not-exists",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_uppercase_key_names": {
    "recorded-date": "21-09-2022, 13:36:33",
    "recorded-content": {
      "response": {
        "AcceptRanges": "bytes",
        "Body": "something",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "wrong-case-key": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "camelcasekey",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_precondition_failed_error": {
    "recorded-date": "21-09-2022, 13:37:08",
    "recorded-content": {
      "get-object-if-match": {
        "Error": {
          "Code": "PreconditionFailed",
          "Condition": "If-Match",
          "Message": "At least one of the pre-conditions you specified did not hold"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 412
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_invalid_content_md5": {
    "recorded-date": "21-09-2022, 13:37:13",
    "recorded-content": {
      "md5-error-0": {
        "Error": {
          "Code": "InvalidDigest",
          "Content-MD5": "__invalid__",
          "Message": "The Content-MD5 you specified was invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "md5-error-1": {
        "Error": {
          "Code": "InvalidDigest",
          "Content-MD5": "000",
          "Message": "The Content-MD5 you specified was invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "md5-error-2": {
        "Error": {
          "Code": "InvalidDigest",
          "Content-MD5": "not base64 encoded checksum",
          "Message": "The Content-MD5 you specified was invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "md5-error-3": {
        "Error": {
          "Code": "InvalidDigest",
          "Content-MD5": "MTIz",
          "Message": "The Content-MD5 you specified was invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_upload_download_gzip": {
    "recorded-date": "21-09-2022, 13:37:15",
    "recorded-content": {
      "put-object": {
        "ETag": "\"8b168421e12cb36daa65760e4d8660bc\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentEncoding": "gzip",
        "ContentLength": 41,
        "ContentType": "binary/octet-stream",
        "ETag": "\"8b168421e12cb36daa65760e4d8660bc\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_multipart_copy_object_etag": {
    "recorded-date": "21-09-2022, 13:37:17",
    "recorded-content": {
      "multipart-upload": {
        "Bucket": "<bucket:1>",
        "ETag": "\"b972025bc34adf8d76d6d51e93c035cc-1\"",
        "Key": "test.file",
        "Location": "<location:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object": {
        "CopyObjectResult": {
          "ETag": "\"eee506dd7ada7ded524c77e359a0e7c6\"",
          "LastModified": "datetime"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_set_external_hostname": {
    "recorded-date": "21-09-2022, 13:37:21",
    "recorded-content": {
      "multipart-upload": {
        "Bucket": "<bucket:1>",
        "ETag": "\"b972025bc34adf8d76d6d51e93c035cc-1\"",
        "Key": "test.file",
        "Location": "<location:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "Bucket": "<bucket:1>",
        "ETag": "\"b972025bc34adf8d76d6d51e93c035cc-1\"",
        "Key": "test.file",
        "Location": "<location:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_lambda_integration": {
    "recorded-date": "21-09-2022, 13:38:03",
    "recorded-content": {
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLength": 0,
        "ContentType": "binary/octet-stream",
        "ETag": "\"d41d8cd98f00b204e9800998ecf8427e\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_uppercase_bucket_name": {
    "recorded-date": "21-09-2022, 13:38:06",
    "recorded-content": {
      "uppercase-bucket": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "InvalidBucketName",
          "Message": "The specified bucket is not valid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_create_bucket_with_existing_name": {
    "recorded-date": "21-09-2022, 13:38:08",
    "recorded-content": {
      "create-bucket-us-west-1": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "BucketAlreadyOwnedByYou",
          "Message": "Your previous request to create the named bucket succeeded and you already own it."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      },
      "create-bucket-us-east-2": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "BucketAlreadyOwnedByYou",
          "Message": "Your previous request to create the named bucket succeeded and you already own it."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_bucket_does_not_exist": {
    "recorded-date": "21-09-2022, 13:38:20",
    "recorded-content": {
      "list_object": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "list_object_vhost": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_create_bucket_head_bucket": {
    "recorded-date": "21-09-2022, 13:38:23",
    "recorded-content": {
      "create_bucket": {
        "Location": "/<bucket-name:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create_bucket_location_constraint": {
        "Location": "http://<bucket-name:2>.host/",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_bucket": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_bucket_filtered_header": {
        "content-type": "application/xml",
        "x-amz-access-point-alias": "false",
        "x-amz-bucket-region": "<region>",
        "x-amz-id-2": "x-amz-id-2",
        "x-amz-request-id": "x-amz-request-id"
      },
      "head_bucket_2": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_bucket_2_filtered_header": {
        "content-type": "application/xml",
        "x-amz-access-point-alias": "false",
        "x-amz-bucket-region": "us-west-1",
        "x-amz-id-2": "x-amz-id-2",
        "x-amz-request-id": "x-amz-request-id"
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_bucket_name_with_dots": {
    "recorded-date": "21-09-2022, 13:38:25",
    "recorded-content": {
      "list_objects": {
        "Contents": [
          {
            "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
            "Key": "my-content",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 9,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_objects_headers": {
        "content-type": "application/xml",
        "date": "date",
        "server": "AmazonS3",
        "transfer-encoding": "chunked",
        "x-amz-bucket-region": "<region>",
        "x-amz-id-2": "x-amz-id-2",
        "x-amz-request-id": "x-amz-request-id"
      },
      "request_vhost_url_content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"><Name><bucket-name:1></Name><Prefix></Prefix><Marker></Marker><MaxKeys>1000</MaxKeys><IsTruncated>false</IsTruncated><Contents><Key>my-content</Key><LastModified>date</LastModified><ETag>&quot;437b930db84b8079c2dd804a71936b5f&quot;</ETag><Size>9</Size><StorageClass>STANDARD</StorageClass></Contents></ListBucketResult>",
      "request_vhost_headers": {
        "Content-Type": "application/xml",
        "Date": "date",
        "Server": "AmazonS3",
        "Transfer-Encoding": "chunked",
        "x-amz-bucket-region": "<region>",
        "x-amz-id-2": "x-amz-id-2",
        "x-amz-request-id": "x-amz-request-id"
      },
      "request_path_url_content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"><Name><bucket-name:1></Name><Prefix></Prefix><Marker></Marker><MaxKeys>1000</MaxKeys><IsTruncated>false</IsTruncated><Contents><Key>my-content</Key><LastModified>date</LastModified><ETag>&quot;437b930db84b8079c2dd804a71936b5f&quot;</ETag><Size>9</Size><StorageClass>STANDARD</StorageClass></Contents></ListBucketResult>",
      "request_path_headers": {
        "Content-Type": "application/xml",
        "Date": "date",
        "Server": "AmazonS3",
        "Transfer-Encoding": "chunked",
        "x-amz-bucket-region": "<region>",
        "x-amz-id-2": "x-amz-id-2",
        "x-amz-request-id": "x-amz-request-id"
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_put_more_than_1000_items": {
    "recorded-date": "21-09-2022, 13:43:01",
    "recorded-content": {
      "get_object-1009": {
        "AcceptRanges": "bytes",
        "Body": "test-1009",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"7d2a1f93cc456846faba49b73eefc5b2\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_object-0": {
        "AcceptRanges": "bytes",
        "Body": "test-0",
        "ContentLength": 6,
        "ContentType": "binary/octet-stream",
        "ETag": "\"86639701cdcc5b39438a5f009bd74cb1\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects": {
        "Contents": "<content>",
        "Delimiter": "/",
        "EncodingType": "url",
        "IsTruncated": true,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "NextMarker": "test-key-99",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-next_marker": {
        "Contents": [
          {
            "ETag": "\"469aa468e8b397232fe0754ba11ba9f3\"",
            "Key": "test-key-990",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"aa50de431ca7e15fa7f769df3615bac1\"",
            "Key": "test-key-991",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"07844c1200a3eeb13dd3885d336c300e\"",
            "Key": "test-key-992",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"43a56bbd65ff5cfa706996026b11f627\"",
            "Key": "test-key-993",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"05e2fb7108663f7398dfeb41a048bf32\"",
            "Key": "test-key-994",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"ca06c6ef5b6317771502c23ae4e941d7\"",
            "Key": "test-key-995",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"bd6e51d9b1c43aa30906314e5ed9d857\"",
            "Key": "test-key-996",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"3fda8ced7c145b9820e3d95d6458cbb9\"",
            "Key": "test-key-997",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"b3ed4e42f8e008bfeb879a9b0aeeff23\"",
            "Key": "test-key-998",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"880a4a8e1643dc0014d8f0fc297327f4\"",
            "Key": "test-key-999",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "test-key-99",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_list_objects_empty_marker": {
    "recorded-date": "21-09-2022, 13:43:06",
    "recorded-content": {
      "list-objects": {
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_upload_big_file": {
    "recorded-date": "21-09-2022, 13:43:19",
    "recorded-content": {
      "put_object_key1": {
        "ETag": "\"a649c4228b2b9e8bfca3510ed9d9a764\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put_object_key2": {
        "ETag": "\"7095bae098259e0dda4b7acc624de4e2\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_key1": {
        "AcceptRanges": "bytes",
        "ContentLength": 10000000,
        "ContentType": "binary/octet-stream",
        "ETag": "\"7095bae098259e0dda4b7acc624de4e2\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_key2": {
        "AcceptRanges": "bytes",
        "ContentLength": 10000000,
        "ContentType": "binary/octet-stream",
        "ETag": "\"7095bae098259e0dda4b7acc624de4e2\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_get_bucket_versioning_order": {
    "recorded-date": "21-09-2022, 13:43:23",
    "recorded-content": {
      "list_object_versions_before": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put_bucket_versioning": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_versioning": {
        "Status": "Enabled",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_object_versions": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"841a2d689ad86bd1611447453c22c6fc\"",
            "IsLatest": true,
            "Key": "test",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 4,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          },
          {
            "ETag": "\"841a2d689ad86bd1611447453c22c6fc\"",
            "IsLatest": false,
            "Key": "test",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 4,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          },
          {
            "ETag": "\"841a2d689ad86bd1611447453c22c6fc\"",
            "IsLatest": true,
            "Key": "test2",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 4,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_etag_on_get_object_call": {
    "recorded-date": "21-09-2022, 13:43:27",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... ",
        "ContentLength": 960,
        "ContentType": "binary/octet-stream",
        "ETag": "\"c289c6e309be295fe68af649d1e6c6ec\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_object_range": {
        "AcceptRanges": "bytes",
        "Body": "Lorem ipsum dolor",
        "ContentLength": 17,
        "ContentRange": "bytes 0-16/960",
        "ContentType": "binary/octet-stream",
        "ETag": "\"c289c6e309be295fe68af649d1e6c6ec\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 206
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_delete_object_with_version_id": {
    "recorded-date": "21-09-2022, 13:43:31",
    "recorded-content": {
      "get_bucket_versioning": {
        "Status": "Enabled",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete_objects": {
        "Deleted": [
          {
            "Key": "aws/s3/testkey1.txt",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_object_versions_after_delete": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"c289c6e309be295fe68af649d1e6c6ec\"",
            "IsLatest": true,
            "Key": "aws/s3/testkey2.txt",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 960,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_versioning_suspended": {
        "Status": "Suspended",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_batch_delete_objects_using_requests_with_acl": {
    "recorded-date": "21-09-2022, 13:43:35",
    "recorded-content": {
      "multi-delete-with-requests": {
        "DeleteResult": {
          "Deleted": {
            "Key": "key-created-by-anonymous"
          },
          "Error": {
            "Code": "AccessDenied",
            "Key": "key-created-by-owner",
            "Message": "Access Denied"
          }
        }
      },
      "list-remaining-objects": {
        "Contents": [
          {
            "ETag": "\"ba29429d259d94823554cb60b325d8fe\"",
            "Key": "key-created-by-owner",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 18,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_batch_delete_public_objects_using_requests": {
    "recorded-date": "21-09-2022, 13:43:39",
    "recorded-content": {
      "multi-delete-with-requests": {
        "DeleteResult": {
          "Deleted": [
            {
              "Key": "key-created-by-anonymous-1"
            },
            {
              "Key": "key-created-by-anonymous-2"
            }
          ]
        }
      },
      "list-remaining-objects": {
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_batch_delete_objects": {
    "recorded-date": "21-09-2022, 13:43:42",
    "recorded-content": {
      "batch-delete": {
        "Deleted": [
          {
            "Key": "<key:1>"
          },
          {
            "Key": "<key:2>"
          },
          {
            "Key": "<key:3>"
          },
          {
            "Key": "<key:4>"
          },
          {
            "Key": "<key:5>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-remaining-objects": {
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_put_object": {
    "recorded-date": "21-09-2022, 13:43:45",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_put_url_metadata": {
    "recorded-date": "21-09-2022, 13:44:01",
    "recorded-content": {
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLength": 11,
        "ContentType": "binary/octet-stream",
        "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
        "LastModified": "datetime",
        "Metadata": {
          "foo": "bar"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_copy_md5": {
    "recorded-date": "21-09-2022, 13:44:37",
    "recorded-content": {
      "copy-obj": {
        "CopyObjectResult": {
          "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
          "LastModified": "datetime"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3Cors::test_cors_with_allowed_origins": {
    "recorded-date": "21-09-2022, 13:45:31",
    "recorded-content": {
      "raw-response-headers": {
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "https://localhost:4200",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "0",
        "Date": "<date>",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      },
      "raw-response-headers-2": {
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "https://localhost:4200",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "0",
        "Date": "<date>",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      },
      "raw-response-headers-3": {
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "https://localhost:4200",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "0",
        "Date": "<date>",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      },
      "raw-response-headers-4": {
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "https://localhost:4201",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "0",
        "Date": "<date>",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3Cors::test_cors_configurations": {
    "recorded-date": "21-09-2022, 13:45:35",
    "recorded-content": {
      "raw-response-headers": {
        "Accept-Ranges": "bytes",
        "Access-Control-Allow-Credentials": "true",
        "Access-Control-Allow-Methods": "GET, PUT",
        "Access-Control-Allow-Origin": "http://localhost:4566",
        "Access-Control-Max-Age": "3000",
        "Content-Length": "16",
        "Content-Type": "binary/octet-stream",
        "Date": "<date>",
        "ETag": "\"aa4315fde513528bf6580028d3341f0b\"",
        "Last-Modified": "<date>",
        "Server": "<server>",
        "Vary": "Origin, Access-Control-Request-Headers, Access-Control-Request-Method",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      },
      "raw-response-headers-2": {
        "Accept-Ranges": "bytes",
        "Content-Length": "16",
        "Content-Type": "binary/octet-stream",
        "Date": "<date>",
        "ETag": "\"aa4315fde513528bf6580028d3341f0b\"",
        "Last-Modified": "<date>",
        "Server": "<server>",
        "x-amz-id-2": "<id>",
        "x-amz-request-id": "<request-id>"
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3DeepArchive::test_s3_get_deep_archive_object_restore": {
    "recorded-date": "21-09-2022, 13:45:42",
    "recorded-content": {
      "get_object_invalid_state": {
        "Error": {
          "Code": "InvalidObjectState",
          "Message": "The operation is not valid for the object's storage class",
          "StorageClass": "DEEP_ARCHIVE"
        },
        "StorageClass": "DEEP_ARCHIVE",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "restore_object": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 202
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_head_object_fields": {
    "recorded-date": "21-09-2022, 13:54:45",
    "recorded-content": {
      "head-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e8dc4081b13434b45189a720b77b6818\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_bucket_acl": {
    "recorded-date": "20-09-2022, 15:12:21",
    "recorded-content": {
      "get-bucket-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "READ"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-canned-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-grant-acl": {
        "Grants": [
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/s3/LogDelivery"
            },
            "Permission": "READ"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-acp-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/s3/LogDelivery"
            },
            "Permission": "WRITE"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_bucket_acl_exceptions": {
    "recorded-date": "14-09-2022, 21:40:39",
    "recorded-content": {
      "put-bucket-canned-acl": {
        "Error": {
          "ArgumentName": "x-amz-acl",
          "ArgumentValue": "fake-acl",
          "Code": "InvalidArgument",
          "Message": null
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-grant-acl-fake-uri": {
        "Error": {
          "ArgumentName": "uri",
          "ArgumentValue": "http://acs.amazonaws.com/groups/s3/FakeGroup",
          "Code": "InvalidArgument",
          "Message": "Invalid group uri"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-grant-acl-fake-key": {
        "Error": {
          "ArgumentName": "x-amz-grant-write",
          "ArgumentValue": "fakekey=\"1234\"",
          "Code": "InvalidArgument",
          "Message": "Argument format not recognized"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-grant-acl-wrong-id": {
        "Error": {
          "ArgumentName": "id",
          "ArgumentValue": "wrong-id",
          "Code": "InvalidArgument",
          "Message": "Invalid id"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-acp-acl-1": {
        "Error": {
          "Code": "MalformedACLError",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-acp-acl-2": {
        "Error": {
          "Code": "MalformedACLError",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-acp-acl-3": {
        "Error": {
          "ArgumentName": "CanonicalUser/ID",
          "ArgumentValue": "wrong-id",
          "Code": "InvalidArgument",
          "Message": "Invalid id"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-acp-acl-4": {
        "Error": {
          "ArgumentName": "Group/URI",
          "ArgumentValue": "http://acs.amazonaws.com/groups/s3/FakeGroup",
          "Code": "InvalidArgument",
          "Message": "Invalid group uri"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-acp-acl-5": {
        "Error": {
          "ArgumentName": "CanonicalUser/ID",
          "ArgumentValue": "wrong-id",
          "Code": "InvalidArgument",
          "Message": "Invalid id"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-acp-acl-6": {
        "Error": {
          "Code": "MalformedACLError",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_get_object_header_overrides": {
    "recorded-date": "16-09-2022, 15:54:28",
    "recorded-content": {
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "something",
        "CacheControl": "max-age=74",
        "ContentDisposition": "attachment; filename=\"foo.jpg\"",
        "ContentEncoding": "identity",
        "ContentLanguage": "de-DE",
        "ContentLength": 9,
        "ContentType": "image/jpeg",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "Expires": "datetime",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_s3_put_object_versioned": {
    "recorded-date": "16-09-2022, 16:52:17",
    "recorded-content": {
      "put-pre-versioned": {
        "ETag": "\"e1474add07e050008472599be0883b17\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-pre-versioned": {
        "AcceptRanges": "bytes",
        "Body": "non-versioned-key",
        "ContentLength": 17,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e1474add07e050008472599be0883b17\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-pre-versioned": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"e1474add07e050008472599be0883b17\"",
            "IsLatest": true,
            "Key": "non-version-bucket-key",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 17,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-post-versioned": {
        "AcceptRanges": "bytes",
        "Body": "non-versioned-key",
        "ContentLength": 17,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e1474add07e050008472599be0883b17\"",
        "LastModified": "datetime",
        "Metadata": {},
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-obj-versioned-1": {
        "ETag": "\"c43b615a50200509ceccc5f4122da4bf\"",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-obj-versioned-2": {
        "ETag": "\"a26fe9d9854f719b8865291904326b58\"",
        "VersionId": "<version-id:3>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-versioned": {
        "AcceptRanges": "bytes",
        "Body": "versioned-key-updated",
        "ContentLength": 21,
        "ContentType": "binary/octet-stream",
        "ETag": "\"a26fe9d9854f719b8865291904326b58\"",
        "LastModified": "datetime",
        "Metadata": {},
        "VersionId": "<version-id:3>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-versioned": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"e1474add07e050008472599be0883b17\"",
            "IsLatest": true,
            "Key": "non-version-bucket-key",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 17,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          },
          {
            "ETag": "\"a26fe9d9854f719b8865291904326b58\"",
            "IsLatest": true,
            "Key": "versioned-bucket-key",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 21,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          },
          {
            "ETag": "\"c43b615a50200509ceccc5f4122da4bf\"",
            "IsLatest": false,
            "Key": "versioned-bucket-key",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 13,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-bucket-suspended": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"e1474add07e050008472599be0883b17\"",
            "IsLatest": true,
            "Key": "non-version-bucket-key",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 17,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          },
          {
            "ETag": "\"a26fe9d9854f719b8865291904326b58\"",
            "IsLatest": true,
            "Key": "versioned-bucket-key",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 21,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          },
          {
            "ETag": "\"c43b615a50200509ceccc5f4122da4bf\"",
            "IsLatest": false,
            "Key": "versioned-bucket-key",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 13,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-versioned-disabled": {
        "AcceptRanges": "bytes",
        "Body": "versioned-key-updated",
        "ContentLength": 21,
        "ContentType": "binary/octet-stream",
        "ETag": "\"a26fe9d9854f719b8865291904326b58\"",
        "LastModified": "datetime",
        "Metadata": {},
        "VersionId": "<version-id:3>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-non-versioned-disabled": {
        "AcceptRanges": "bytes",
        "Body": "non-versioned-key",
        "ContentLength": 17,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e1474add07e050008472599be0883b17\"",
        "LastModified": "datetime",
        "Metadata": {},
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-non-versioned-post-disable": {
        "ETag": "\"6c0a0d0895ef9829b63848d506a68536\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-non-versioned-post-disable": {
        "AcceptRanges": "bytes",
        "Body": "non-versioned-key-post",
        "ContentLength": 22,
        "ContentType": "binary/octet-stream",
        "ETag": "\"6c0a0d0895ef9829b63848d506a68536\"",
        "LastModified": "datetime",
        "Metadata": {},
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_put_object_with_md5_and_chunk_signature_bad_headers[s3-True]": {
    "recorded-date": "22-09-2022, 00:02:59",
    "recorded-content": {
      "with-decoded-content-length": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        }
      },
      "without-decoded-content-length": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:2>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:2>"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_put_object_with_md5_and_chunk_signature_bad_headers[s3-False]": {
    "recorded-date": "22-09-2022, 00:03:00",
    "recorded-content": {}
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_put_object_with_md5_and_chunk_signature_bad_headers[s3v4-True]": {
    "recorded-date": "22-09-2022, 00:03:01",
    "recorded-content": {
      "with-decoded-content-length": {
        "Error": {
          "Code": "AccessDenied",
          "HeadersNotSigned": "x-amz-date, x-amz-decoded-content-length",
          "HostId": "host-id",
          "Message": "There were headers present in the request which were not signed",
          "RequestId": "<request-id:1>"
        }
      },
      "without-decoded-content-length": {
        "Error": {
          "Code": "AccessDenied",
          "HeadersNotSigned": "x-amz-date",
          "HostId": "host-id",
          "Message": "There were headers present in the request which were not signed",
          "RequestId": "<request-id:2>"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_put_object_with_md5_and_chunk_signature_bad_headers[s3v4-False]": {
    "recorded-date": "22-09-2022, 00:03:02",
    "recorded-content": {}
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_presigned_url_expired[s3]": {
    "recorded-date": "21-09-2022, 20:18:10",
    "recorded-content": {
      "expired-exception": {
        "Error": {
          "Code": "AccessDenied",
          "Expires": "date",
          "HostId": "host-id",
          "Message": "Request has expired",
          "RequestId": "<request-id:1>",
          "ServerTime": "date"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_presigned_url_expired[s3v4]": {
    "recorded-date": "21-09-2022, 20:18:17",
    "recorded-content": {
      "expired-exception": {
        "Error": {
          "Code": "AccessDenied",
          "Expires": "date",
          "HostId": "host-id",
          "Message": "Request has expired",
          "RequestId": "<request-id:1>",
          "ServerTime": "date",
          "X-Amz-Expires": "2"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication_expired[s3-False]": {
    "recorded-date": "21-09-2022, 20:37:44",
    "recorded-content": {
      "expired": {
        "Error": {
          "Code": "AccessDenied",
          "Expires": "date",
          "HostId": "host-id",
          "Message": "Request has expired",
          "RequestId": "<request-id:1>",
          "ServerTime": "date"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication_expired[s3-True]": {
    "recorded-date": "21-09-2022, 20:37:53",
    "recorded-content": {
      "expired": {
        "Error": {
          "Code": "AccessDenied",
          "Expires": "date",
          "HostId": "host-id",
          "Message": "Request has expired",
          "RequestId": "<request-id:1>",
          "ServerTime": "date"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication_expired[s3v4-False]": {
    "recorded-date": "21-09-2022, 20:37:57",
    "recorded-content": {
      "expired": {
        "Error": {
          "Code": "AccessDenied",
          "Expires": "date",
          "HostId": "host-id",
          "Message": "Request has expired",
          "RequestId": "<request-id:1>",
          "ServerTime": "date",
          "X-Amz-Expires": "1"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication_expired[s3v4-True]": {
    "recorded-date": "21-09-2022, 20:38:01",
    "recorded-content": {
      "expired": {
        "Error": {
          "Code": "AccessDenied",
          "Expires": "date",
          "HostId": "host-id",
          "Message": "Request has expired",
          "RequestId": "<request-id:1>",
          "ServerTime": "date",
          "X-Amz-Expires": "1"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication[s3-False]": {
    "recorded-date": "21-09-2022, 23:43:59",
    "recorded-content": {
      "invalid-get-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        }
      },
      "invalid-put-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:2>",
          "SignatureProvided": "<signature-provided:2>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:2>"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication[s3-True]": {
    "recorded-date": "21-09-2022, 23:44:05",
    "recorded-content": {
      "invalid-get-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        }
      },
      "invalid-put-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:2>",
          "SignatureProvided": "<signature-provided:2>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:2>"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication[s3v4-False]": {
    "recorded-date": "21-09-2022, 23:44:10",
    "recorded-content": {
      "invalid-get-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        }
      },
      "invalid-put-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:2>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:2>",
          "SignatureProvided": "<signature-provided:2>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:2>"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication[s3v4-True]": {
    "recorded-date": "21-09-2022, 23:44:15",
    "recorded-content": {
      "invalid-get-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        }
      },
      "invalid-put-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:2>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:2>",
          "SignatureProvided": "<signature-provided:2>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:2>"
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_put_presigned_url_missing_sig_param[s3]": {
    "recorded-date": "22-09-2022, 13:32:19",
    "recorded-content": {
      "missing-param-exception": {
        "Error": {
          "Code": "AccessDenied",
          "HostId": "host-id",
          "Message": "Query-string authentication requires the Signature, Expires and AWSAccessKeyId parameters",
          "RequestId": "<request-id:1>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_put_presigned_url_missing_sig_param[s3v4]": {
    "recorded-date": "22-09-2022, 13:32:22",
    "recorded-content": {
      "missing-param-exception": {
        "Error": {
          "Code": "AuthorizationQueryParametersError",
          "HostId": "host-id",
          "Message": "Query-string authentication version 4 requires the X-Amz-Algorithm, X-Amz-Credential, X-Amz-Signature, X-Amz-Date, X-Amz-SignedHeaders, and X-Amz-Expires parameters.",
          "RequestId": "<request-id:1>"
        },
        "StatusCode": 400
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_put_presigned_url_with_different_headers[s3]": {
    "recorded-date": "22-09-2022, 14:02:07",
    "recorded-content": {
      "content-type-exception": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        },
        "StatusCode": 403
      },
      "content-encoding-response": {
        "StatusCode": 200
      },
      "missing-content-encoding-response": {
        "StatusCode": 200
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_put_presigned_url_with_different_headers[s3v4]": {
    "recorded-date": "22-09-2022, 14:02:12",
    "recorded-content": {
      "content-type-exception": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        },
        "StatusCode": 403
      },
      "content-encoding-response": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:2>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:2>",
          "SignatureProvided": "<signature-provided:2>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:2>"
        },
        "StatusCode": 403
      },
      "missing-content-encoding-response": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:2>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:3>",
          "SignatureProvided": "<signature-provided:2>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:2>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_s3_put_presigned_url_same_header_and_qs_parameter": {
    "recorded-date": "22-09-2022, 14:28:14",
    "recorded-content": {
      "double-header-query-string": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        },
        "StatusCode": 403
      },
      "override-signed-qs": {
        "Error": {
          "Code": "AccessDenied",
          "HeadersNotSigned": "x-amz-expires",
          "HostId": "host-id",
          "Message": "There were headers present in the request which were not signed",
          "RequestId": "<request-id:2>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_post_request_expires": {
    "recorded-date": "04-10-2022, 17:59:26",
    "recorded-content": {
      "exception": {
        "Error": {
          "Code": "AccessDenied",
          "HostId": "host-id",
          "Message": "Invalid according to Policy: Policy expired.",
          "RequestId": "<request-id:1>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_post_request_malformed_policy": {
    "recorded-date": "04-10-2022, 20:42:19",
    "recorded-content": {
      "exception": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_post_request_malformed_policy[s3]": {
    "recorded-date": "05-10-2022, 18:11:44",
    "recorded-content": {
      "exception-policy": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_post_request_malformed_policy[s3v4]": {
    "recorded-date": "05-10-2022, 18:11:46",
    "recorded-content": {
      "exception-policy": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_post_request_missing_signature[s3]": {
    "recorded-date": "05-10-2022, 18:14:22",
    "recorded-content": {
      "exception-missing-signature": {
        "Error": {
          "ArgumentName": "Signature",
          "ArgumentValue": null,
          "Code": "InvalidArgument",
          "HostId": "host-id",
          "Message": "Bucket POST must contain a field named 'Signature'.  If it is specified, please check the order of the fields.",
          "RequestId": "<request-id:1>"
        },
        "StatusCode": 400
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_post_request_missing_signature[s3v4]": {
    "recorded-date": "05-10-2022, 18:14:24",
    "recorded-content": {
      "exception-missing-signature": {
        "Error": {
          "ArgumentName": "X-Amz-Signature",
          "ArgumentValue": null,
          "Code": "InvalidArgument",
          "HostId": "host-id",
          "Message": "Bucket POST must contain a field named 'X-Amz-Signature'.  If it is specified, please check the order of the fields.",
          "RequestId": "<request-id:1>"
        },
        "StatusCode": 400
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_post_request_missing_fields[s3]": {
    "recorded-date": "05-10-2022, 18:29:23",
    "recorded-content": {
      "exception-missing-fields": {
        "Error": {
          "ArgumentName": "AWSAccessKeyId",
          "ArgumentValue": null,
          "Code": "InvalidArgument",
          "HostId": "host-id",
          "Message": "Bucket POST must contain a field named 'AWSAccessKeyId'.  If it is specified, please check the order of the fields.",
          "RequestId": "<request-id:1>"
        },
        "StatusCode": 400
      },
      "exception-no-sig-related-fields": {
        "Error": {
          "Code": "AccessDenied",
          "HostId": "host-id",
          "Message": "Access Denied",
          "RequestId": "<request-id:2>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3PresignedUrl::test_post_request_missing_fields[s3v4]": {
    "recorded-date": "05-10-2022, 18:29:26",
    "recorded-content": {
      "exception-missing-fields": {
        "Error": {
          "ArgumentName": "X-Amz-Algorithm",
          "ArgumentValue": null,
          "Code": "InvalidArgument",
          "HostId": "host-id",
          "Message": "Bucket POST must contain a field named 'X-Amz-Algorithm'.  If it is specified, please check the order of the fields.",
          "RequestId": "<request-id:1>"
        },
        "StatusCode": 400
      },
      "exception-no-sig-related-fields": {
        "Error": {
          "Code": "AccessDenied",
          "HostId": "host-id",
          "Message": "Access Denied",
          "RequestId": "<request-id:2>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3StaticWebsiteHosting::test_validate_website_configuration": {
    "recorded-date": "28-09-2022, 22:44:53",
    "recorded-content": {
      "invalid-website-conf-0": {
        "Error": {
          "ArgumentName": "IndexDocument",
          "ArgumentValue": "/index.html",
          "Code": "InvalidArgument",
          "Message": "The IndexDocument Suffix is not well formed"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-website-conf-1": {
        "Error": {
          "ArgumentName": "IndexDocument",
          "ArgumentValue": null,
          "Code": "InvalidArgument",
          "Message": "The IndexDocument Suffix is not well formed"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-website-conf-2": {
        "Error": {
          "ArgumentName": "RedirectAllRequestsTo",
          "ArgumentValue": "not null",
          "Code": "InvalidArgument",
          "Message": "RedirectAllRequestsTo cannot be provided in conjunction with other Routing Rules."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-website-conf-3": {
        "Error": {
          "ArgumentName": "IndexDocument",
          "ArgumentValue": "null",
          "Code": "InvalidArgument",
          "Message": "A value for IndexDocument Suffix must be provided if RedirectAllRequestsTo is empty"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-website-conf-4": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Invalid protocol, protocol can be http or https. If not defined the protocol will be selected automatically."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-website-conf-5": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "You can only define ReplaceKeyPrefix or ReplaceKey but not both."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-website-conf-6": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Condition cannot be empty. To redirect all requests without a condition, the condition element shouldn't be present."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-website-conf-7": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3StaticWebsiteHosting::test_crud_website_configuration": {
    "recorded-date": "28-09-2022, 23:23:11",
    "recorded-content": {
      "get-no-such-website-config": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchWebsiteConfiguration",
          "Message": "The specified bucket does not have a website configuration"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "del-no-such-website-config": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "put-website-config": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-website-config": {
        "IndexDocument": {
          "Suffix": "index.html"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3StaticWebsiteHosting::test_website_hosting_http_methods": {
    "recorded-date": "04-10-2022, 16:11:12",
    "recorded-content": {
      "not-allowed-post": {
        "content": "<html>\n<head><title>405 Method Not Allowed</title></head>\n<body>\n<h1>405 Method Not Allowed</h1>\n<ul>\n<li>Code: MethodNotAllowed</li>\n<li>Message: The specified method is not allowed against this resource.</li>\n<li>Method: POST</li>\n<li>ResourceType: OBJECT</li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n"
      },
      "not-allowed-delete": {
        "content": "<html>\n<head><title>405 Method Not Allowed</title></head>\n<body>\n<h1>405 Method Not Allowed</h1>\n<ul>\n<li>Code: MethodNotAllowed</li>\n<li>Message: The specified method is not allowed against this resource.</li>\n<li>Method: DELETE</li>\n<li>ResourceType: OBJECT</li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n"
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3StaticWebsiteHosting::test_website_hosting_index_lookup": {
    "recorded-date": "04-10-2022, 16:45:08",
    "recorded-content": {
      "404-no-trailing-slash": "<html>\n<head><title>404 Not Found</title></head>\n<body>\n<h1>404 Not Found</h1>\n<ul>\n<li>Code: NoSuchKey</li>\n<li>Message: The specified key does not exist.</li>\n<li>Key: directory-wrong</li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n",
      "404-with-trailing-slash": "<html>\n<head><title>404 Not Found</title></head>\n<body>\n<h1>404 Not Found</h1>\n<ul>\n<li>Code: NoSuchKey</li>\n<li>Message: The specified key does not exist.</li>\n<li>Key: directory-wrong/index.html</li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n"
    }
  },
  "tests/integration/s3/test_s3.py::TestS3StaticWebsiteHosting::test_website_hosting_404": {
    "recorded-date": "04-10-2022, 16:51:12",
    "recorded-content": {
      "404-no-such-key": "<html>\n<head><title>404 Not Found</title></head>\n<body>\n<h1>404 Not Found</h1>\n<ul>\n<li>Code: NoSuchKey</li>\n<li>Message: The specified key does not exist.</li>\n<li>Key: index.html</li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n",
      "404-no-such-key-nor-custom": "<html>\n<head><title>404 Not Found</title></head>\n<body>\n<h1>404 Not Found</h1>\n<ul>\n<li>Code: NoSuchKey</li>\n<li>Message: The specified key does not exist.</li>\n<li>Key: index.html</li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<h3>An Error Occurred While Attempting to Retrieve a Custom Error Document</h3>\n<ul>\n<li>Code: NoSuchKey</li>\n<li>Message: The specified key does not exist.</li>\n<li>Key: error.html</li>\n</ul>\n<hr/>\n</body>\n</html>\n"
    }
  },
  "tests/integration/s3/test_s3.py::TestS3StaticWebsiteHosting::test_website_hosting_no_such_website": {
    "recorded-date": "04-10-2022, 16:56:34",
    "recorded-content": {
      "no-such-bucket": "<html>\n<head><title>404 Not Found</title></head>\n<body>\n<h1>404 Not Found</h1>\n<ul>\n<li>Code: NoSuchBucket</li>\n<li>Message: The specified bucket does not exist</li>\n<li>BucketName: <bucket-name></li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n",
      "no-such-website-config": "<html>\n<head><title>404 Not Found</title></head>\n<body>\n<h1>404 Not Found</h1>\n<ul>\n<li>Code: NoSuchWebsiteConfiguration</li>\n<li>Message: The specified bucket does not have a website configuration</li>\n<li>BucketName: <bucket-name></li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n",
      "no-such-website-config-key": "<html>\n<head><title>404 Not Found</title></head>\n<body>\n<h1>404 Not Found</h1>\n<ul>\n<li>Code: NoSuchWebsiteConfiguration</li>\n<li>Message: The specified bucket does not have a website configuration</li>\n<li>BucketName: <bucket-name></li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n"
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_multipart_and_list_parts": {
    "recorded-date": "06-10-2022, 18:49:24",
    "recorded-content": {
      "create-multipart": {
        "Bucket": "bucket",
        "Key": "test-list-parts",
        "UploadId": "<upload-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-part-after-created": {
        "Bucket": "bucket",
        "Initiator": {
          "DisplayName": "display-name",
          "ID": "owner-id"
        },
        "IsTruncated": false,
        "Key": "test-list-parts",
        "MaxParts": 1000,
        "NextPartNumberMarker": 0,
        "Owner": {
          "DisplayName": "display-name",
          "ID": "owner-id"
        },
        "PartNumberMarker": 0,
        "StorageClass": "STANDARD",
        "UploadId": "<upload-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "upload-part": {
        "ETag": "\"3237c18681adb6a9d843c733ce249480\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-part-after-upload": {
        "Bucket": "bucket",
        "Initiator": {
          "DisplayName": "display-name",
          "ID": "owner-id"
        },
        "IsTruncated": false,
        "Key": "test-list-parts",
        "MaxParts": 1000,
        "NextPartNumberMarker": 1,
        "Owner": {
          "DisplayName": "display-name",
          "ID": "owner-id"
        },
        "PartNumberMarker": 0,
        "Parts": [
          {
            "ETag": "\"3237c18681adb6a9d843c733ce249480\"",
            "LastModified": "datetime",
            "PartNumber": 1,
            "Size": 65
          }
        ],
        "StorageClass": "STANDARD",
        "UploadId": "<upload-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "complete-multipart": {
        "Bucket": "bucket",
        "ETag": "\"e747540af6911dbc890f8d3e0b48549b-1\"",
        "Key": "test-list-parts",
        "Location": "<location:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-part-after-complete-exc": {
        "Error": {
          "Code": "NoSuchUpload",
          "Message": "The specified upload does not exist. The upload ID may be invalid, or the upload may have been aborted or completed.",
          "UploadId": "<upload-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3Cors::test_s3_get_response_headers": {
    "recorded-date": "24-10-2022, 15:57:19",
    "recorded-content": {
      "bucket-cors-response": {
        "CORSRules": [
          {
            "AllowedMethods": [
              "GET",
              "PUT",
              "POST"
            ],
            "AllowedOrigins": [
              "*"
            ],
            "ExposeHeaders": [
              "ETag",
              "x-amz-version-id"
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_put_and_get_object_with_content_language_disposition": {
    "recorded-date": "18-10-2022, 10:25:38",
    "recorded-content": {
      "put-object": {
        "ETag": "\"e99a18c428cb38d5f260853678922e03\"",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-headers": {
        "HTTPHeaders": {
          "content-length": "0",
          "date": "date",
          "etag": "\"e99a18c428cb38d5f260853678922e03\"",
          "server": "server",
          "x-amz-id-2": "id-2",
          "x-amz-request-id": "request-id"
        },
        "HTTPStatusCode": 200,
        "HostId": "host-id",
        "RequestId": "request-id",
        "RetryAttempts": 0
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "CacheControl": "no-cache",
        "ContentDisposition": "attachment; filename=\"foo.jpg\"",
        "ContentLanguage": "de",
        "ContentLength": 6,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e99a18c428cb38d5f260853678922e03\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-headers": {
        "HTTPHeaders": {
          "accept-ranges": "bytes",
          "cache-control": "no-cache",
          "content-disposition": "attachment; filename=\"foo.jpg\"",
          "content-language": "de",
          "content-length": "6",
          "content-type": "binary/octet-stream",
          "date": "date",
          "etag": "\"e99a18c428cb38d5f260853678922e03\"",
          "last-modified": "last-modified",
          "server": "server",
          "x-amz-id-2": "id-2",
          "x-amz-request-id": "request-id"
        },
        "HTTPStatusCode": 200,
        "HostId": "host-id",
        "RequestId": "request-id",
        "RetryAttempts": 0
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_copy_object_kms": {
    "recorded-date": "17-10-2022, 14:27:01",
    "recorded-content": {
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "hello world",
        "ContentLength": 11,
        "ContentType": "binary/octet-stream",
        "ETag": "\"5eb63bbbe01eeed093cb22bb8f5acdc3\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object": {
        "BucketKeyEnabled": true,
        "CopyObjectResult": {
          "ETag": "copy-etag",
          "LastModified": "datetime"
        },
        "SSEKMSKeyId": "<key-id:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-copied-object": {
        "AcceptRanges": "bytes",
        "Body": "hello world",
        "BucketKeyEnabled": true,
        "ContentLength": 11,
        "ContentType": "binary/octet-stream",
        "ETag": "etag",
        "LastModified": "datetime",
        "Metadata": {},
        "SSEKMSKeyId": "<key-id:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_replication_config": {
    "recorded-date": "18-10-2022, 14:49:15",
    "recorded-content": {
      "expected_error_no_replication_set": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "ReplicationConfigurationNotFoundError",
          "Message": "The replication configuration was not found"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "expected_error_versioning_not_enabled": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Versioning must be 'Enabled' on the bucket to apply a replication configuration"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-replication": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-replication": {
        "ReplicationConfiguration": {
          "Role": "role",
          "Rules": [
            {
              "DeleteMarkerReplication": {
                "Status": "Disabled"
              },
              "Destination": {
                "Bucket": "dest-bucket"
              },
              "Filter": {
                "Prefix": "Tax"
              },
              "ID": "id",
              "Priority": 1,
              "Status": "Enabled"
            }
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_delete_non_existing_keys_quiet": {
    "recorded-date": "19-10-2022, 10:11:26",
    "recorded-content": {
      "deleted-resp": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3.py::TestS3::test_replication_config_without_filter": {
    "recorded-date": "19-10-2022, 15:32:31",
    "recorded-content": {
      "expected_error_dest_does_not_exist": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Destination bucket must have versioning enabled."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "expected_error_dest_versioning_disabled": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Destination bucket must have versioning enabled."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-replication": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-replication": {
        "ReplicationConfiguration": {
          "Role": "role",
          "Rules": [
            {
              "DeleteMarkerReplication": {
                "Status": "Disabled"
              },
              "Destination": {
                "Bucket": "dest-bucket",
                "Metrics": {
                  "EventThreshold": {
                    "Minutes": 15
                  },
                  "Status": "Enabled"
                },
                "ReplicationTime": {
                  "Status": "Enabled",
                  "Time": {
                    "Minutes": 15
                  }
                },
                "StorageClass": "STANDARD"
              },
              "Filter": {},
              "ID": "rtc",
              "Priority": 0,
              "Status": "Disabled"
            }
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  }
}
