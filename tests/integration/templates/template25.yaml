---
AWSTemplateFormatVersion: "2010-09-09"

Resources:
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: slack-sns-topic
      Subscription:
        - Endpoint: !GetAtt LambdaFunction.Arn
          Protocol: lambda
  PermissionForSnsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref SnsTopic
  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: LambdaFunction
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join ["", ["/aws/lambda/", !Ref LambdaFunction]]
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: slack-sns-topic
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'logs:*'
            Resource: 'arn:aws:logs:*:*:*'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "test-forward-sns"
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: "python3.7"
      Handler: index.handler
      Code:
        ZipFile: |
          import json
          def handler(event, context):
            return json.dumps({"message_code": 200, "message_info": "success"})
      Timeout: 20
Outputs:
  FuncArn:
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: FuncArnExportName123
