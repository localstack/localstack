{
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_alarm_lambda_target": {
    "recorded-date": "03-01-2024, 17:30:00",
    "recorded-content": {
      "lambda-alarm-invocations": {
        "source": "aws.cloudwatch",
        "alarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
        "accountId": "111111111111",
        "time": "date",
        "region": "<region>",
        "alarmData": {
          "alarmName": "<alarm-name:1>",
          "state": {
            "value": "ALARM",
            "reason": "testing alarm",
            "timestamp": "date"
          },
          "previousState": {
            "value": "INSUFFICIENT_DATA",
            "reason": "Unchecked: Initial alarm creation",
            "timestamp": "date"
          },
          "configuration": {
            "description": "testing lambda alarm action",
            "metrics": [
              {
                "id": "<uuid:1>",
                "metricStat": {
                  "metric": {
                    "namespace": "namespace",
                    "name": "metric1",
                    "dimensions": {}
                  },
                  "period": 10,
                  "stat": "Average"
                },
                "returnData": true
              }
            ]
          }
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudWatchMultiProtocol::test_basic_operations_multiple_protocols[json]": {
    "recorded-date": "18-09-2025, 13:56:03",
    "recorded-content": {
      "describe-alarms": {
        "CompositeAlarms": [],
        "LogAlarms": [],
        "MetricAlarms": []
      },
      "get-metric-data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "some",
            "Label": "<label:1>",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              41.0
            ]
          },
          {
            "Id": "part",
            "Label": "<label:2>",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              23.0
            ]
          }
        ]
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudWatchMultiProtocol::test_basic_operations_multiple_protocols[smithy-rpc-v2-cbor]": {
    "recorded-date": "18-09-2025, 13:56:06",
    "recorded-content": {
      "describe-alarms": {
        "CompositeAlarms": [],
        "LogAlarms": [],
        "MetricAlarms": []
      },
      "get-metric-data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "some",
            "Label": "<label:1>",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              41.0
            ]
          },
          {
            "Id": "part",
            "Label": "<label:2>",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              23.0
            ]
          }
        ]
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudWatchMultiProtocol::test_basic_operations_multiple_protocols[query]": {
    "recorded-date": "18-09-2025, 13:56:09",
    "recorded-content": {
      "describe-alarms": {
        "DescribeAlarmsResponse": {
          "@xmlns": "http://monitoring.amazonaws.com/doc/2010-08-01/",
          "DescribeAlarmsResult": {
            "CompositeAlarms": null,
            "LogAlarms": null,
            "MetricAlarms": null
          }
        }
      },
      "get-metric-data": {
        "GetMetricDataResponse": {
          "@xmlns": "http://monitoring.amazonaws.com/doc/2010-08-01/",
          "GetMetricDataResult": {
            "Messages": null,
            "MetricDataResults": {
              "member": [
                {
                  "Id": "some",
                  "Label": "<label:1>",
                  "StatusCode": "Complete",
                  "Timestamps": "timestamp",
                  "Values": {
                    "member": "41.0"
                  }
                },
                {
                  "Id": "part",
                  "Label": "<label:2>",
                  "StatusCode": "Complete",
                  "Timestamps": "timestamp",
                  "Values": {
                    "member": "23.0"
                  }
                }
              ]
            }
          }
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudWatchMultiProtocol::test_exception_serializing_with_no_shape_in_spec[json]": {
    "recorded-date": "22-09-2025, 19:17:52",
    "recorded-content": {
      "invalid-value-response": {
        "__type": "com.amazon.coral.validate#ValidationException",
        "message": "1 validation error detected: Value 'INVALID' at 'stateValue' failed to satisfy constraint: Member must satisfy enum value set: [INSUFFICIENT_DATA, ALARM, OK]"
      },
      "not-found-response": {
        "__type": "com.amazonaws.cloudwatch.v2010_08_01#ResourceNotFound"
      },
      "not-found-response-query-mode-true": {
        "__type": "com.amazonaws.cloudwatch.v2010_08_01#ResourceNotFound"
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudWatchMultiProtocol::test_exception_serializing_with_no_shape_in_spec[smithy-rpc-v2-cbor]": {
    "recorded-date": "22-09-2025, 19:17:53",
    "recorded-content": {
      "invalid-value-response": {
        "__type": "com.amazon.coral.validate#ValidationException",
        "message": "1 validation error detected: Value 'INVALID' at 'stateValue' failed to satisfy constraint: Member must satisfy enum value set: [INSUFFICIENT_DATA, ALARM, OK]"
      },
      "not-found-response": {
        "__type": "com.amazonaws.cloudwatch.v2010_08_01#ResourceNotFound"
      },
      "not-found-response-query-mode-true": {
        "__type": "com.amazonaws.cloudwatch.v2010_08_01#ResourceNotFound"
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudWatchMultiProtocol::test_exception_serializing_with_no_shape_in_spec[query]": {
    "recorded-date": "22-09-2025, 19:17:54",
    "recorded-content": {
      "invalid-value-response": {
        "ErrorResponse": {
          "@xmlns": "http://monitoring.amazonaws.com/doc/2010-08-01/",
          "Error": {
            "Code": "ValidationError",
            "Message": "1 validation error detected: Value 'INVALID' at 'stateValue' failed to satisfy constraint: Member must satisfy enum value set: [INSUFFICIENT_DATA, ALARM, OK]",
            "Type": "Sender"
          },
          "RequestId": "<uuid:1>"
        }
      },
      "not-found-response": {
        "ErrorResponse": {
          "@xmlns": "http://monitoring.amazonaws.com/doc/2010-08-01/",
          "Error": {
            "Code": "ResourceNotFound",
            "Type": "Sender"
          },
          "RequestId": "<uuid:2>"
        }
      },
      "not-found-response-query-mode-true": {
        "ErrorResponse": {
          "@xmlns": "http://monitoring.amazonaws.com/doc/2010-08-01/",
          "Error": {
            "Code": "ResourceNotFound",
            "Type": "Sender"
          },
          "RequestId": "<uuid:3>"
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_put_metric_data_values_list[query]": {
    "recorded-date": "19-09-2025, 17:40:30",
    "recorded-content": {
      "get_metric_statistics": {
        "Datapoints": [
          {
            "Maximum": 10.0,
            "SampleCount": 6.0,
            "Sum": 42.0,
            "Timestamp": "timestamp",
            "Unit": "Count"
          }
        ],
        "Label": "test-metric",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_put_metric_data_values_list[json]": {
    "recorded-date": "19-09-2025, 17:40:31",
    "recorded-content": {
      "get_metric_statistics": {
        "Datapoints": [
          {
            "Maximum": 10.0,
            "SampleCount": 6.0,
            "Sum": 42.0,
            "Timestamp": "timestamp",
            "Unit": "Count"
          }
        ],
        "Label": "test-metric",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_put_metric_data_values_list[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 17:40:32",
    "recorded-content": {
      "get_metric_statistics": {
        "Datapoints": [
          {
            "Maximum": 10.0,
            "SampleCount": 6.0,
            "Sum": 42.0,
            "Timestamp": "timestamp",
            "Unit": "Count"
          }
        ],
        "Label": "test-metric",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_put_metric_data_validation[query]": {
    "recorded-date": "19-09-2025, 18:08:03",
    "recorded-content": {
      "invalid-param-combination": {
        "Error": {
          "Code": "InvalidParameterCombination",
          "Message": "The parameters MetricData.member.1.Value and MetricData.member.1.Values are mutually exclusive and you have specified both.",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-param-value": {
        "Error": {
          "Code": "InvalidParameterValue",
          "Message": "The parameters MetricData.member.1.Values and MetricData.member.1.Counts must be of the same size.",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-param-combination-2": {
        "Error": {
          "Code": "InvalidParameterCombination",
          "Message": "The parameters MetricData.member.1.Value and MetricData.member.1.StatisticValues are mutually exclusive and you have specified both.",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_put_metric_data_validation[json]": {
    "recorded-date": "19-09-2025, 18:08:04",
    "recorded-content": {
      "invalid-param-combination": {
        "Error": {
          "Code": "InvalidParameterCombination",
          "Message": "The parameters MetricData.member.1.Value and MetricData.member.1.Values are mutually exclusive and you have specified both.",
          "QueryErrorCode": "InvalidParameterCombinationException",
          "Type": "Sender"
        },
        "message": "The parameters MetricData.member.1.Value and MetricData.member.1.Values are mutually exclusive and you have specified both.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-param-value": {
        "Error": {
          "Code": "InvalidParameterValue",
          "Message": "The parameters MetricData.member.1.Values and MetricData.member.1.Counts must be of the same size.",
          "QueryErrorCode": "InvalidParameterValueException",
          "Type": "Sender"
        },
        "message": "The parameters MetricData.member.1.Values and MetricData.member.1.Counts must be of the same size.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-param-combination-2": {
        "Error": {
          "Code": "InvalidParameterCombination",
          "Message": "The parameters MetricData.member.1.Value and MetricData.member.1.StatisticValues are mutually exclusive and you have specified both.",
          "QueryErrorCode": "InvalidParameterCombinationException",
          "Type": "Sender"
        },
        "message": "The parameters MetricData.member.1.Value and MetricData.member.1.StatisticValues are mutually exclusive and you have specified both.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_put_metric_data_validation[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 18:08:05",
    "recorded-content": {
      "invalid-param-combination": {
        "Error": {
          "Code": "InvalidParameterCombination",
          "Message": "The parameters MetricData.member.1.Value and MetricData.member.1.Values are mutually exclusive and you have specified both.",
          "QueryErrorCode": "InvalidParameterCombinationException",
          "Type": "Sender"
        },
        "message": "The parameters MetricData.member.1.Value and MetricData.member.1.Values are mutually exclusive and you have specified both.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-param-value": {
        "Error": {
          "Code": "InvalidParameterValue",
          "Message": "The parameters MetricData.member.1.Values and MetricData.member.1.Counts must be of the same size.",
          "QueryErrorCode": "InvalidParameterValueException",
          "Type": "Sender"
        },
        "message": "The parameters MetricData.member.1.Values and MetricData.member.1.Counts must be of the same size.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-param-combination-2": {
        "Error": {
          "Code": "InvalidParameterCombination",
          "Message": "The parameters MetricData.member.1.Value and MetricData.member.1.StatisticValues are mutually exclusive and you have specified both.",
          "QueryErrorCode": "InvalidParameterCombinationException",
          "Type": "Sender"
        },
        "message": "The parameters MetricData.member.1.Value and MetricData.member.1.StatisticValues are mutually exclusive and you have specified both.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_for_multiple_metrics[query]": {
    "recorded-date": "19-09-2025, 20:29:17",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              50.0
            ]
          },
          {
            "Id": "result2",
            "Label": "metric2",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              25.0
            ]
          },
          {
            "Id": "result3",
            "Label": "metric3",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              55.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_for_multiple_metrics[json]": {
    "recorded-date": "19-09-2025, 20:29:18",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              50.0
            ]
          },
          {
            "Id": "result2",
            "Label": "metric2",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              25.0
            ]
          },
          {
            "Id": "result3",
            "Label": "metric3",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              55.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_for_multiple_metrics[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 20:29:20",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              50.0
            ]
          },
          {
            "Id": "result2",
            "Label": "metric2",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              25.0
            ]
          },
          {
            "Id": "result3",
            "Label": "metric3",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              55.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[query-Sum]": {
    "recorded-date": "19-09-2025, 20:31:51",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              66.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[query-SampleCount]": {
    "recorded-date": "19-09-2025, 20:31:54",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              11.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[query-Minimum]": {
    "recorded-date": "19-09-2025, 20:31:56",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[query-Maximum]": {
    "recorded-date": "19-09-2025, 20:31:59",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              11.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[query-Average]": {
    "recorded-date": "19-09-2025, 20:32:03",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              6.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[json-Sum]": {
    "recorded-date": "19-09-2025, 20:32:05",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              66.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[json-SampleCount]": {
    "recorded-date": "19-09-2025, 20:32:08",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              11.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[json-Minimum]": {
    "recorded-date": "19-09-2025, 20:32:10",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[json-Maximum]": {
    "recorded-date": "19-09-2025, 20:32:13",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              11.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[json-Average]": {
    "recorded-date": "19-09-2025, 20:32:15",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              6.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[smithy-rpc-v2-cbor-Sum]": {
    "recorded-date": "19-09-2025, 20:32:18",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              66.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[smithy-rpc-v2-cbor-SampleCount]": {
    "recorded-date": "19-09-2025, 20:32:20",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              11.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[smithy-rpc-v2-cbor-Minimum]": {
    "recorded-date": "19-09-2025, 20:32:22",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[smithy-rpc-v2-cbor-Maximum]": {
    "recorded-date": "19-09-2025, 20:32:25",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              11.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_stats[smithy-rpc-v2-cbor-Average]": {
    "recorded-date": "19-09-2025, 20:32:27",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              6.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_with_dimensions[query]": {
    "recorded-date": "19-09-2025, 20:33:39",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              11.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_with_dimensions[json]": {
    "recorded-date": "19-09-2025, 20:33:41",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              11.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_with_dimensions[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 20:33:44",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              11.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_describe_alarms_converts_date_format_correctly[query]": {
    "recorded-date": "19-09-2025, 20:38:27",
    "recorded-content": {
      "describe-alarms": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "<metric-name:1>",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 60,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 30.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_describe_alarms_converts_date_format_correctly[json]": {
    "recorded-date": "19-09-2025, 20:38:27",
    "recorded-content": {
      "describe-alarms": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "<metric-name:1>",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 60,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 30.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_describe_alarms_converts_date_format_correctly[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 20:38:28",
    "recorded-content": {
      "describe-alarms": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "<metric-name:1>",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 60,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 30.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_store_tags[query]": {
    "recorded-date": "19-09-2025, 20:42:24",
    "recorded-content": {
      "put_metric_alarm": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_alarms": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "store_tags",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 60,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 30.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_tags_for_resource_empty ": {
        "Tags": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_tags_for_resource": {
        "Tags": [
          {
            "Key": "tag1",
            "Value": "foo"
          },
          {
            "Key": "tag2",
            "Value": "bar"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_tags_for_resource_post_untag": {
        "Tags": [
          {
            "Key": "tag2",
            "Value": "bar"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_store_tags[json]": {
    "recorded-date": "19-09-2025, 20:42:26",
    "recorded-content": {
      "put_metric_alarm": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_alarms": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "store_tags",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 60,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 30.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_tags_for_resource_empty ": {
        "Tags": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_tags_for_resource": {
        "Tags": [
          {
            "Key": "tag1",
            "Value": "foo"
          },
          {
            "Key": "tag2",
            "Value": "bar"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_tags_for_resource_post_untag": {
        "Tags": [
          {
            "Key": "tag2",
            "Value": "bar"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_store_tags[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 20:42:27",
    "recorded-content": {
      "put_metric_alarm": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_alarms": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "store_tags",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 60,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 30.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_tags_for_resource_empty ": {
        "Tags": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_tags_for_resource": {
        "Tags": [
          {
            "Key": "tag1",
            "Value": "foo"
          },
          {
            "Key": "tag2",
            "Value": "bar"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_tags_for_resource_post_untag": {
        "Tags": [
          {
            "Key": "tag2",
            "Value": "bar"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_put_metric_alarm_escape_character[query]": {
    "recorded-date": "19-09-2025, 20:51:19",
    "recorded-content": {
      "describe-alarms-escaped-character": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111122223333:MyTopic"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "<",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "<metric-name:1>",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 600,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 1.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_put_metric_alarm_escape_character[json]": {
    "recorded-date": "19-09-2025, 20:51:19",
    "recorded-content": {
      "describe-alarms-escaped-character": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111122223333:MyTopic"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "<",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "<metric-name:1>",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 600,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 1.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_put_metric_alarm_escape_character[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 20:51:20",
    "recorded-content": {
      "describe-alarms-escaped-character": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111122223333:MyTopic"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "<",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "<metric-name:1>",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 600,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 1.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_trigger_composite_alarm[query]": {
    "recorded-date": "19-09-2025, 21:03:22",
    "recorded-content": {
      "put-composite-alarm": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "composite-alarm-in-alarm-when-alarm-1-is-in-alarm": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:1>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>",
              "state": {
                "value": "ALARM",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "ALARM"
      },
      "composite-alarm-in-ok-when-alarm-1-is-back-to-ok": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:2>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>",
              "state": {
                "value": "OK",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "OK"
      },
      "composite-alarm-in-alarm-when-alarm-2-is-in-alarm": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:3>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>",
              "state": {
                "value": "ALARM",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "ALARM"
      },
      "composite-alarm-in-ok-when-alarm-2-is-back-to-ok": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:4>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>",
              "state": {
                "value": "OK",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "OK"
      },
      "composite-alarm-is-triggered-by-alarm-1-and-then-unchanged-by-alarm-2": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:5>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>",
              "state": {
                "value": "ALARM",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "ALARM"
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_trigger_composite_alarm[json]": {
    "recorded-date": "19-09-2025, 21:03:34",
    "recorded-content": {
      "put-composite-alarm": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "composite-alarm-in-alarm-when-alarm-1-is-in-alarm": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:1>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>",
              "state": {
                "value": "ALARM",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "ALARM"
      },
      "composite-alarm-in-ok-when-alarm-1-is-back-to-ok": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:2>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>",
              "state": {
                "value": "OK",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "OK"
      },
      "composite-alarm-in-alarm-when-alarm-2-is-in-alarm": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:3>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>",
              "state": {
                "value": "ALARM",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "ALARM"
      },
      "composite-alarm-in-ok-when-alarm-2-is-back-to-ok": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:4>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>",
              "state": {
                "value": "OK",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "OK"
      },
      "composite-alarm-is-triggered-by-alarm-1-and-then-unchanged-by-alarm-2": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:5>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>",
              "state": {
                "value": "ALARM",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "ALARM"
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_trigger_composite_alarm[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 21:03:49",
    "recorded-content": {
      "put-composite-alarm": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "composite-alarm-in-alarm-when-alarm-1-is-in-alarm": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:1>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>",
              "state": {
                "value": "ALARM",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "ALARM"
      },
      "composite-alarm-in-ok-when-alarm-1-is-back-to-ok": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:2>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>",
              "state": {
                "value": "OK",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "OK"
      },
      "composite-alarm-in-alarm-when-alarm-2-is-in-alarm": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:3>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>",
              "state": {
                "value": "ALARM",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "ALARM"
      },
      "composite-alarm-in-ok-when-alarm-2-is-back-to-ok": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:4>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>",
              "state": {
                "value": "OK",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "OK"
      },
      "composite-alarm-is-triggered-by-alarm-1-and-then-unchanged-by-alarm-2": {
        "ActionsEnabled": true,
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<alarm-topic-name>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<composite-alarm-name>",
        "AlarmConfigurationUpdatedTimestamp": "timestamp",
        "AlarmDescription": "composite alarm description",
        "AlarmName": "<composite-alarm-name>",
        "AlarmRule": "ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>\") OR ALARM(\"arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-2-name>\")",
        "InsufficientDataActions": [],
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<ok-topic-name>"
        ],
        "StateReason": "<state-reason:5>",
        "StateReasonData": {
          "triggeringAlarms": [
            {
              "arn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<simple-alarm-1-name>",
              "state": {
                "value": "ALARM",
                "timestamp": "date"
              }
            }
          ]
        },
        "StateTransitionedTimestamp": "timestamp",
        "StateUpdatedTimestamp": "timestamp",
        "StateValue": "ALARM"
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_put_metric_alarm[query]": {
    "recorded-date": "19-09-2025, 21:08:24",
    "recorded-content": {
      "describe-alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "my-metric1",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Average",
            "Threshold": 21.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "alarm-triggered-sqs-msg": {
        "AWSAccountId": "111111111111",
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
        "AlarmConfigurationUpdatedTimestamp": "date",
        "AlarmDescription": "testing cloudwatch alarms",
        "AlarmName": "<alarm-name:1>",
        "InsufficientDataActions": [],
        "NewStateReason": "Threshold Crossed: 1 datapoint [21.5 (MM/DD/YY HH:MM:SS)] was greater than the threshold (21.0).",
        "NewStateValue": "ALARM",
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "OldStateValue": "INSUFFICIENT_DATA",
        "Region": "<region-name-full:1>",
        "StateChangeTime": "date",
        "Trigger": {
          "ComparisonOperator": "GreaterThanThreshold",
          "Dimensions": [
            {
              "name": "InstanceId",
              "value": "abc"
            }
          ],
          "EvaluateLowSampleCountPercentile": "",
          "EvaluationPeriods": 1,
          "MetricName": "my-metric1",
          "Namespace": "<namespace:1>",
          "Period": 10,
          "Statistic": "AVERAGE",
          "StatisticType": "Statistic",
          "Threshold": 21.0,
          "TreatMissingData": "ignore",
          "Unit": "Seconds"
        }
      },
      "describe-alarm-history": {
        "AlarmHistoryItems": [
          {
            "AlarmName": "<alarm-name:1>",
            "AlarmType": "MetricAlarm",
            "HistoryData": {
              "version": "1.0",
              "oldState": {
                "stateValue": "INSUFFICIENT_DATA",
                "stateReason": "Unchecked: Initial alarm creation"
              },
              "newState": {
                "stateValue": "ALARM",
                "stateReason": "Threshold Crossed: 1 datapoint [21.5 (MM/DD/YY HH:MM:SS)] was greater than the threshold (21.0).",
                "stateReasonData": {
                  "version": "1.0",
                  "queryDate": "date",
                  "startDate": "date",
                  "unit": "Seconds",
                  "statistic": "Average",
                  "period": 10,
                  "recentDatapoints": [
                    21.5
                  ],
                  "threshold": 21.0,
                  "evaluatedDatapoints": [
                    {
                      "timestamp": "date",
                      "sampleCount": 2.0,
                      "value": 21.5
                    }
                  ]
                }
              }
            },
            "HistoryItemType": "StateUpdate",
            "HistorySummary": "Alarm updated from INSUFFICIENT_DATA to ALARM",
            "Timestamp": "timestamp"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-alarms-for-metric": {
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "my-metric1",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "Threshold Crossed: 1 datapoint [21.5 (MM/DD/YY HH:MM:SS)] was greater than the threshold (21.0).",
            "StateReasonData": {
              "version": "1.0",
              "queryDate": "date",
              "startDate": "date",
              "unit": "Seconds",
              "statistic": "Average",
              "period": 10,
              "recentDatapoints": [
                21.5
              ],
              "threshold": 21.0,
              "evaluatedDatapoints": [
                {
                  "timestamp": "date",
                  "sampleCount": 2.0,
                  "value": 21.5
                }
              ]
            },
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "ALARM",
            "Statistic": "Average",
            "Threshold": 21.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_put_metric_alarm[json]": {
    "recorded-date": "19-09-2025, 21:08:43",
    "recorded-content": {
      "describe-alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "my-metric1",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Average",
            "Threshold": 21.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "alarm-triggered-sqs-msg": {
        "AWSAccountId": "111111111111",
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
        "AlarmConfigurationUpdatedTimestamp": "date",
        "AlarmDescription": "testing cloudwatch alarms",
        "AlarmName": "<alarm-name:1>",
        "InsufficientDataActions": [],
        "NewStateReason": "Threshold Crossed: 1 datapoint [21.5 (MM/DD/YY HH:MM:SS)] was greater than the threshold (21.0).",
        "NewStateValue": "ALARM",
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "OldStateValue": "INSUFFICIENT_DATA",
        "Region": "<region-name-full:1>",
        "StateChangeTime": "date",
        "Trigger": {
          "ComparisonOperator": "GreaterThanThreshold",
          "Dimensions": [
            {
              "name": "InstanceId",
              "value": "abc"
            }
          ],
          "EvaluateLowSampleCountPercentile": "",
          "EvaluationPeriods": 1,
          "MetricName": "my-metric1",
          "Namespace": "<namespace:1>",
          "Period": 10,
          "Statistic": "AVERAGE",
          "StatisticType": "Statistic",
          "Threshold": 21.0,
          "TreatMissingData": "ignore",
          "Unit": "Seconds"
        }
      },
      "describe-alarm-history": {
        "AlarmHistoryItems": [
          {
            "AlarmName": "<alarm-name:1>",
            "AlarmType": "MetricAlarm",
            "HistoryData": {
              "version": "1.0",
              "oldState": {
                "stateValue": "INSUFFICIENT_DATA",
                "stateReason": "Unchecked: Initial alarm creation"
              },
              "newState": {
                "stateValue": "ALARM",
                "stateReason": "Threshold Crossed: 1 datapoint [21.5 (MM/DD/YY HH:MM:SS)] was greater than the threshold (21.0).",
                "stateReasonData": {
                  "version": "1.0",
                  "queryDate": "date",
                  "startDate": "date",
                  "unit": "Seconds",
                  "statistic": "Average",
                  "period": 10,
                  "recentDatapoints": [
                    21.5
                  ],
                  "threshold": 21.0,
                  "evaluatedDatapoints": [
                    {
                      "timestamp": "date",
                      "sampleCount": 2.0,
                      "value": 21.5
                    }
                  ]
                }
              }
            },
            "HistoryItemType": "StateUpdate",
            "HistorySummary": "Alarm updated from INSUFFICIENT_DATA to ALARM",
            "Timestamp": "timestamp"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-alarms-for-metric": {
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "my-metric1",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "Threshold Crossed: 1 datapoint [21.5 (MM/DD/YY HH:MM:SS)] was greater than the threshold (21.0).",
            "StateReasonData": {
              "version": "1.0",
              "queryDate": "date",
              "startDate": "date",
              "unit": "Seconds",
              "statistic": "Average",
              "period": 10,
              "recentDatapoints": [
                21.5
              ],
              "threshold": 21.0,
              "evaluatedDatapoints": [
                {
                  "timestamp": "date",
                  "sampleCount": 2.0,
                  "value": 21.5
                }
              ]
            },
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "ALARM",
            "Statistic": "Average",
            "Threshold": 21.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_put_metric_alarm[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 21:09:02",
    "recorded-content": {
      "describe-alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "my-metric1",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Average",
            "Threshold": 21.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "alarm-triggered-sqs-msg": {
        "AWSAccountId": "111111111111",
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
        "AlarmConfigurationUpdatedTimestamp": "date",
        "AlarmDescription": "testing cloudwatch alarms",
        "AlarmName": "<alarm-name:1>",
        "InsufficientDataActions": [],
        "NewStateReason": "Threshold Crossed: 1 datapoint [21.5 (MM/DD/YY HH:MM:SS)] was greater than the threshold (21.0).",
        "NewStateValue": "ALARM",
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "OldStateValue": "INSUFFICIENT_DATA",
        "Region": "<region-name-full:1>",
        "StateChangeTime": "date",
        "Trigger": {
          "ComparisonOperator": "GreaterThanThreshold",
          "Dimensions": [
            {
              "name": "InstanceId",
              "value": "abc"
            }
          ],
          "EvaluateLowSampleCountPercentile": "",
          "EvaluationPeriods": 1,
          "MetricName": "my-metric1",
          "Namespace": "<namespace:1>",
          "Period": 10,
          "Statistic": "AVERAGE",
          "StatisticType": "Statistic",
          "Threshold": 21.0,
          "TreatMissingData": "ignore",
          "Unit": "Seconds"
        }
      },
      "describe-alarm-history": {
        "AlarmHistoryItems": [
          {
            "AlarmName": "<alarm-name:1>",
            "AlarmType": "MetricAlarm",
            "HistoryData": {
              "version": "1.0",
              "oldState": {
                "stateValue": "INSUFFICIENT_DATA",
                "stateReason": "Unchecked: Initial alarm creation"
              },
              "newState": {
                "stateValue": "ALARM",
                "stateReason": "Threshold Crossed: 1 datapoint [21.5 (MM/DD/YY HH:MM:SS)] was greater than the threshold (21.0).",
                "stateReasonData": {
                  "version": "1.0",
                  "queryDate": "date",
                  "startDate": "date",
                  "unit": "Seconds",
                  "statistic": "Average",
                  "period": 10,
                  "recentDatapoints": [
                    21.5
                  ],
                  "threshold": 21.0,
                  "evaluatedDatapoints": [
                    {
                      "timestamp": "date",
                      "sampleCount": 2.0,
                      "value": 21.5
                    }
                  ]
                }
              }
            },
            "HistoryItemType": "StateUpdate",
            "HistorySummary": "Alarm updated from INSUFFICIENT_DATA to ALARM",
            "Timestamp": "timestamp"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-alarms-for-metric": {
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "my-metric1",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "Threshold Crossed: 1 datapoint [21.5 (MM/DD/YY HH:MM:SS)] was greater than the threshold (21.0).",
            "StateReasonData": {
              "version": "1.0",
              "queryDate": "date",
              "startDate": "date",
              "unit": "Seconds",
              "statistic": "Average",
              "period": 10,
              "recentDatapoints": [
                21.5
              ],
              "threshold": 21.0,
              "evaluatedDatapoints": [
                {
                  "timestamp": "date",
                  "sampleCount": 2.0,
                  "value": 21.5
                }
              ]
            },
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "ALARM",
            "Statistic": "Average",
            "Threshold": 21.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_breaching_alarm_actions[query]": {
    "recorded-date": "19-09-2025, 21:11:41",
    "recorded-content": {
      "alarm-1-sqs-msg": {
        "AWSAccountId": "111111111111",
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
        "AlarmConfigurationUpdatedTimestamp": "date",
        "AlarmDescription": "testing cloudwatch alarms",
        "AlarmName": "<alarm-name:1>",
        "InsufficientDataActions": [],
        "NewStateReason": "Threshold Crossed: no datapoints were received for 2 periods and 2 missing datapoints were treated as [Breaching].",
        "NewStateValue": "ALARM",
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "OldStateValue": "INSUFFICIENT_DATA",
        "Region": "<region-name-full:1>",
        "StateChangeTime": "date",
        "Trigger": {
          "ComparisonOperator": "GreaterThanThreshold",
          "Dimensions": [
            {
              "name": "InstanceId",
              "value": "abc"
            }
          ],
          "EvaluateLowSampleCountPercentile": "",
          "EvaluationPeriods": 2,
          "MetricName": "my-metric101",
          "Namespace": "<namespace:1>",
          "Period": 10,
          "Statistic": "AVERAGE",
          "StatisticType": "Statistic",
          "Threshold": 2.0,
          "TreatMissingData": "breaching",
          "Unit": "Seconds"
        }
      },
      "alarm-1-describe": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "Threshold Crossed: no datapoints were received for 2 periods and 2 missing datapoints were treated as [Breaching].",
            "StateReasonData": {
              "version": "1.0",
              "queryDate": "date",
              "unit": "Seconds",
              "statistic": "Average",
              "period": 10,
              "recentDatapoints": [],
              "threshold": 2.0,
              "evaluatedDatapoints": [
                {
                  "timestamp": "date"
                },
                {
                  "timestamp": "date"
                }
              ]
            },
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "ALARM",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "breaching",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_breaching_alarm_actions[json]": {
    "recorded-date": "19-09-2025, 21:12:42",
    "recorded-content": {
      "alarm-1-sqs-msg": {
        "AWSAccountId": "111111111111",
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
        "AlarmConfigurationUpdatedTimestamp": "date",
        "AlarmDescription": "testing cloudwatch alarms",
        "AlarmName": "<alarm-name:1>",
        "InsufficientDataActions": [],
        "NewStateReason": "Threshold Crossed: no datapoints were received for 2 periods and 2 missing datapoints were treated as [Breaching].",
        "NewStateValue": "ALARM",
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "OldStateValue": "INSUFFICIENT_DATA",
        "Region": "<region-name-full:1>",
        "StateChangeTime": "date",
        "Trigger": {
          "ComparisonOperator": "GreaterThanThreshold",
          "Dimensions": [
            {
              "name": "InstanceId",
              "value": "abc"
            }
          ],
          "EvaluateLowSampleCountPercentile": "",
          "EvaluationPeriods": 2,
          "MetricName": "my-metric101",
          "Namespace": "<namespace:1>",
          "Period": 10,
          "Statistic": "AVERAGE",
          "StatisticType": "Statistic",
          "Threshold": 2.0,
          "TreatMissingData": "breaching",
          "Unit": "Seconds"
        }
      },
      "alarm-1-describe": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "Threshold Crossed: no datapoints were received for 2 periods and 2 missing datapoints were treated as [Breaching].",
            "StateReasonData": {
              "version": "1.0",
              "queryDate": "date",
              "unit": "Seconds",
              "statistic": "Average",
              "period": 10,
              "recentDatapoints": [],
              "threshold": 2.0,
              "evaluatedDatapoints": [
                {
                  "timestamp": "date"
                },
                {
                  "timestamp": "date"
                }
              ]
            },
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "ALARM",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "breaching",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_breaching_alarm_actions[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 21:13:17",
    "recorded-content": {
      "alarm-1-sqs-msg": {
        "AWSAccountId": "111111111111",
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
        "AlarmConfigurationUpdatedTimestamp": "date",
        "AlarmDescription": "testing cloudwatch alarms",
        "AlarmName": "<alarm-name:1>",
        "InsufficientDataActions": [],
        "NewStateReason": "Threshold Crossed: no datapoints were received for 2 periods and 2 missing datapoints were treated as [Breaching].",
        "NewStateValue": "ALARM",
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "OldStateValue": "INSUFFICIENT_DATA",
        "Region": "<region-name-full:1>",
        "StateChangeTime": "date",
        "Trigger": {
          "ComparisonOperator": "GreaterThanThreshold",
          "Dimensions": [
            {
              "name": "InstanceId",
              "value": "abc"
            }
          ],
          "EvaluateLowSampleCountPercentile": "",
          "EvaluationPeriods": 2,
          "MetricName": "my-metric101",
          "Namespace": "<namespace:1>",
          "Period": 10,
          "Statistic": "AVERAGE",
          "StatisticType": "Statistic",
          "Threshold": 2.0,
          "TreatMissingData": "breaching",
          "Unit": "Seconds"
        }
      },
      "alarm-1-describe": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "Threshold Crossed: no datapoints were received for 2 periods and 2 missing datapoints were treated as [Breaching].",
            "StateReasonData": {
              "version": "1.0",
              "queryDate": "date",
              "unit": "Seconds",
              "statistic": "Average",
              "period": 10,
              "recentDatapoints": [],
              "threshold": 2.0,
              "evaluatedDatapoints": [
                {
                  "timestamp": "date"
                },
                {
                  "timestamp": "date"
                }
              ]
            },
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "ALARM",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "breaching",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_enable_disable_alarm_actions[query]": {
    "recorded-date": "19-09-2025, 21:17:31",
    "recorded-content": {
      "describe_alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "alarm-state-sqs-msg": {
        "AWSAccountId": "111111111111",
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
        "AlarmConfigurationUpdatedTimestamp": "date",
        "AlarmDescription": "testing cloudwatch alarms",
        "AlarmName": "<alarm-name:1>",
        "InsufficientDataActions": [],
        "NewStateReason": "testing alarm",
        "NewStateValue": "ALARM",
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "OldStateValue": "INSUFFICIENT_DATA",
        "Region": "<region-name-full:1>",
        "StateChangeTime": "date",
        "Trigger": {
          "ComparisonOperator": "GreaterThanThreshold",
          "Dimensions": [
            {
              "name": "InstanceId",
              "value": "abc"
            }
          ],
          "EvaluateLowSampleCountPercentile": "",
          "EvaluationPeriods": 2,
          "MetricName": "my-metric101",
          "Namespace": "<namespace:1>",
          "Period": 10,
          "Statistic": "AVERAGE",
          "StatisticType": "Statistic",
          "Threshold": 2.0,
          "TreatMissingData": "ignore",
          "Unit": "Seconds"
        }
      },
      "alarm-state-describe": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "testing alarm",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "ALARM",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_alarm_disabled": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": false,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "testing OK state",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "OK",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "ok-state-action-disabled-describe": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": false,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "testing OK state",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "OK",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_alarm_enabled": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "testing OK state",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "OK",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_enable_disable_alarm_actions[json]": {
    "recorded-date": "19-09-2025, 21:17:46",
    "recorded-content": {
      "describe_alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "alarm-state-sqs-msg": {
        "AWSAccountId": "111111111111",
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
        "AlarmConfigurationUpdatedTimestamp": "date",
        "AlarmDescription": "testing cloudwatch alarms",
        "AlarmName": "<alarm-name:1>",
        "InsufficientDataActions": [],
        "NewStateReason": "testing alarm",
        "NewStateValue": "ALARM",
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "OldStateValue": "INSUFFICIENT_DATA",
        "Region": "<region-name-full:1>",
        "StateChangeTime": "date",
        "Trigger": {
          "ComparisonOperator": "GreaterThanThreshold",
          "Dimensions": [
            {
              "name": "InstanceId",
              "value": "abc"
            }
          ],
          "EvaluateLowSampleCountPercentile": "",
          "EvaluationPeriods": 2,
          "MetricName": "my-metric101",
          "Namespace": "<namespace:1>",
          "Period": 10,
          "Statistic": "AVERAGE",
          "StatisticType": "Statistic",
          "Threshold": 2.0,
          "TreatMissingData": "ignore",
          "Unit": "Seconds"
        }
      },
      "alarm-state-describe": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "testing alarm",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "ALARM",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_alarm_disabled": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": false,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "testing OK state",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "OK",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "ok-state-action-disabled-describe": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": false,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "testing OK state",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "OK",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_alarm_enabled": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "testing OK state",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "OK",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_enable_disable_alarm_actions[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 21:18:00",
    "recorded-content": {
      "describe_alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "alarm-state-sqs-msg": {
        "AWSAccountId": "111111111111",
        "AlarmActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
        "AlarmConfigurationUpdatedTimestamp": "date",
        "AlarmDescription": "testing cloudwatch alarms",
        "AlarmName": "<alarm-name:1>",
        "InsufficientDataActions": [],
        "NewStateReason": "testing alarm",
        "NewStateValue": "ALARM",
        "OKActions": [
          "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
        ],
        "OldStateValue": "INSUFFICIENT_DATA",
        "Region": "<region-name-full:1>",
        "StateChangeTime": "date",
        "Trigger": {
          "ComparisonOperator": "GreaterThanThreshold",
          "Dimensions": [
            {
              "name": "InstanceId",
              "value": "abc"
            }
          ],
          "EvaluateLowSampleCountPercentile": "",
          "EvaluationPeriods": 2,
          "MetricName": "my-metric101",
          "Namespace": "<namespace:1>",
          "Period": 10,
          "Statistic": "AVERAGE",
          "StatisticType": "Statistic",
          "Threshold": 2.0,
          "TreatMissingData": "ignore",
          "Unit": "Seconds"
        }
      },
      "alarm-state-describe": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "testing alarm",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "ALARM",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_alarm_disabled": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": false,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "testing OK state",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "OK",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "ok-state-action-disabled-describe": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": false,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "testing OK state",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "OK",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_alarm_enabled": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "testing cloudwatch alarms",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "abc"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "my-metric101",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_arn>"
            ],
            "Period": 10,
            "StateReason": "testing OK state",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "OK",
            "Statistic": "Average",
            "Threshold": 2.0,
            "TreatMissingData": "ignore",
            "Unit": "Seconds"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_aws_sqs_metrics_created[query]": {
    "recorded-date": "19-09-2025, 21:27:01",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "sent",
            "Label": "NumberOfMessagesSent",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          },
          {
            "Id": "sent_size",
            "Label": "SentMessageSize",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              5.0
            ]
          },
          {
            "Id": "empty_receives",
            "Label": "NumberOfEmptyReceives",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_metric_data_2": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "num_msg_received",
            "Label": "NumberOfMessagesReceived",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          },
          {
            "Id": "num_msg_deleted",
            "Label": "NumberOfMessagesDeleted",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_aws_sqs_metrics_created[json]": {
    "recorded-date": "19-09-2025, 21:29:00",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "sent",
            "Label": "NumberOfMessagesSent",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          },
          {
            "Id": "sent_size",
            "Label": "SentMessageSize",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              5.0
            ]
          },
          {
            "Id": "empty_receives",
            "Label": "NumberOfEmptyReceives",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_metric_data_2": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "num_msg_received",
            "Label": "NumberOfMessagesReceived",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          },
          {
            "Id": "num_msg_deleted",
            "Label": "NumberOfMessagesDeleted",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_aws_sqs_metrics_created[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 21:31:00",
    "recorded-content": {
      "get_metric_data": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "sent",
            "Label": "NumberOfMessagesSent",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          },
          {
            "Id": "sent_size",
            "Label": "SentMessageSize",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              5.0
            ]
          },
          {
            "Id": "empty_receives",
            "Label": "NumberOfEmptyReceives",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_metric_data_2": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "num_msg_received",
            "Label": "NumberOfMessagesReceived",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          },
          {
            "Id": "num_msg_deleted",
            "Label": "NumberOfMessagesDeleted",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_invalid_dashboard_name[query]": {
    "recorded-date": "19-09-2025, 21:32:13",
    "recorded-content": {
      "error-invalid-dashboardname": {
        "Error": {
          "Code": "InvalidParameterValue",
          "Message": "The value for field DashboardName contains invalid characters. It can only contain alphanumerics, dash (-) and underscore (_).\n",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_invalid_dashboard_name[json]": {
    "recorded-date": "19-09-2025, 21:32:13",
    "recorded-content": {
      "error-invalid-dashboardname": {
        "Error": {
          "Code": "InvalidParameterValue",
          "Message": "The value for field DashboardName contains invalid characters. It can only contain alphanumerics, dash (-) and underscore (_).\n",
          "QueryErrorCode": "InvalidParameterValueException",
          "Type": "Sender"
        },
        "message": "The value for field DashboardName contains invalid characters. It can only contain alphanumerics, dash (-) and underscore (_).\n",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_invalid_dashboard_name[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 21:32:13",
    "recorded-content": {
      "error-invalid-dashboardname": {
        "Error": {
          "Code": "InvalidParameterValue",
          "Message": "The value for field DashboardName contains invalid characters. It can only contain alphanumerics, dash (-) and underscore (_).\n",
          "QueryErrorCode": "InvalidParameterValueException",
          "Type": "Sender"
        },
        "message": "The value for field DashboardName contains invalid characters. It can only contain alphanumerics, dash (-) and underscore (_).\n",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_dashboard_lifecycle[query]": {
    "recorded-date": "19-09-2025, 21:32:55",
    "recorded-content": {
      "get_dashboard": {
        "DashboardArn": "arn:<partition>:cloudwatch::111111111111:dashboard/<dashboard-name:1>",
        "DashboardBody": {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [
                    "AWS/EC2",
                    "CPUUtilization",
                    "InstanceId",
                    "i-12345678"
                  ]
                ],
                "region": "<region>",
                "view": "timeSeries",
                "stacked": false
              }
            }
          ]
        },
        "DashboardName": "<dashboard-name:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_dashboards": {
        "DashboardEntries": [
          {
            "DashboardArn": "arn:<partition>:cloudwatch::111111111111:dashboard/<dashboard-name:1>",
            "DashboardName": "<dashboard-name:1>",
            "LastModified": "datetime",
            "Size": 240
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_dashboards_prefix_empty": {
        "DashboardEntries": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_dashboards_prefix": {
        "DashboardEntries": [
          {
            "DashboardArn": "arn:<partition>:cloudwatch::111111111111:dashboard/<dashboard-name:1>",
            "DashboardName": "<dashboard-name:1>",
            "LastModified": "datetime",
            "Size": 240
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_dashboards_empty": {
        "DashboardEntries": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_dashboard_lifecycle[json]": {
    "recorded-date": "19-09-2025, 21:32:56",
    "recorded-content": {
      "get_dashboard": {
        "DashboardArn": "arn:<partition>:cloudwatch::111111111111:dashboard/<dashboard-name:1>",
        "DashboardBody": {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [
                    "AWS/EC2",
                    "CPUUtilization",
                    "InstanceId",
                    "i-12345678"
                  ]
                ],
                "region": "<region>",
                "view": "timeSeries",
                "stacked": false
              }
            }
          ]
        },
        "DashboardName": "<dashboard-name:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_dashboards": {
        "DashboardEntries": [
          {
            "DashboardArn": "arn:<partition>:cloudwatch::111111111111:dashboard/<dashboard-name:1>",
            "DashboardName": "<dashboard-name:1>",
            "LastModified": "datetime",
            "Size": 240
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_dashboards_prefix_empty": {
        "DashboardEntries": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_dashboards_prefix": {
        "DashboardEntries": [
          {
            "DashboardArn": "arn:<partition>:cloudwatch::111111111111:dashboard/<dashboard-name:1>",
            "DashboardName": "<dashboard-name:1>",
            "LastModified": "datetime",
            "Size": 240
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_dashboards_empty": {
        "DashboardEntries": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_dashboard_lifecycle[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 21:32:58",
    "recorded-content": {
      "get_dashboard": {
        "DashboardArn": "arn:<partition>:cloudwatch::111111111111:dashboard/<dashboard-name:1>",
        "DashboardBody": {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 6,
              "height": 6,
              "properties": {
                "metrics": [
                  [
                    "AWS/EC2",
                    "CPUUtilization",
                    "InstanceId",
                    "i-12345678"
                  ]
                ],
                "region": "<region>",
                "view": "timeSeries",
                "stacked": false
              }
            }
          ]
        },
        "DashboardName": "<dashboard-name:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_dashboards": {
        "DashboardEntries": [
          {
            "DashboardArn": "arn:<partition>:cloudwatch::111111111111:dashboard/<dashboard-name:1>",
            "DashboardName": "<dashboard-name:1>",
            "LastModified": "datetime",
            "Size": 240
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_dashboards_prefix_empty": {
        "DashboardEntries": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_dashboards_prefix": {
        "DashboardEntries": [
          {
            "DashboardArn": "arn:<partition>:cloudwatch::111111111111:dashboard/<dashboard-name:1>",
            "DashboardName": "<dashboard-name:1>",
            "LastModified": "datetime",
            "Size": 240
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_dashboards_empty": {
        "DashboardEntries": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_create_metric_stream[query]": {
    "recorded-date": "19-09-2025, 21:35:54",
    "recorded-content": {
      "create_metric_stream": {
        "Arn": "arn:<partition>:cloudwatch:<region>:111111111111:metric-stream/<name:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_metric_stream": {
        "Arn": "arn:<partition>:cloudwatch:<region>:111111111111:metric-stream/<name:1>",
        "CreationDate": "datetime",
        "FirehoseArn": "<firehose-arn:1>",
        "IncludeLinkedAccountsMetrics": false,
        "LastUpdateDate": "datetime",
        "Name": "<name:1>",
        "OutputFormat": "json",
        "RoleArn": "<role-arn:1>",
        "State": "running",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "start_metric_stream": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "stop_metric_stream": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete_metric_stream": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_create_metric_stream[json]": {
    "recorded-date": "19-09-2025, 21:39:06",
    "recorded-content": {
      "create_metric_stream": {
        "Arn": "arn:<partition>:cloudwatch:<region>:111111111111:metric-stream/<name:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_metric_stream": {
        "Arn": "arn:<partition>:cloudwatch:<region>:111111111111:metric-stream/<name:1>",
        "CreationDate": "datetime",
        "FirehoseArn": "<firehose-arn:1>",
        "IncludeLinkedAccountsMetrics": false,
        "LastUpdateDate": "datetime",
        "Name": "<name:1>",
        "OutputFormat": "json",
        "RoleArn": "<role-arn:1>",
        "State": "running",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "start_metric_stream": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "stop_metric_stream": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete_metric_stream": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_create_metric_stream[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 21:41:37",
    "recorded-content": {
      "create_metric_stream": {
        "Arn": "arn:<partition>:cloudwatch:<region>:111111111111:metric-stream/<name:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_metric_stream": {
        "Arn": "arn:<partition>:cloudwatch:<region>:111111111111:metric-stream/<name:1>",
        "CreationDate": "datetime",
        "FirehoseArn": "<firehose-arn:1>",
        "IncludeLinkedAccountsMetrics": false,
        "LastUpdateDate": "datetime",
        "Name": "<name:1>",
        "OutputFormat": "json",
        "RoleArn": "<role-arn:1>",
        "State": "running",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "start_metric_stream": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "stop_metric_stream": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete_metric_stream": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_insight_rule[query]": {
    "recorded-date": "19-09-2025, 21:45:12",
    "recorded-content": {
      "create_insight_rule": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_insight_rule": {
        "InsightRules": [
          {
            "ApplyOnTransformedLogs": false,
            "Definition": {
              "Schema": {
                "Name": "<name:1>",
                "Version": 1
              },
              "LogGroupNames": [
                "API-Gateway-Access-Logs*"
              ],
              "LogFormat": "CLF",
              "Fields": {
                "4": "IpAddress",
                "7": "StatusCode"
              },
              "Contribution": {
                "Keys": [
                  "IpAddress"
                ],
                "Filters": [
                  {
                    "Match": "StatusCode",
                    "EqualTo": 200
                  }
                ]
              },
              "AggregateOn": "Count"
            },
            "ManagedRule": false,
            "Name": "<name:2>",
            "Schema": "<name:1>/1",
            "State": "ENABLED"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "disable_insight_rule": {
        "Failures": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "enable_insight_rule": {
        "Failures": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_insight_rule_report": {
        "AggregateValue": 0.0,
        "AggregationStatistic": "SampleCount",
        "ApproximateUniqueCount": 0,
        "Contributors": [],
        "KeyLabels": [
          "IpAddress"
        ],
        "MetricDatapoints": [
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete_insight_rule": {
        "Failures": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_insight_rule[json]": {
    "recorded-date": "19-09-2025, 21:45:14",
    "recorded-content": {
      "create_insight_rule": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_insight_rule": {
        "InsightRules": [
          {
            "ApplyOnTransformedLogs": false,
            "Definition": {
              "Schema": {
                "Name": "<name:1>",
                "Version": 1
              },
              "LogGroupNames": [
                "API-Gateway-Access-Logs*"
              ],
              "LogFormat": "CLF",
              "Fields": {
                "4": "IpAddress",
                "7": "StatusCode"
              },
              "Contribution": {
                "Keys": [
                  "IpAddress"
                ],
                "Filters": [
                  {
                    "Match": "StatusCode",
                    "EqualTo": 200
                  }
                ]
              },
              "AggregateOn": "Count"
            },
            "ManagedRule": false,
            "Name": "<name:2>",
            "Schema": "<name:1>/1",
            "State": "ENABLED"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "disable_insight_rule": {
        "Failures": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "enable_insight_rule": {
        "Failures": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_insight_rule_report": {
        "AggregateValue": 0.0,
        "AggregationStatistic": "SampleCount",
        "ApproximateUniqueCount": 0,
        "Contributors": [],
        "KeyLabels": [
          "IpAddress"
        ],
        "MetricDatapoints": [
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete_insight_rule": {
        "Failures": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_insight_rule[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 21:45:15",
    "recorded-content": {
      "create_insight_rule": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_insight_rule": {
        "InsightRules": [
          {
            "ApplyOnTransformedLogs": false,
            "Definition": {
              "Schema": {
                "Name": "<name:1>",
                "Version": 1
              },
              "LogGroupNames": [
                "API-Gateway-Access-Logs*"
              ],
              "LogFormat": "CLF",
              "Fields": {
                "4": "IpAddress",
                "7": "StatusCode"
              },
              "Contribution": {
                "Keys": [
                  "IpAddress"
                ],
                "Filters": [
                  {
                    "Match": "StatusCode",
                    "EqualTo": 200
                  }
                ]
              },
              "AggregateOn": "Count"
            },
            "ManagedRule": false,
            "Name": "<name:2>",
            "Schema": "<name:1>/1",
            "State": "ENABLED"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "disable_insight_rule": {
        "Failures": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "enable_insight_rule": {
        "Failures": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_insight_rule_report": {
        "AggregateValue": 0.0,
        "AggregationStatistic": "SampleCount",
        "ApproximateUniqueCount": 0,
        "Contributors": [],
        "KeyLabels": [
          "IpAddress"
        ],
        "MetricDatapoints": [
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          },
          {
            "Timestamp": "timestamp",
            "UniqueContributors": 0.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete_insight_rule": {
        "Failures": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_anomaly_detector_lifecycle[query]": {
    "recorded-date": "19-09-2025, 21:45:48",
    "recorded-content": {
      "create_anomaly_detector": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_anomaly_detector": {
        "AnomalyDetectors": [
          {
            "Configuration": {
              "ExcludedTimeRanges": []
            },
            "Dimensions": [
              {
                "Name": "DimensionName",
                "Value": "DimensionValue"
              }
            ],
            "MetricName": "MyMetric",
            "Namespace": "MyNamespace",
            "SingleMetricAnomalyDetector": {
              "AccountId": "111111111111",
              "Dimensions": [
                {
                  "Name": "DimensionName",
                  "Value": "DimensionValue"
                }
              ],
              "MetricName": "MyMetric",
              "Namespace": "MyNamespace",
              "Stat": "Sum"
            },
            "Stat": "Sum",
            "StateValue": "PENDING_TRAINING"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete_anomaly_detector": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_anomaly_detector_lifecycle[json]": {
    "recorded-date": "19-09-2025, 21:45:48",
    "recorded-content": {
      "create_anomaly_detector": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_anomaly_detector": {
        "AnomalyDetectors": [
          {
            "Configuration": {
              "ExcludedTimeRanges": []
            },
            "Dimensions": [
              {
                "Name": "DimensionName",
                "Value": "DimensionValue"
              }
            ],
            "MetricName": "MyMetric",
            "Namespace": "MyNamespace",
            "SingleMetricAnomalyDetector": {
              "AccountId": "111111111111",
              "Dimensions": [
                {
                  "Name": "DimensionName",
                  "Value": "DimensionValue"
                }
              ],
              "MetricName": "MyMetric",
              "Namespace": "MyNamespace",
              "Stat": "Sum"
            },
            "Stat": "Sum",
            "StateValue": "PENDING_TRAINING"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete_anomaly_detector": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_anomaly_detector_lifecycle[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 21:45:48",
    "recorded-content": {
      "create_anomaly_detector": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_anomaly_detector": {
        "AnomalyDetectors": [
          {
            "Configuration": {
              "ExcludedTimeRanges": []
            },
            "Dimensions": [
              {
                "Name": "DimensionName",
                "Value": "DimensionValue"
              }
            ],
            "MetricName": "MyMetric",
            "Namespace": "MyNamespace",
            "SingleMetricAnomalyDetector": {
              "AccountId": "111111111111",
              "Dimensions": [
                {
                  "Name": "DimensionName",
                  "Value": "DimensionValue"
                }
              ],
              "MetricName": "MyMetric",
              "Namespace": "MyNamespace",
              "Stat": "Sum"
            },
            "Stat": "Sum",
            "StateValue": "PENDING_TRAINING"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete_anomaly_detector": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_describe_minimal_metric_alarm[query]": {
    "recorded-date": "19-09-2025, 21:47:20",
    "recorded-content": {
      "describe_minimal_metric_alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "<metric-name:1>",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 10,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 30.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_describe_minimal_metric_alarm[json]": {
    "recorded-date": "19-09-2025, 21:47:20",
    "recorded-content": {
      "describe_minimal_metric_alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "<metric-name:1>",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 10,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 30.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_describe_minimal_metric_alarm[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 21:47:21",
    "recorded-content": {
      "describe_minimal_metric_alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "<metric-name:1>",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 10,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 30.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_with_zero_and_labels[query]": {
    "recorded-date": "19-09-2025, 22:46:59",
    "recorded-content": {
      "get_metric_data_with_zero_and_labels": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Average",
            "Label": "metric1 Average",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              19.416666666666668
            ]
          },
          {
            "Id": "result_Sum",
            "Label": "metric1 Sum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              116.5
            ]
          },
          {
            "Id": "result_Minimum",
            "Label": "metric1 Minimum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              0.0
            ]
          },
          {
            "Id": "result_Maximum",
            "Label": "metric1 Maximum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              100.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_with_zero_and_labels[json]": {
    "recorded-date": "19-09-2025, 22:47:00",
    "recorded-content": {
      "get_metric_data_with_zero_and_labels": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Average",
            "Label": "metric1 Average",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              19.416666666666668
            ]
          },
          {
            "Id": "result_Sum",
            "Label": "metric1 Sum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              116.5
            ]
          },
          {
            "Id": "result_Minimum",
            "Label": "metric1 Minimum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              0.0
            ]
          },
          {
            "Id": "result_Maximum",
            "Label": "metric1 Maximum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              100.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_with_zero_and_labels[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 22:47:02",
    "recorded-content": {
      "get_metric_data_with_zero_and_labels": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Average",
            "Label": "metric1 Average",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              19.416666666666668
            ]
          },
          {
            "Id": "result_Sum",
            "Label": "metric1 Sum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              116.5
            ]
          },
          {
            "Id": "result_Minimum",
            "Label": "metric1 Minimum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              0.0
            ]
          },
          {
            "Id": "result_Maximum",
            "Label": "metric1 Maximum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              100.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_statistics[query]": {
    "recorded-date": "19-09-2025, 22:47:57",
    "recorded-content": {
      "get_metric_statistics": {
        "Datapoints": [
          {
            "Average": 4.5,
            "Maximum": 9.0,
            "Minimum": 0.0,
            "SampleCount": 10.0,
            "Sum": 45.0,
            "Timestamp": "timestamp",
            "Unit": "None"
          }
        ],
        "Label": "metric",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_statistics[json]": {
    "recorded-date": "19-09-2025, 22:48:01",
    "recorded-content": {
      "get_metric_statistics": {
        "Datapoints": [
          {
            "Average": 4.5,
            "Maximum": 9.0,
            "Minimum": 0.0,
            "SampleCount": 10.0,
            "Sum": 45.0,
            "Timestamp": "timestamp",
            "Unit": "None"
          }
        ],
        "Label": "metric",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_statistics[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 22:48:04",
    "recorded-content": {
      "get_metric_statistics": {
        "Datapoints": [
          {
            "Average": 4.5,
            "Maximum": 9.0,
            "Minimum": 0.0,
            "SampleCount": 10.0,
            "Sum": 45.0,
            "Timestamp": "timestamp",
            "Unit": "None"
          }
        ],
        "Label": "metric",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_handle_different_units[query]": {
    "recorded-date": "19-09-2025, 22:56:18",
    "recorded-content": {
      "get_metric_statistics_with_different_units": {
        "Datapoints": [
          {
            "Average": 10.0,
            "Timestamp": "timestamp",
            "Unit": "None"
          },
          {
            "Average": 5.0,
            "Timestamp": "timestamp",
            "Unit": "Count"
          },
          {
            "Average": 1.0,
            "Timestamp": "timestamp",
            "Unit": "Seconds"
          }
        ],
        "Label": "m-test",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_handle_different_units[json]": {
    "recorded-date": "19-09-2025, 22:56:20",
    "recorded-content": {
      "get_metric_statistics_with_different_units": {
        "Datapoints": [
          {
            "Average": 10.0,
            "Timestamp": "timestamp",
            "Unit": "None"
          },
          {
            "Average": 5.0,
            "Timestamp": "timestamp",
            "Unit": "Count"
          },
          {
            "Average": 1.0,
            "Timestamp": "timestamp",
            "Unit": "Seconds"
          }
        ],
        "Label": "m-test",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_handle_different_units[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 22:56:22",
    "recorded-content": {
      "get_metric_statistics_with_different_units": {
        "Datapoints": [
          {
            "Average": 10.0,
            "Timestamp": "timestamp",
            "Unit": "None"
          },
          {
            "Average": 5.0,
            "Timestamp": "timestamp",
            "Unit": "Count"
          },
          {
            "Average": 1.0,
            "Timestamp": "timestamp",
            "Unit": "Seconds"
          }
        ],
        "Label": "m-test",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_with_different_units[query]": {
    "recorded-date": "19-09-2025, 22:57:24",
    "recorded-content": {
      "get_metric_data_with_different_units": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "m1",
            "Label": "m-test",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_with_different_units[json]": {
    "recorded-date": "19-09-2025, 22:57:26",
    "recorded-content": {
      "get_metric_data_with_different_units": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "m1",
            "Label": "m-test",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_with_different_units[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 22:57:28",
    "recorded-content": {
      "get_metric_data_with_different_units": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "m1",
            "Label": "m-test",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              1.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_different_units_no_unit_in_query[query-metric_data0]": {
    "recorded-date": "19-09-2025, 22:59:13",
    "recorded-content": {
      "get_metric_data_with_no_unit_specified": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "m1",
            "Label": "m-test",
            "Messages": [
              {
                "Code": "MultipleUnits",
                "Value": "Multiple units returned: '[Milliseconds, Seconds]'"
              }
            ],
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              60000.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_different_units_no_unit_in_query[query-metric_data1]": {
    "recorded-date": "19-09-2025, 22:59:15",
    "recorded-content": {
      "get_metric_data_with_no_unit_specified": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "m1",
            "Label": "m-test",
            "Messages": [
              {
                "Code": "MultipleUnits",
                "Value": "Multiple units returned: '[Milliseconds, Seconds]'"
              }
            ],
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              120000.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_different_units_no_unit_in_query[query-metric_data2]": {
    "recorded-date": "19-09-2025, 22:59:17",
    "recorded-content": {
      "get_metric_data_with_no_unit_specified": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "m1",
            "Label": "m-test",
            "Messages": [
              {
                "Code": "MultipleUnits",
                "Value": "Multiple units returned: '[Count, Milliseconds, Seconds]'"
              }
            ],
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              5.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_different_units_no_unit_in_query[json-metric_data0]": {
    "recorded-date": "19-09-2025, 22:59:20",
    "recorded-content": {
      "get_metric_data_with_no_unit_specified": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "m1",
            "Label": "m-test",
            "Messages": [
              {
                "Code": "MultipleUnits",
                "Value": "Multiple units returned: '[Milliseconds, Seconds]'"
              }
            ],
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              60000.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_different_units_no_unit_in_query[json-metric_data1]": {
    "recorded-date": "19-09-2025, 22:59:22",
    "recorded-content": {
      "get_metric_data_with_no_unit_specified": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "m1",
            "Label": "m-test",
            "Messages": [
              {
                "Code": "MultipleUnits",
                "Value": "Multiple units returned: '[Milliseconds, Seconds]'"
              }
            ],
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              120000.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_different_units_no_unit_in_query[json-metric_data2]": {
    "recorded-date": "19-09-2025, 22:59:24",
    "recorded-content": {
      "get_metric_data_with_no_unit_specified": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "m1",
            "Label": "m-test",
            "Messages": [
              {
                "Code": "MultipleUnits",
                "Value": "Multiple units returned: '[Count, Milliseconds, Seconds]'"
              }
            ],
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              5.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_different_units_no_unit_in_query[smithy-rpc-v2-cbor-metric_data0]": {
    "recorded-date": "19-09-2025, 22:59:27",
    "recorded-content": {
      "get_metric_data_with_no_unit_specified": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "m1",
            "Label": "m-test",
            "Messages": [
              {
                "Code": "MultipleUnits",
                "Value": "Multiple units returned: '[Milliseconds, Seconds]'"
              }
            ],
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              60000.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_different_units_no_unit_in_query[smithy-rpc-v2-cbor-metric_data1]": {
    "recorded-date": "19-09-2025, 22:59:29",
    "recorded-content": {
      "get_metric_data_with_no_unit_specified": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "m1",
            "Label": "m-test",
            "Messages": [
              {
                "Code": "MultipleUnits",
                "Value": "Multiple units returned: '[Milliseconds, Seconds]'"
              }
            ],
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              120000.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_data_different_units_no_unit_in_query[smithy-rpc-v2-cbor-metric_data2]": {
    "recorded-date": "19-09-2025, 22:59:31",
    "recorded-content": {
      "get_metric_data_with_no_unit_specified": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "m1",
            "Label": "m-test",
            "Messages": [
              {
                "Code": "MultipleUnits",
                "Value": "Multiple units returned: '[Count, Milliseconds, Seconds]'"
              }
            ],
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              5.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[query-input_pairs0]": {
    "recorded-date": "19-09-2025, 23:00:36",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 Sum 60",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Minimum_30_Seconds",
            "Label": "metric1 Minimum 30",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              0.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[query-input_pairs1]": {
    "recorded-date": "19-09-2025, 23:00:37",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 Sum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Minimum_60_Seconds",
            "Label": "metric1 Minimum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              0.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[query-input_pairs2]": {
    "recorded-date": "19-09-2025, 23:00:39",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 60",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Sum_30_Seconds",
            "Label": "metric1 30",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[query-input_pairs3]": {
    "recorded-date": "19-09-2025, 23:00:40",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 Sum 60",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Minimum_30_Milliseconds",
            "Label": "metric1 Minimum 30",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[query-input_pairs4]": {
    "recorded-date": "19-09-2025, 23:00:42",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 Sum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Minimum_60_Milliseconds",
            "Label": "metric1 Minimum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[query-input_pairs5]": {
    "recorded-date": "19-09-2025, 23:00:44",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 60",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Sum_30_Milliseconds",
            "Label": "metric1 30",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[query-input_pairs6]": {
    "recorded-date": "19-09-2025, 23:00:45",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Sum_60_Milliseconds",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[json-input_pairs0]": {
    "recorded-date": "19-09-2025, 23:00:46",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 Sum 60",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Minimum_30_Seconds",
            "Label": "metric1 Minimum 30",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              0.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[json-input_pairs1]": {
    "recorded-date": "19-09-2025, 23:00:47",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 Sum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Minimum_60_Seconds",
            "Label": "metric1 Minimum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              0.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[json-input_pairs2]": {
    "recorded-date": "19-09-2025, 23:00:49",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 60",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Sum_30_Seconds",
            "Label": "metric1 30",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[json-input_pairs3]": {
    "recorded-date": "19-09-2025, 23:00:50",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 Sum 60",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Minimum_30_Milliseconds",
            "Label": "metric1 Minimum 30",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[json-input_pairs4]": {
    "recorded-date": "19-09-2025, 23:00:52",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 Sum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Minimum_60_Milliseconds",
            "Label": "metric1 Minimum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[json-input_pairs5]": {
    "recorded-date": "19-09-2025, 23:00:53",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 60",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Sum_30_Milliseconds",
            "Label": "metric1 30",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[json-input_pairs6]": {
    "recorded-date": "19-09-2025, 23:00:55",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Sum_60_Milliseconds",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[smithy-rpc-v2-cbor-input_pairs0]": {
    "recorded-date": "19-09-2025, 23:00:56",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 Sum 60",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Minimum_30_Seconds",
            "Label": "metric1 Minimum 30",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              0.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[smithy-rpc-v2-cbor-input_pairs1]": {
    "recorded-date": "19-09-2025, 23:00:58",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 Sum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Minimum_60_Seconds",
            "Label": "metric1 Minimum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              0.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[smithy-rpc-v2-cbor-input_pairs2]": {
    "recorded-date": "19-09-2025, 23:00:59",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 60",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Sum_30_Seconds",
            "Label": "metric1 30",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[smithy-rpc-v2-cbor-input_pairs3]": {
    "recorded-date": "19-09-2025, 23:01:01",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 Sum 60",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Minimum_30_Milliseconds",
            "Label": "metric1 Minimum 30",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[smithy-rpc-v2-cbor-input_pairs4]": {
    "recorded-date": "19-09-2025, 23:01:02",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 Sum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Minimum_60_Milliseconds",
            "Label": "metric1 Minimum",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[smithy-rpc-v2-cbor-input_pairs5]": {
    "recorded-date": "19-09-2025, 23:01:03",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1 60",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Sum_30_Milliseconds",
            "Label": "metric1 30",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_label_generation[smithy-rpc-v2-cbor-input_pairs6]": {
    "recorded-date": "19-09-2025, 23:01:05",
    "recorded-content": {
      "label_generation": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result_Sum_60_Seconds",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              109.0
            ]
          },
          {
            "Id": "result_Sum_60_Milliseconds",
            "Label": "metric1",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_with_null_dimensions[query]": {
    "recorded-date": "19-09-2025, 23:02:11",
    "recorded-content": {
      "get_metric_with_null_dimensions": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "<id:1>",
            "Label": "<label:1>",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_with_null_dimensions[json]": {
    "recorded-date": "19-09-2025, 23:02:13",
    "recorded-content": {
      "get_metric_with_null_dimensions": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "<id:1>",
            "Label": "<label:1>",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_with_null_dimensions[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 23:02:15",
    "recorded-content": {
      "get_metric_with_null_dimensions": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "<id:1>",
            "Label": "<label:1>",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_with_no_results[query]": {
    "recorded-date": "19-09-2025, 23:04:56",
    "recorded-content": {
      "result": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result",
            "Label": "<label:1>",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_with_no_results[json]": {
    "recorded-date": "19-09-2025, 23:05:05",
    "recorded-content": {
      "result": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result",
            "Label": "<label:1>",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_get_metric_with_no_results[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 23:05:13",
    "recorded-content": {
      "result": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result",
            "Label": "<label:1>",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": []
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_delete_alarm[query]": {
    "recorded-date": "19-09-2025, 23:06:53",
    "recorded-content": {
      "describe-alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "metric1",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 60,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 30.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-alarm": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-after-delete": {
        "CompositeAlarms": [],
        "MetricAlarms": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_delete_alarm[json]": {
    "recorded-date": "19-09-2025, 23:06:54",
    "recorded-content": {
      "describe-alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "metric1",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 60,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 30.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-alarm": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-after-delete": {
        "CompositeAlarms": [],
        "MetricAlarms": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_delete_alarm[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 23:06:55",
    "recorded-content": {
      "describe-alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [],
            "EvaluationPeriods": 1,
            "InsufficientDataActions": [],
            "MetricName": "metric1",
            "Namespace": "<namespace:1>",
            "OKActions": [],
            "Period": 60,
            "StateReason": "Unchecked: Initial alarm creation",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "INSUFFICIENT_DATA",
            "Statistic": "Sum",
            "Threshold": 30.0
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-alarm": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-after-delete": {
        "CompositeAlarms": [],
        "MetricAlarms": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_multiple_dimensions_statistics[query]": {
    "recorded-date": "19-09-2025, 23:07:39",
    "recorded-content": {
      "get-metric-stats-max": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "http.server.requests.count",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              5.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-metrics": {
        "Metrics": [
          {
            "Dimensions": [
              {
                "Name": "error",
                "Value": "none"
              },
              {
                "Name": "exception",
                "Value": "none"
              },
              {
                "Name": "method",
                "Value": "GET"
              },
              {
                "Name": "outcome",
                "Value": "SUCCESS"
              },
              {
                "Name": "status",
                "Value": "200"
              },
              {
                "Name": "uri",
                "Value": "/greetings"
              }
            ],
            "MetricName": "http.server.requests.count",
            "Namespace": "<namespace:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_multiple_dimensions_statistics[json]": {
    "recorded-date": "19-09-2025, 23:07:47",
    "recorded-content": {
      "get-metric-stats-max": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "http.server.requests.count",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              5.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-metrics": {
        "Metrics": [
          {
            "Dimensions": [
              {
                "Name": "error",
                "Value": "none"
              },
              {
                "Name": "exception",
                "Value": "none"
              },
              {
                "Name": "method",
                "Value": "GET"
              },
              {
                "Name": "outcome",
                "Value": "SUCCESS"
              },
              {
                "Name": "status",
                "Value": "200"
              },
              {
                "Name": "uri",
                "Value": "/greetings"
              }
            ],
            "MetricName": "http.server.requests.count",
            "Namespace": "<namespace:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_multiple_dimensions_statistics[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 23:07:59",
    "recorded-content": {
      "get-metric-stats-max": {
        "Messages": [],
        "MetricDataResults": [
          {
            "Id": "result1",
            "Label": "http.server.requests.count",
            "StatusCode": "Complete",
            "Timestamps": "timestamp",
            "Values": [
              5.0
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-metrics": {
        "Metrics": [
          {
            "Dimensions": [
              {
                "Name": "error",
                "Value": "none"
              },
              {
                "Name": "exception",
                "Value": "none"
              },
              {
                "Name": "method",
                "Value": "GET"
              },
              {
                "Name": "outcome",
                "Value": "SUCCESS"
              },
              {
                "Name": "status",
                "Value": "200"
              },
              {
                "Name": "uri",
                "Value": "/greetings"
              }
            ],
            "MetricName": "http.server.requests.count",
            "Namespace": "<namespace:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_invalid_amount_of_datapoints[query]": {
    "recorded-date": "19-09-2025, 23:08:52",
    "recorded-content": {
      "error-invalid-amount-datapoints": {
        "Error": {
          "Code": "InvalidParameterCombination",
          "Message": "You have requested up to 86400 datapoints, which exceeds the limit of 1440. You may reduce the datapoints requested by increasing Period, or decreasing the time range.",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "error-invalid-time-frame": {
        "Error": {
          "Code": "InvalidParameterValue",
          "Message": "The parameter StartTime must be less than the parameter EndTime.",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-metric-statitics": {
        "Datapoints": [],
        "Label": "metric_name",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_invalid_amount_of_datapoints[json]": {
    "recorded-date": "19-09-2025, 23:08:53",
    "recorded-content": {
      "error-invalid-amount-datapoints": {
        "Error": {
          "Code": "InvalidParameterCombination",
          "Message": "You have requested up to 86400 datapoints, which exceeds the limit of 1440. You may reduce the datapoints requested by increasing Period, or decreasing the time range.",
          "QueryErrorCode": "InvalidParameterCombinationException",
          "Type": "Sender"
        },
        "message": "You have requested up to 86400 datapoints, which exceeds the limit of 1440. You may reduce the datapoints requested by increasing Period, or decreasing the time range.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "error-invalid-time-frame": {
        "Error": {
          "Code": "InvalidParameterValue",
          "Message": "The parameter StartTime must be less than the parameter EndTime.",
          "QueryErrorCode": "InvalidParameterValueException",
          "Type": "Sender"
        },
        "message": "The parameter StartTime must be less than the parameter EndTime.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-metric-statitics": {
        "Datapoints": [],
        "Label": "metric_name",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_invalid_amount_of_datapoints[smithy-rpc-v2-cbor]": {
    "recorded-date": "19-09-2025, 23:08:54",
    "recorded-content": {
      "error-invalid-amount-datapoints": {
        "Error": {
          "Code": "InvalidParameterCombination",
          "Message": "You have requested up to 86400 datapoints, which exceeds the limit of 1440. You may reduce the datapoints requested by increasing Period, or decreasing the time range.",
          "QueryErrorCode": "InvalidParameterCombinationException",
          "Type": "Sender"
        },
        "message": "You have requested up to 86400 datapoints, which exceeds the limit of 1440. You may reduce the datapoints requested by increasing Period, or decreasing the time range.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "error-invalid-time-frame": {
        "Error": {
          "Code": "InvalidParameterValue",
          "Message": "The parameter StartTime must be less than the parameter EndTime.",
          "QueryErrorCode": "InvalidParameterValueException",
          "Type": "Sender"
        },
        "message": "The parameter StartTime must be less than the parameter EndTime.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-metric-statitics": {
        "Datapoints": [],
        "Label": "metric_name",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_set_alarm[query]": {
    "recorded-date": "22-09-2025, 19:14:19",
    "recorded-content": {
      "triggered-alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_alarm>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "Test Alarm when CPU exceeds 50 percent",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "i-0317828c84edbe100"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "CPUUtilization-3",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "<topic_ok>"
            ],
            "Period": 300,
            "StateReason": "testing alarm",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "ALARM",
            "Statistic": "Average",
            "Threshold": 50.0,
            "TreatMissingData": "ignore",
            "Unit": "Percent"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "reset-alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_alarm>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "Test Alarm when CPU exceeds 50 percent",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "i-0317828c84edbe100"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "CPUUtilization-3",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "<topic_ok>"
            ],
            "Period": 300,
            "StateReason": "resetting alarm",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "OK",
            "Statistic": "Average",
            "Threshold": 50.0,
            "TreatMissingData": "ignore",
            "Unit": "Percent"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_set_alarm[json]": {
    "recorded-date": "22-09-2025, 19:14:26",
    "recorded-content": {
      "triggered-alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_alarm>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "Test Alarm when CPU exceeds 50 percent",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "i-0317828c84edbe100"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "CPUUtilization-3",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "<topic_ok>"
            ],
            "Period": 300,
            "StateReason": "testing alarm",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "ALARM",
            "Statistic": "Average",
            "Threshold": 50.0,
            "TreatMissingData": "ignore",
            "Unit": "Percent"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "reset-alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_alarm>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "Test Alarm when CPU exceeds 50 percent",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "i-0317828c84edbe100"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "CPUUtilization-3",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "<topic_ok>"
            ],
            "Period": 300,
            "StateReason": "resetting alarm",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "OK",
            "Statistic": "Average",
            "Threshold": 50.0,
            "TreatMissingData": "ignore",
            "Unit": "Percent"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_set_alarm[smithy-rpc-v2-cbor]": {
    "recorded-date": "22-09-2025, 19:14:33",
    "recorded-content": {
      "triggered-alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_alarm>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "Test Alarm when CPU exceeds 50 percent",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "i-0317828c84edbe100"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "CPUUtilization-3",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "<topic_ok>"
            ],
            "Period": 300,
            "StateReason": "testing alarm",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "ALARM",
            "Statistic": "Average",
            "Threshold": 50.0,
            "TreatMissingData": "ignore",
            "Unit": "Percent"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "reset-alarm": {
        "CompositeAlarms": [],
        "MetricAlarms": [
          {
            "ActionsEnabled": true,
            "AlarmActions": [
              "arn:<partition>:sns:<region>:111111111111:<topic_alarm>"
            ],
            "AlarmArn": "arn:<partition>:cloudwatch:<region>:111111111111:alarm:<alarm-name:1>",
            "AlarmConfigurationUpdatedTimestamp": "timestamp",
            "AlarmDescription": "Test Alarm when CPU exceeds 50 percent",
            "AlarmName": "<alarm-name:1>",
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [
              {
                "Name": "InstanceId",
                "Value": "i-0317828c84edbe100"
              }
            ],
            "EvaluationPeriods": 2,
            "InsufficientDataActions": [],
            "MetricName": "CPUUtilization-3",
            "Namespace": "<namespace:1>",
            "OKActions": [
              "<topic_ok>"
            ],
            "Period": 300,
            "StateReason": "resetting alarm",
            "StateTransitionedTimestamp": "timestamp",
            "StateUpdatedTimestamp": "timestamp",
            "StateValue": "OK",
            "Statistic": "Average",
            "Threshold": 50.0,
            "TreatMissingData": "ignore",
            "Unit": "Percent"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_set_alarm_invalid_input[query]": {
    "recorded-date": "22-09-2025, 19:16:47",
    "recorded-content": {
      "error-invalid-state": {
        "Error": {
          "Code": "ValidationError",
          "Message": "1 validation error detected: Value 'INVALID' at 'stateValue' failed to satisfy constraint: Member must satisfy enum value set: [INSUFFICIENT_DATA, ALARM, OK]",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "error-resource-not-found": {
        "Error": {
          "Code": "ResourceNotFound",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_set_alarm_invalid_input[json]": {
    "recorded-date": "22-09-2025, 19:16:48",
    "recorded-content": {
      "error-invalid-state": {
        "Error": {
          "Code": "ValidationError",
          "Message": "1 validation error detected: Value 'INVALID' at 'stateValue' failed to satisfy constraint: Member must satisfy enum value set: [INSUFFICIENT_DATA, ALARM, OK]",
          "QueryErrorCode": "ValidationException",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "error-resource-not-found": {
        "Error": {
          "Code": "ResourceNotFound",
          "Message": "",
          "QueryErrorCode": "ResourceNotFound",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/cloudwatch/test_cloudwatch.py::TestCloudwatch::test_set_alarm_invalid_input[smithy-rpc-v2-cbor]": {
    "recorded-date": "22-09-2025, 19:16:48",
    "recorded-content": {
      "error-invalid-state": {
        "Error": {
          "Code": "ValidationError",
          "Message": "1 validation error detected: Value 'INVALID' at 'stateValue' failed to satisfy constraint: Member must satisfy enum value set: [INSUFFICIENT_DATA, ALARM, OK]",
          "QueryErrorCode": "ValidationException",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "error-resource-not-found": {
        "Error": {
          "Code": "ResourceNotFound",
          "Message": "",
          "QueryErrorCode": "ResourceNotFound",
          "Type": "Sender"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  }
}
