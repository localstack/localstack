{
  "tests/aws/services/s3/test_s3.py::TestS3::test_region_header_exists": {
    "recorded-date": "03-08-2023, 04:13:15",
    "recorded-content": {
      "head_bucket": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_objects_v2": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 0,
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_delete_bucket_with_content": {
    "recorded-date": "03-08-2023, 04:13:20",
    "recorded-content": {
      "list-objects": {
        "Contents": [
          {
            "ETag": "\"86639701cdcc5b39438a5f009bd74cb1\"",
            "Key": "test-key-0",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"70a37754eb5a2e7db8cd887aaf11cda7\"",
            "Key": "test-key-1",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"282ff2cb3d9dadeb831bb3ba0128f2f4\"",
            "Key": "test-key-2",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"2b61ddda48445374b35a927b6ae2cd6d\"",
            "Key": "test-key-3",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"f533f549a84b9d7a381a7ed55c4f46b9\"",
            "Key": "test-key-4",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0efcf24eb64fa875c294d05703096b0d\"",
            "Key": "test-key-5",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"7b1b88bb19a8c5a6a1d53eaa75108b80\"",
            "Key": "test-key-6",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"698fbf838fdda3065e058190398514f8\"",
            "Key": "test-key-7",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"96c2178517e273d4001ab7f68fdde969\"",
            "Key": "test-key-8",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"da51d6e22a1ae095154e69b07eef731b\"",
            "Key": "test-key-9",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 6,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 100,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-buckets": {
        "Buckets": [],
        "Owner": {
          "DisplayName": "<display-name>",
          "ID": "<owner-id>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_and_get_object_with_utf8_key": {
    "recorded-date": "03-08-2023, 04:13:21",
    "recorded-content": {
      "put-object": {
        "ETag": "\"e99a18c428cb38d5f260853678922e03\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentLength": 6,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e99a18c428cb38d5f260853678922e03\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_metadata_header_character_decoding": {
    "recorded-date": "03-08-2023, 04:13:29",
    "recorded-content": {
      "head-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 3,
        "ContentType": "binary/octet-stream",
        "ETag": "\"acbd18db4cc2f85cedef654fccc4a4d8\"",
        "LastModified": "datetime",
        "Metadata": {
          "__meta_2": "bar",
          "test_meta_1": "foo"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_upload_file_multipart": {
    "recorded-date": "03-08-2023, 04:13:32",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentLength": 6144,
        "ContentType": "binary/octet-stream",
        "ETag": "\"8eabe9d6b43316e840b079170916c079-1\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_list_objects_with_prefix[/]": {
    "recorded-date": "23-10-2023, 18:32:23",
    "recorded-content": {
      "list-objects": {
        "CommonPrefixes": [
          {
            "Prefix": "test/foo/"
          }
        ],
        "Delimiter": "/",
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1,
        "Name": "<bucket-name:1>",
        "Prefix": "test/",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_list_objects_with_prefix[%2F]": {
    "recorded-date": "23-10-2023, 18:32:25",
    "recorded-content": {
      "list-objects": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test/foo/bar/123",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "Delimiter": "%252F",
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1,
        "Name": "<bucket-name:1>",
        "Prefix": "test/",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-no-encoding": {
        "ListBucketResult": {
          "CommonPrefixes": {
            "Prefix": "test/"
          },
          "Delimiter": "/",
          "IsTruncated": "false",
          "Marker": null,
          "MaxKeys": "1000",
          "Name": "<bucket-name:1>",
          "Prefix": "test"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_get_object_no_such_bucket": {
    "recorded-date": "03-08-2023, 04:13:49",
    "recorded-content": {
      "expected_error": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_delete_bucket_no_such_bucket": {
    "recorded-date": "03-08-2023, 04:13:50",
    "recorded-content": {
      "expected_error": {
        "Error": {
          "BucketName": "does-not-exist-localstack-test",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_get_bucket_notification_configuration_no_such_bucket": {
    "recorded-date": "03-08-2023, 04:13:50",
    "recorded-content": {
      "expected_error": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_get_object_attributes": {
    "recorded-date": "03-08-2023, 04:14:00",
    "recorded-content": {
      "object-attrs": {
        "ETag": "e92499db864217242396e8ef766079a9",
        "LastModified": "datetime",
        "ObjectSize": 7,
        "StorageClass": "STANDARD",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs-multiparts-1-part": {
        "ETag": "e747540af6911dbc890f8d3e0b48549b-1",
        "LastModified": "datetime",
        "ObjectParts": {
          "TotalPartsCount": 1
        },
        "ObjectSize": 65,
        "StorageClass": "STANDARD",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs-multiparts-2-parts": {
        "ETag": "5389a7fb9c7e4b97c90255e2ee5e57f7-2",
        "LastModified": "datetime",
        "ObjectParts": {
          "TotalPartsCount": 2
        },
        "ObjectSize": 5242965,
        "StorageClass": "STANDARD",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_and_get_object_with_hash_prefix": {
    "recorded-date": "03-08-2023, 04:14:14",
    "recorded-content": {
      "put-object": {
        "ETag": "\"39d0d586a701e199389d954f2d592720\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"39d0d586a701e199389d954f2d592720\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_invalid_range_error": {
    "recorded-date": "03-08-2023, 04:14:17",
    "recorded-content": {
      "exc": {
        "Error": {
          "ActualObjectSize": "8",
          "Code": "InvalidRange",
          "Message": "The requested range is not satisfiable",
          "RangeRequested": "bytes=1024-4096"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 416
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_range_key_not_exists": {
    "recorded-date": "03-08-2023, 04:14:18",
    "recorded-content": {
      "exc": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "my-key",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_and_get_bucket_policy": {
    "recorded-date": "04-08-2023, 23:56:00",
    "recorded-content": {
      "put-bucket-policy": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "get-bucket-policy": {
        "Policy": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": "s3:GetObject",
              "Resource": "<resource:1>"
            }
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_tagging_empty_list": {
    "recorded-date": "03-08-2023, 04:14:24",
    "recorded-content": {
      "created-object-tags": {
        "TagSet": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "updated-object-tags": {
        "TagSet": [
          {
            "Key": "tag1",
            "Value": "tag1"
          },
          {
            "Key": "tag2",
            "Value": ""
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "deleted-object-tags": {
        "TagSet": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_get_object_after_deleted_in_versioned_bucket": {
    "recorded-date": "03-08-2023, 04:14:29",
    "recorded-content": {
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "abcdefgh",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e8dc4081b13434b45189a720b77b6818\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-after-delete": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "my-key",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_checksum[CRC32]": {
    "recorded-date": "05-10-2023, 20:33:28",
    "recorded-content": {
      "put-wrong-checksum": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Value for x-amz-checksum-crc32 header is invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-generated": {
        "ChecksumCRC32": "cZWHwQ==",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs-generated": {
        "Checksum": {
          "ChecksumCRC32": "cZWHwQ=="
        },
        "ETag": "e6d9226c2a86b7232933663c13467527",
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-autogenerated": {
        "ChecksumCRC32": "cZWHwQ==",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs-auto-generated": {
        "Checksum": {
          "ChecksumCRC32": "cZWHwQ=="
        },
        "ETag": "e6d9226c2a86b7232933663c13467527",
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-checksum": {
        "AcceptRanges": "bytes",
        "ChecksumCRC32": "cZWHwQ==",
        "ContentEncoding": "",
        "ContentLength": 11,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_checksum[CRC32C]": {
    "recorded-date": "05-10-2023, 20:33:33",
    "recorded-content": {
      "put-wrong-checksum": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Value for x-amz-checksum-crc32c header is invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-generated": {
        "ChecksumCRC32C": "Pf4upw==",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs-generated": {
        "Checksum": {
          "ChecksumCRC32C": "Pf4upw=="
        },
        "ETag": "e6d9226c2a86b7232933663c13467527",
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-autogenerated": {
        "ChecksumCRC32C": "Pf4upw==",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs-auto-generated": {
        "Checksum": {
          "ChecksumCRC32C": "Pf4upw=="
        },
        "ETag": "e6d9226c2a86b7232933663c13467527",
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-checksum": {
        "AcceptRanges": "bytes",
        "ChecksumCRC32C": "Pf4upw==",
        "ContentEncoding": "",
        "ContentLength": 11,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_checksum[SHA1]": {
    "recorded-date": "05-10-2023, 20:33:38",
    "recorded-content": {
      "put-wrong-checksum": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Value for x-amz-checksum-sha1 header is invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-generated": {
        "ChecksumSHA1": "B++3uSfJMSHWToQMQ1g6lIJY5Eo=",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs-generated": {
        "Checksum": {
          "ChecksumSHA1": "B++3uSfJMSHWToQMQ1g6lIJY5Eo="
        },
        "ETag": "e6d9226c2a86b7232933663c13467527",
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-autogenerated": {
        "ChecksumSHA1": "B++3uSfJMSHWToQMQ1g6lIJY5Eo=",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs-auto-generated": {
        "Checksum": {
          "ChecksumSHA1": "B++3uSfJMSHWToQMQ1g6lIJY5Eo="
        },
        "ETag": "e6d9226c2a86b7232933663c13467527",
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-checksum": {
        "AcceptRanges": "bytes",
        "ChecksumSHA1": "B++3uSfJMSHWToQMQ1g6lIJY5Eo=",
        "ContentEncoding": "",
        "ContentLength": 11,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_checksum[SHA256]": {
    "recorded-date": "05-10-2023, 20:33:43",
    "recorded-content": {
      "put-wrong-checksum": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Value for x-amz-checksum-sha256 header is invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-generated": {
        "ChecksumSHA256": "2l26x0trnT0r2AvakoFk2MB7eKVKzYESLMxSAKAzoik=",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs-generated": {
        "Checksum": {
          "ChecksumSHA256": "2l26x0trnT0r2AvakoFk2MB7eKVKzYESLMxSAKAzoik="
        },
        "ETag": "e6d9226c2a86b7232933663c13467527",
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-autogenerated": {
        "ChecksumSHA256": "2l26x0trnT0r2AvakoFk2MB7eKVKzYESLMxSAKAzoik=",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs-auto-generated": {
        "Checksum": {
          "ChecksumSHA256": "2l26x0trnT0r2AvakoFk2MB7eKVKzYESLMxSAKAzoik="
        },
        "ETag": "e6d9226c2a86b7232933663c13467527",
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-checksum": {
        "AcceptRanges": "bytes",
        "ChecksumSHA256": "2l26x0trnT0r2AvakoFk2MB7eKVKzYESLMxSAKAzoik=",
        "ContentEncoding": "",
        "ContentLength": 11,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e6d9226c2a86b7232933663c13467527\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_metadata_replace": {
    "recorded-date": "03-08-2023, 04:15:04",
    "recorded-content": {
      "put_object": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLanguage": "en-US",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy_object": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_copy": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "image/jpg",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "another-key": "value"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_content_type_and_metadata": {
    "recorded-date": "03-08-2023, 04:15:17",
    "recorded-content": {
      "put_object": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy_object": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_copy": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy_object_second": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_second_copy": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_multipart_upload_acls": {
    "recorded-date": "03-08-2023, 16:53:20",
    "recorded-content": {
      "bucket-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "READ"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "permission-acl-key0": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "permission-acl-key1": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "permission-acl-key2": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "READ"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "WRITE"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_object_expiry": {
    "recorded-date": "03-08-2023, 04:16:18",
    "recorded-content": {
      "head-object-expired": {
        "AcceptRanges": "bytes",
        "ContentLength": 3,
        "ContentType": "binary/octet-stream",
        "ETag": "\"acbd18db4cc2f85cedef654fccc4a4d8\"",
        "Expires": "datetime",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-not-yet-expired": {
        "AcceptRanges": "bytes",
        "Body": "foo",
        "ContentLength": 3,
        "ContentType": "binary/octet-stream",
        "ETag": "\"acbd18db4cc2f85cedef654fccc4a4d8\"",
        "Expires": "datetime",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_upload_file_with_xml_preamble": {
    "recorded-date": "03-08-2023, 04:16:20",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><test/>",
        "ContentLength": 45,
        "ContentType": "binary/octet-stream",
        "ETag": "\"8a793423f1e69103a7056b99e4ad6c0b\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_bucket_availability": {
    "recorded-date": "03-08-2023, 04:16:22",
    "recorded-content": {
      "bucket-lifecycle": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "bucket-replication": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_different_location_constraint": {
    "recorded-date": "03-08-2023, 04:16:27",
    "recorded-content": {
      "get_bucket_location_bucket_1": {
        "LocationConstraint": null,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_location_bucket_2": {
        "LocationConstraint": "us-east-2",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create_bucket_constraint_exc": {
        "Error": {
          "Code": "IllegalLocationConstraintException",
          "Message": "The unspecified location constraint is incompatible for the region specific endpoint this request was sent to."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create_bucket_bucket_3": {
        "Location": "<location>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_location_bucket_3": {
        "LocationConstraint": "us-east-2",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_location_non_existent_bucket": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "LocationConstraint": null,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_get_object_with_anon_credentials": {
    "recorded-date": "03-08-2023, 17:03:12",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "body data",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"53ebc26c3ff5decfe9ffc7bdbaa02459\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_putobject_with_multiple_keys": {
    "recorded-date": "03-08-2023, 04:16:33",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "test",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketLifecycle::test_delete_bucket_lifecycle_configuration": {
    "recorded-date": "26-08-2023, 00:27:02",
    "recorded-content": {
      "get-bucket-lifecycle-exc-1": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchLifecycleConfiguration",
          "Message": "The lifecycle configuration does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "delete-bucket-lifecycle-no-bucket": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": {
              "Days": 7
            },
            "Filter": {
              "Prefix": ""
            },
            "ID": "wholebucket",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-lifecycle-exc-2": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchLifecycleConfiguration",
          "Message": "The lifecycle configuration does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketLifecycle::test_delete_lifecycle_configuration_on_bucket_deletion": {
    "recorded-date": "26-08-2023, 00:27:25",
    "recorded-content": {
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": {
              "Days": 7
            },
            "Filter": {
              "Prefix": ""
            },
            "ID": "wholebucket",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-lifecycle-exc": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchLifecycleConfiguration",
          "Message": "The lifecycle configuration does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketLifecycle::test_bucket_lifecycle_configuration_object_expiry": {
    "recorded-date": "07-07-2023, 15:33:21",
    "recorded-content": {
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": "<expiration>",
            "Filter": {
              "Prefix": ""
            },
            "ID": "rule_number_one",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-expiry": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-expiry": {
        "AcceptRanges": "bytes",
        "Body": "test",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_range_header_body_length": {
    "recorded-date": "07-08-2023, 16:17:23",
    "recorded-content": {
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentLength": 1024,
        "ContentRange": "bytes 0-1023/2048",
        "ContentType": "binary/octet-stream",
        "ETag": "<e-tag:1>",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 206
        }
      },
      "get-object-2": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentLength": 1024,
        "ContentRange": "bytes 1024-2047/2048",
        "ContentType": "binary/octet-stream",
        "ETag": "<e-tag:1>",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 206
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_delete_object_tagging": {
    "recorded-date": "03-08-2023, 04:17:04",
    "recorded-content": {
      "get-obj": {
        "AcceptRanges": "bytes",
        "Body": "something",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-after-tag-deletion": {
        "AcceptRanges": "bytes",
        "Body": "something",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_delete_non_existing_keys": {
    "recorded-date": "03-08-2023, 04:17:07",
    "recorded-content": {
      "deleted-resp": {
        "Deleted": [
          {
            "Key": "dummy1"
          },
          {
            "Key": "dummy2"
          },
          {
            "Key": "test-key-nonexistent"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_delete_non_existing_keys_in_non_existing_bucket": {
    "recorded-date": "04-08-2023, 23:51:32",
    "recorded-content": {
      "error-non-existent-bucket": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_request_payer": {
    "recorded-date": "03-08-2023, 04:17:17",
    "recorded-content": {
      "put-bucket-request-payment": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-request-payment": {
        "Payer": "Requester",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_request_payer_exceptions": {
    "recorded-date": "10-08-2023, 02:34:43",
    "recorded-content": {
      "wrong-payer-type": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "wrong-bucket-name": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_bucket_exists": {
    "recorded-date": "03-08-2023, 04:17:20",
    "recorded-content": {
      "get-bucket-cors": {
        "CORSRules": [
          {
            "AllowedMethods": [
              "GET",
              "POST",
              "PUT",
              "DELETE"
            ],
            "AllowedOrigins": [
              "localhost"
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-not-exists": {
        "Error": {
          "BucketName": "bucket-not-exists",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_uppercase_key_names": {
    "recorded-date": "03-08-2023, 04:17:22",
    "recorded-content": {
      "response": {
        "AcceptRanges": "bytes",
        "Body": "something",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "wrong-case-key": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "camelcasekey",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_precondition_failed_error": {
    "recorded-date": "03-08-2023, 04:17:50",
    "recorded-content": {
      "get-object-if-match": {
        "Error": {
          "Code": "PreconditionFailed",
          "Condition": "If-Match",
          "Message": "At least one of the pre-conditions you specified did not hold"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 412
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_invalid_content_md5": {
    "recorded-date": "05-09-2023, 02:58:55",
    "recorded-content": {
      "md5-error-0": {
        "Error": {
          "Code": "InvalidDigest",
          "Content-MD5": "__invalid__",
          "Message": "The Content-MD5 you specified was invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "md5-error-1": {
        "Error": {
          "Code": "InvalidDigest",
          "Content-MD5": "000",
          "Message": "The Content-MD5 you specified was invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "md5-error-2": {
        "Error": {
          "Code": "InvalidDigest",
          "Content-MD5": "not base64 encoded checksum",
          "Message": "The Content-MD5 you specified was invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "md5-error-3": {
        "Error": {
          "Code": "InvalidDigest",
          "Content-MD5": "MTIz",
          "Message": "The Content-MD5 you specified was invalid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "success-put-object-md5": {
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_upload_download_gzip": {
    "recorded-date": "03-08-2023, 04:17:54",
    "recorded-content": {
      "put-object": {
        "ETag": "\"5287ceabf01e3e9c080606b5a5b9bf70\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentEncoding": "gzip",
        "ContentLength": 41,
        "ContentType": "binary/octet-stream",
        "ETag": "\"5287ceabf01e3e9c080606b5a5b9bf70\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_multipart_copy_object_etag": {
    "recorded-date": "10-08-2023, 01:22:44",
    "recorded-content": {
      "multipart-upload": {
        "Bucket": "<bucket:1>",
        "ETag": "\"b972025bc34adf8d76d6d51e93c035cc-1\"",
        "Key": "test.file",
        "Location": "<location:1>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object": {
        "CopyObjectResult": {
          "ETag": "\"eee506dd7ada7ded524c77e359a0e7c6\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-in-place": {
        "CopyObjectResult": {
          "ETag": "\"eee506dd7ada7ded524c77e359a0e7c6\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_set_external_hostname": {
    "recorded-date": "03-08-2023, 17:09:20",
    "recorded-content": {
      "multipart-upload": {
        "Bucket": "<bucket:1>",
        "ETag": "\"b972025bc34adf8d76d6d51e93c035cc-1\"",
        "Key": "test.file",
        "Location": "<location:1>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "Bucket": "<bucket:1>",
        "ETag": "\"b972025bc34adf8d76d6d51e93c035cc-1\"",
        "Key": "test.file",
        "Location": "<location:1>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_lambda_integration": {
    "recorded-date": "03-08-2023, 04:18:58",
    "recorded-content": {
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLength": 0,
        "ContentType": "binary/octet-stream",
        "ETag": "\"d41d8cd98f00b204e9800998ecf8427e\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_uppercase_bucket_name": {
    "recorded-date": "03-08-2023, 04:19:01",
    "recorded-content": {
      "uppercase-bucket": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "InvalidBucketName",
          "Message": "The specified bucket is not valid."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_create_bucket_with_existing_name": {
    "recorded-date": "03-08-2023, 04:19:02",
    "recorded-content": {
      "create-bucket-us-west-1": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "BucketAlreadyOwnedByYou",
          "Message": "Your previous request to create the named bucket succeeded and you already own it."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      },
      "create-bucket-us-east-2": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "BucketAlreadyOwnedByYou",
          "Message": "Your previous request to create the named bucket succeeded and you already own it."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_bucket_does_not_exist": {
    "recorded-date": "03-08-2023, 04:19:09",
    "recorded-content": {
      "list_object": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "list_object_vhost": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_create_bucket_head_bucket": {
    "recorded-date": "03-08-2023, 04:19:13",
    "recorded-content": {
      "create_bucket": {
        "Location": "/<bucket-name:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create_bucket_location_constraint": {
        "Location": "http://<bucket-name:2>.<host>/",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_bucket": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_bucket_filtered_header": {
        "content-type": "application/xml",
        "x-amz-access-point-alias": "false",
        "x-amz-bucket-region": "<region>",
        "x-amz-id-2": "x-amz-id-2",
        "x-amz-request-id": "x-amz-request-id"
      },
      "head_bucket_2": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_bucket_2_filtered_header": {
        "content-type": "application/xml",
        "x-amz-access-point-alias": "false",
        "x-amz-bucket-region": "us-west-1",
        "x-amz-id-2": "x-amz-id-2",
        "x-amz-request-id": "x-amz-request-id"
      },
      "head_bucket_not_exist": {
        "Error": {
          "Code": "404",
          "Message": "Not Found"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_bucket_name_with_dots": {
    "recorded-date": "03-08-2023, 17:13:12",
    "recorded-content": {
      "list_objects": {
        "Contents": [
          {
            "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
            "Key": "my-content",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 9,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_objects_headers": {
        "content-type": "application/xml",
        "date": "date",
        "server": "AmazonS3",
        "transfer-encoding": "chunked",
        "x-amz-bucket-region": "<region>",
        "x-amz-id-2": "x-amz-id-2",
        "x-amz-request-id": "x-amz-request-id"
      },
      "request_vhost_url_content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"><Name><bucket-name:1></Name><Prefix></Prefix><Marker></Marker><MaxKeys>1000</MaxKeys><IsTruncated>false</IsTruncated><Contents><Key>my-content</Key><LastModified>date</LastModified><ETag>&quot;437b930db84b8079c2dd804a71936b5f&quot;</ETag><Size>9</Size><StorageClass>STANDARD</StorageClass></Contents></ListBucketResult>",
      "request_vhost_headers": {
        "Content-Type": "application/xml",
        "Date": "date",
        "Server": "AmazonS3",
        "Transfer-Encoding": "chunked",
        "x-amz-bucket-region": "<region>",
        "x-amz-id-2": "x-amz-id-2",
        "x-amz-request-id": "x-amz-request-id"
      },
      "request_path_url_content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"><Name><bucket-name:1></Name><Prefix></Prefix><Marker></Marker><MaxKeys>1000</MaxKeys><IsTruncated>false</IsTruncated><Contents><Key>my-content</Key><LastModified>date</LastModified><ETag>&quot;437b930db84b8079c2dd804a71936b5f&quot;</ETag><Size>9</Size><StorageClass>STANDARD</StorageClass></Contents></ListBucketResult>",
      "request_path_headers": {
        "Content-Type": "application/xml",
        "Date": "date",
        "Server": "AmazonS3",
        "Transfer-Encoding": "chunked",
        "x-amz-bucket-region": "<region>",
        "x-amz-id-2": "x-amz-id-2",
        "x-amz-request-id": "x-amz-request-id"
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_put_more_than_1000_items": {
    "recorded-date": "03-08-2023, 04:23:05",
    "recorded-content": {
      "get_object-1009": {
        "AcceptRanges": "bytes",
        "Body": "test-1009",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"7d2a1f93cc456846faba49b73eefc5b2\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_object-0": {
        "AcceptRanges": "bytes",
        "Body": "test-0",
        "ContentLength": 6,
        "ContentType": "binary/octet-stream",
        "ETag": "\"86639701cdcc5b39438a5f009bd74cb1\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects": {
        "Contents": "<content>",
        "Delimiter": "/",
        "EncodingType": "url",
        "IsTruncated": true,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "NextMarker": "test-key-99",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-next_marker": {
        "Contents": [
          {
            "ETag": "\"469aa468e8b397232fe0754ba11ba9f3\"",
            "Key": "test-key-990",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"aa50de431ca7e15fa7f769df3615bac1\"",
            "Key": "test-key-991",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"07844c1200a3eeb13dd3885d336c300e\"",
            "Key": "test-key-992",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"43a56bbd65ff5cfa706996026b11f627\"",
            "Key": "test-key-993",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"05e2fb7108663f7398dfeb41a048bf32\"",
            "Key": "test-key-994",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"ca06c6ef5b6317771502c23ae4e941d7\"",
            "Key": "test-key-995",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"bd6e51d9b1c43aa30906314e5ed9d857\"",
            "Key": "test-key-996",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"3fda8ced7c145b9820e3d95d6458cbb9\"",
            "Key": "test-key-997",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"b3ed4e42f8e008bfeb879a9b0aeeff23\"",
            "Key": "test-key-998",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"880a4a8e1643dc0014d8f0fc297327f4\"",
            "Key": "test-key-999",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 8,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "test-key-99",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_list_objects_empty_marker": {
    "recorded-date": "03-08-2023, 04:23:09",
    "recorded-content": {
      "list-objects": {
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_upload_big_file": {
    "recorded-date": "03-08-2023, 04:23:23",
    "recorded-content": {
      "put_object_key1": {
        "ETag": "\"a649c4228b2b9e8bfca3510ed9d9a764\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put_object_key2": {
        "ETag": "\"7095bae098259e0dda4b7acc624de4e2\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_key1": {
        "AcceptRanges": "bytes",
        "ContentLength": 10000000,
        "ContentType": "binary/octet-stream",
        "ETag": "\"7095bae098259e0dda4b7acc624de4e2\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object_key2": {
        "AcceptRanges": "bytes",
        "ContentLength": 10000000,
        "ContentType": "binary/octet-stream",
        "ETag": "\"7095bae098259e0dda4b7acc624de4e2\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_get_bucket_versioning_order": {
    "recorded-date": "03-08-2023, 04:23:26",
    "recorded-content": {
      "list_object_versions_before": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put_bucket_versioning": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_versioning": {
        "Status": "Enabled",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_object_versions": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"841a2d689ad86bd1611447453c22c6fc\"",
            "IsLatest": true,
            "Key": "test",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 4,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          },
          {
            "ETag": "\"841a2d689ad86bd1611447453c22c6fc\"",
            "IsLatest": false,
            "Key": "test",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 4,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          },
          {
            "ETag": "\"841a2d689ad86bd1611447453c22c6fc\"",
            "IsLatest": true,
            "Key": "test2",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 4,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_etag_on_get_object_call": {
    "recorded-date": "03-08-2023, 04:23:29",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... Lorem ipsum dolor sit amet, ... ",
        "ContentLength": 960,
        "ContentType": "binary/octet-stream",
        "ETag": "\"c289c6e309be295fe68af649d1e6c6ec\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_object_range": {
        "AcceptRanges": "bytes",
        "Body": "Lorem ipsum dolor",
        "ContentLength": 17,
        "ContentRange": "bytes 0-16/960",
        "ContentType": "binary/octet-stream",
        "ETag": "\"c289c6e309be295fe68af649d1e6c6ec\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 206
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_delete_object_with_version_id": {
    "recorded-date": "03-08-2023, 04:23:32",
    "recorded-content": {
      "get_bucket_versioning": {
        "Status": "Enabled",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete_objects": {
        "Deleted": [
          {
            "Key": "aws/s3/testkey1.txt",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_object_versions_after_delete": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"c289c6e309be295fe68af649d1e6c6ec\"",
            "IsLatest": true,
            "Key": "aws/s3/testkey2.txt",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 960,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_bucket_versioning_suspended": {
        "Status": "Suspended",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_batch_delete_objects_using_requests_with_acl": {
    "recorded-date": "03-08-2023, 04:23:41",
    "recorded-content": {}
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_batch_delete_public_objects_using_requests": {
    "recorded-date": "03-08-2023, 17:15:13",
    "recorded-content": {
      "multi-delete-with-requests": {
        "DeleteResult": {
          "@xmlns": "http://s3.amazonaws.com/doc/2006-03-01/",
          "Deleted": [
            {
              "Key": "key-created-by-anonymous-1"
            },
            {
              "Key": "key-created-by-anonymous-2"
            }
          ]
        }
      },
      "list-remaining-objects": {
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_batch_delete_objects": {
    "recorded-date": "03-08-2023, 04:23:45",
    "recorded-content": {
      "batch-delete": {
        "Deleted": [
          {
            "Key": "<key:1>"
          },
          {
            "Key": "<key:2>"
          },
          {
            "Key": "<key:3>"
          },
          {
            "Key": "<key:4>"
          },
          {
            "Key": "<key:5>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-remaining-objects": {
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_put_object": {
    "recorded-date": "04-08-2023, 23:58:39",
    "recorded-content": {
      "get_object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentLength": 9,
        "ContentType": "binary/octet-stream",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_put_url_metadata": {
    "recorded-date": "04-08-2023, 23:59:04",
    "recorded-content": {
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLength": 11,
        "ContentType": "binary/octet-stream",
        "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
        "LastModified": "datetime",
        "Metadata": {
          "foo": "bar"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_s3_copy_md5": {
    "recorded-date": "05-08-2023, 00:08:47",
    "recorded-content": {
      "copy-obj": {
        "CopyObjectResult": {
          "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3DeepArchive::test_s3_get_deep_archive_object_restore": {
    "recorded-date": "14-08-2023, 22:35:53",
    "recorded-content": {
      "get-object-invalid-state": {
        "Error": {
          "Code": "InvalidObjectState",
          "Message": "The operation is not valid for the object's storage class",
          "StorageClass": "DEEP_ARCHIVE"
        },
        "StorageClass": "DEEP_ARCHIVE",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "get_object_invalid_state": {
        "Error": {
          "Code": "InvalidObjectState",
          "Message": "The operation is not valid for the object's storage class",
          "StorageClass": "DEEP_ARCHIVE"
        },
        "StorageClass": "DEEP_ARCHIVE",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "restore_object": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 202
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_head_object_fields": {
    "recorded-date": "03-08-2023, 04:14:26",
    "recorded-content": {
      "head-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e8dc4081b13434b45189a720b77b6818\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-404": {
        "Error": {
          "Code": "404",
          "Message": "Not Found"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_bucket_acl": {
    "recorded-date": "03-08-2023, 16:55:21",
    "recorded-content": {
      "get-bucket-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "READ"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-canned-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-grant-acl": {
        "Grants": [
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/s3/LogDelivery"
            },
            "Permission": "READ"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-acp-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/s3/LogDelivery"
            },
            "Permission": "WRITE"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_bucket_acl_exceptions": {
    "recorded-date": "03-08-2023, 04:16:13",
    "recorded-content": {
      "put-bucket-canned-acl": {
        "Error": {
          "ArgumentName": "x-amz-acl",
          "ArgumentValue": "fake-acl",
          "Code": "InvalidArgument",
          "Message": null
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-grant-acl-fake-uri": {
        "Error": {
          "ArgumentName": "uri",
          "ArgumentValue": "http://acs.amazonaws.com/groups/s3/FakeGroup",
          "Code": "InvalidArgument",
          "Message": "Invalid group uri"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-grant-acl-fake-key": {
        "Error": {
          "ArgumentName": "x-amz-grant-write",
          "ArgumentValue": "fakekey=\"1234\"",
          "Code": "InvalidArgument",
          "Message": "Argument format not recognized"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-grant-acl-wrong-id": {
        "Error": {
          "ArgumentName": "id",
          "ArgumentValue": "wrong-id",
          "Code": "InvalidArgument",
          "Message": "Invalid id"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-acp-acl-1": {
        "Error": {
          "Code": "MalformedACLError",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-acp-acl-2": {
        "Error": {
          "Code": "MalformedACLError",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-acp-acl-3": {
        "Error": {
          "ArgumentName": "CanonicalUser/ID",
          "ArgumentValue": "wrong-id",
          "Code": "InvalidArgument",
          "Message": "Invalid id"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-acp-acl-4": {
        "Error": {
          "ArgumentName": "Group/URI",
          "ArgumentValue": "http://acs.amazonaws.com/groups/s3/FakeGroup",
          "Code": "InvalidArgument",
          "Message": "Invalid group uri"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-acp-acl-5": {
        "Error": {
          "ArgumentName": "CanonicalUser/ID",
          "ArgumentValue": "wrong-id",
          "Code": "InvalidArgument",
          "Message": "Invalid id"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-acp-acl-6": {
        "Error": {
          "Code": "MalformedACLError",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-empty-acp": {
        "Error": {
          "Code": "MalformedACLError",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-empty": {
        "Error": {
          "Code": "MissingSecurityHeader",
          "Message": "Your request was missing a required header",
          "MissingHeaderName": "x-amz-acl"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-two-type-acl": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Specifying both Canned ACLs and Header Grants is not allowed"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-two-type-acl-acp": {
        "Error": {
          "Code": "UnexpectedContent",
          "Message": "This request does not support content"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_get_object_header_overrides": {
    "recorded-date": "03-08-2023, 04:23:46",
    "recorded-content": {
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "something",
        "CacheControl": "max-age=74",
        "ContentDisposition": "attachment; filename=\"foo.jpg\"",
        "ContentEncoding": "identity",
        "ContentLanguage": "de-DE",
        "ContentLength": 9,
        "ContentType": "image/jpeg",
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "Expires": "datetime",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_put_object_versioned": {
    "recorded-date": "03-08-2023, 04:23:39",
    "recorded-content": {
      "put-pre-versioned": {
        "ETag": "\"e1474add07e050008472599be0883b17\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-pre-versioned": {
        "AcceptRanges": "bytes",
        "Body": "non-versioned-key",
        "ContentLength": 17,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e1474add07e050008472599be0883b17\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-pre-versioned": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"e1474add07e050008472599be0883b17\"",
            "IsLatest": true,
            "Key": "non-version-bucket-key",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 17,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-post-versioned": {
        "AcceptRanges": "bytes",
        "Body": "non-versioned-key",
        "ContentLength": 17,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e1474add07e050008472599be0883b17\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-obj-versioned-1": {
        "ETag": "\"c43b615a50200509ceccc5f4122da4bf\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-obj-versioned-2": {
        "ETag": "\"a26fe9d9854f719b8865291904326b58\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:3>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-versioned": {
        "AcceptRanges": "bytes",
        "Body": "versioned-key-updated",
        "ContentLength": 21,
        "ContentType": "binary/octet-stream",
        "ETag": "\"a26fe9d9854f719b8865291904326b58\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:3>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-versioned": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"e1474add07e050008472599be0883b17\"",
            "IsLatest": true,
            "Key": "non-version-bucket-key",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 17,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          },
          {
            "ETag": "\"a26fe9d9854f719b8865291904326b58\"",
            "IsLatest": true,
            "Key": "versioned-bucket-key",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 21,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          },
          {
            "ETag": "\"c43b615a50200509ceccc5f4122da4bf\"",
            "IsLatest": false,
            "Key": "versioned-bucket-key",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 13,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-bucket-suspended": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"e1474add07e050008472599be0883b17\"",
            "IsLatest": true,
            "Key": "non-version-bucket-key",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 17,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          },
          {
            "ETag": "\"a26fe9d9854f719b8865291904326b58\"",
            "IsLatest": true,
            "Key": "versioned-bucket-key",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 21,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          },
          {
            "ETag": "\"c43b615a50200509ceccc5f4122da4bf\"",
            "IsLatest": false,
            "Key": "versioned-bucket-key",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 13,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-versioned-disabled": {
        "AcceptRanges": "bytes",
        "Body": "versioned-key-updated",
        "ContentLength": 21,
        "ContentType": "binary/octet-stream",
        "ETag": "\"a26fe9d9854f719b8865291904326b58\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:3>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-non-versioned-disabled": {
        "AcceptRanges": "bytes",
        "Body": "non-versioned-key",
        "ContentLength": 17,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e1474add07e050008472599be0883b17\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-non-versioned-post-disable": {
        "ETag": "\"6c0a0d0895ef9829b63848d506a68536\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-non-versioned-post-disable": {
        "AcceptRanges": "bytes",
        "Body": "non-versioned-key-post",
        "ContentLength": 22,
        "ContentType": "binary/octet-stream",
        "ETag": "\"6c0a0d0895ef9829b63848d506a68536\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_put_object_with_md5_and_chunk_signature_bad_headers[s3-True]": {
    "recorded-date": "04-08-2023, 23:59:09",
    "recorded-content": {
      "with-decoded-content-length": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        }
      },
      "without-decoded-content-length": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:2>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:2>"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_put_object_with_md5_and_chunk_signature_bad_headers[s3-False]": {
    "recorded-date": "04-08-2023, 23:59:11",
    "recorded-content": {}
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_put_object_with_md5_and_chunk_signature_bad_headers[s3v4-True]": {
    "recorded-date": "04-08-2023, 23:59:13",
    "recorded-content": {
      "with-decoded-content-length": {
        "Error": {
          "Code": "AccessDenied",
          "HeadersNotSigned": "x-amz-date, x-amz-decoded-content-length",
          "HostId": "host-id",
          "Message": "There were headers present in the request which were not signed",
          "RequestId": "<request-id:1>"
        }
      },
      "without-decoded-content-length": {
        "Error": {
          "Code": "AccessDenied",
          "HeadersNotSigned": "x-amz-date",
          "HostId": "host-id",
          "Message": "There were headers present in the request which were not signed",
          "RequestId": "<request-id:2>"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_put_object_with_md5_and_chunk_signature_bad_headers[s3v4-False]": {
    "recorded-date": "04-08-2023, 23:59:15",
    "recorded-content": {}
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_s3_presigned_url_expired[s3]": {
    "recorded-date": "04-08-2023, 23:59:23",
    "recorded-content": {
      "expired-exception": {
        "Error": {
          "Code": "AccessDenied",
          "Expires": "date",
          "HostId": "host-id",
          "Message": "Request has expired",
          "RequestId": "<request-id:1>",
          "ServerTime": "date"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_s3_presigned_url_expired[s3v4]": {
    "recorded-date": "04-08-2023, 23:59:29",
    "recorded-content": {
      "expired-exception": {
        "Error": {
          "Code": "AccessDenied",
          "Expires": "date",
          "HostId": "host-id",
          "Message": "Request has expired",
          "RequestId": "<request-id:1>",
          "ServerTime": "date",
          "X-Amz-Expires": "2"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication_expired[s3-False]": {
    "recorded-date": "05-08-2023, 00:00:07",
    "recorded-content": {
      "expired": {
        "Error": {
          "Code": "AccessDenied",
          "Expires": "date",
          "HostId": "host-id",
          "Message": "Request has expired",
          "RequestId": "<request-id:1>",
          "ServerTime": "date"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication_expired[s3-True]": {
    "recorded-date": "05-08-2023, 00:00:11",
    "recorded-content": {
      "expired": {
        "Error": {
          "Code": "AccessDenied",
          "Expires": "date",
          "HostId": "host-id",
          "Message": "Request has expired",
          "RequestId": "<request-id:1>",
          "ServerTime": "date"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication_expired[s3v4-False]": {
    "recorded-date": "05-08-2023, 00:00:16",
    "recorded-content": {
      "expired": {
        "Error": {
          "Code": "AccessDenied",
          "Expires": "date",
          "HostId": "host-id",
          "Message": "Request has expired",
          "RequestId": "<request-id:1>",
          "ServerTime": "date",
          "X-Amz-Expires": "1"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication_expired[s3v4-True]": {
    "recorded-date": "05-08-2023, 00:00:20",
    "recorded-content": {
      "expired": {
        "Error": {
          "Code": "AccessDenied",
          "Expires": "date",
          "HostId": "host-id",
          "Message": "Request has expired",
          "RequestId": "<request-id:1>",
          "ServerTime": "date",
          "X-Amz-Expires": "1"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication[s3-False]": {
    "recorded-date": "05-08-2023, 00:00:25",
    "recorded-content": {
      "invalid-get-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        }
      },
      "invalid-put-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:2>",
          "SignatureProvided": "<signature-provided:2>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:2>"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication[s3-True]": {
    "recorded-date": "05-08-2023, 00:00:29",
    "recorded-content": {
      "invalid-get-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        }
      },
      "invalid-put-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:2>",
          "SignatureProvided": "<signature-provided:2>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:2>"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication[s3v4-False]": {
    "recorded-date": "05-08-2023, 00:00:34",
    "recorded-content": {
      "invalid-get-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        }
      },
      "invalid-put-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:2>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:2>",
          "SignatureProvided": "<signature-provided:2>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:2>"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_presigned_url_signature_authentication[s3v4-True]": {
    "recorded-date": "05-08-2023, 00:00:38",
    "recorded-content": {
      "invalid-get-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        }
      },
      "invalid-put-1": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:2>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:2>",
          "SignatureProvided": "<signature-provided:2>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:2>"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_s3_put_presigned_url_missing_sig_param[s3]": {
    "recorded-date": "04-08-2023, 23:59:43",
    "recorded-content": {
      "missing-param-exception": {
        "Error": {
          "Code": "AccessDenied",
          "HostId": "host-id",
          "Message": "Query-string authentication requires the Signature, Expires and AWSAccessKeyId parameters",
          "RequestId": "<request-id:1>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_s3_put_presigned_url_missing_sig_param[s3v4]": {
    "recorded-date": "04-08-2023, 23:59:45",
    "recorded-content": {
      "missing-param-exception": {
        "Error": {
          "Code": "AuthorizationQueryParametersError",
          "HostId": "host-id",
          "Message": "Query-string authentication version 4 requires the X-Amz-Algorithm, X-Amz-Credential, X-Amz-Signature, X-Amz-Date, X-Amz-SignedHeaders, and X-Amz-Expires parameters.",
          "RequestId": "<request-id:1>"
        },
        "StatusCode": 400
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_s3_put_presigned_url_with_different_headers[s3]": {
    "recorded-date": "04-08-2023, 23:59:34",
    "recorded-content": {
      "content-type-exception": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        },
        "StatusCode": 403
      },
      "content-type-response": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:2>",
          "SignatureProvided": "<signature-provided:2>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:2>"
        },
        "StatusCode": 403
      },
      "wrong-content-encoding-response": {
        "StatusCode": 200
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_s3_put_presigned_url_with_different_headers[s3v4]": {
    "recorded-date": "04-08-2023, 23:59:38",
    "recorded-content": {
      "content-type-exception": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        },
        "StatusCode": 403
      },
      "content-type-response": {
        "StatusCode": 200
      },
      "wrong-content-encoding-response": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:2>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:2>",
          "SignatureProvided": "<signature-provided:2>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:2>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedUrl::test_s3_put_presigned_url_same_header_and_qs_parameter": {
    "recorded-date": "04-08-2023, 23:59:41",
    "recorded-content": {
      "double-header-query-string": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "CanonicalRequest": "<canonical-request>",
          "CanonicalRequestBytes": "<canonical-request-bytes:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        },
        "StatusCode": 403
      },
      "override-signed-qs": {
        "Error": {
          "Code": "AccessDenied",
          "HeadersNotSigned": "x-amz-expires",
          "HostId": "host-id",
          "Message": "There were headers present in the request which were not signed",
          "RequestId": "<request-id:2>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedPost::test_post_request_expires": {
    "recorded-date": "04-08-2023, 23:58:47",
    "recorded-content": {
      "exception": {
        "Error": {
          "Code": "AccessDenied",
          "HostId": "host-id",
          "Message": "Invalid according to Policy: Policy expired.",
          "RequestId": "<request-id:1>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedPost::test_post_request_malformed_policy[s3]": {
    "recorded-date": "04-08-2023, 23:58:49",
    "recorded-content": {
      "exception-policy": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedPost::test_post_request_malformed_policy[s3v4]": {
    "recorded-date": "04-08-2023, 23:58:51",
    "recorded-content": {
      "exception-policy": {
        "Error": {
          "AWSAccessKeyId": "<a-w-s-access-key-id:1>",
          "Code": "SignatureDoesNotMatch",
          "HostId": "host-id",
          "Message": "The request signature we calculated does not match the signature you provided. Check your key and signing method.",
          "RequestId": "<request-id:1>",
          "SignatureProvided": "<signature-provided:1>",
          "StringToSign": "<string-to-sign>",
          "StringToSignBytes": "<string-to-sign-bytes:1>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedPost::test_post_request_missing_signature[s3]": {
    "recorded-date": "04-08-2023, 23:58:52",
    "recorded-content": {
      "exception-missing-signature": {
        "Error": {
          "ArgumentName": "Signature",
          "ArgumentValue": null,
          "Code": "InvalidArgument",
          "HostId": "host-id",
          "Message": "Bucket POST must contain a field named 'Signature'.  If it is specified, please check the order of the fields.",
          "RequestId": "<request-id:1>"
        },
        "StatusCode": 400
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedPost::test_post_request_missing_signature[s3v4]": {
    "recorded-date": "04-08-2023, 23:58:54",
    "recorded-content": {
      "exception-missing-signature": {
        "Error": {
          "ArgumentName": "X-Amz-Signature",
          "ArgumentValue": null,
          "Code": "InvalidArgument",
          "HostId": "host-id",
          "Message": "Bucket POST must contain a field named 'X-Amz-Signature'.  If it is specified, please check the order of the fields.",
          "RequestId": "<request-id:1>"
        },
        "StatusCode": 400
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedPost::test_post_request_missing_fields[s3]": {
    "recorded-date": "04-08-2023, 23:58:56",
    "recorded-content": {
      "exception-missing-fields": {
        "Error": {
          "ArgumentName": "AWSAccessKeyId",
          "ArgumentValue": null,
          "Code": "InvalidArgument",
          "HostId": "host-id",
          "Message": "Bucket POST must contain a field named 'AWSAccessKeyId'.  If it is specified, please check the order of the fields.",
          "RequestId": "<request-id:1>"
        },
        "StatusCode": 400
      },
      "exception-no-sig-related-fields": {
        "Error": {
          "Code": "AccessDenied",
          "HostId": "host-id",
          "Message": "Access Denied",
          "RequestId": "<request-id:2>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedPost::test_post_request_missing_fields[s3v4]": {
    "recorded-date": "04-08-2023, 23:58:58",
    "recorded-content": {
      "exception-missing-fields": {
        "Error": {
          "ArgumentName": "X-Amz-Algorithm",
          "ArgumentValue": null,
          "Code": "InvalidArgument",
          "HostId": "host-id",
          "Message": "Bucket POST must contain a field named 'X-Amz-Algorithm'.  If it is specified, please check the order of the fields.",
          "RequestId": "<request-id:1>"
        },
        "StatusCode": 400
      },
      "exception-no-sig-related-fields": {
        "Error": {
          "Code": "AccessDenied",
          "HostId": "host-id",
          "Message": "Access Denied",
          "RequestId": "<request-id:2>"
        },
        "StatusCode": 403
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3StaticWebsiteHosting::test_validate_website_configuration": {
    "recorded-date": "26-08-2023, 00:30:03",
    "recorded-content": {
      "invalid-website-conf-0": {
        "Error": {
          "ArgumentName": "IndexDocument",
          "ArgumentValue": "/index.html",
          "Code": "InvalidArgument",
          "Message": "The IndexDocument Suffix is not well formed"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-website-conf-1": {
        "Error": {
          "ArgumentName": "IndexDocument",
          "ArgumentValue": null,
          "Code": "InvalidArgument",
          "Message": "The IndexDocument Suffix is not well formed"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-website-conf-2": {
        "Error": {
          "ArgumentName": "RedirectAllRequestsTo",
          "ArgumentValue": "not null",
          "Code": "InvalidArgument",
          "Message": "RedirectAllRequestsTo cannot be provided in conjunction with other Routing Rules."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-website-conf-3": {
        "Error": {
          "ArgumentName": "IndexDocument",
          "ArgumentValue": "null",
          "Code": "InvalidArgument",
          "Message": "A value for IndexDocument Suffix must be provided if RedirectAllRequestsTo is empty"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-website-conf-4": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Invalid protocol, protocol can be http or https. If not defined the protocol will be selected automatically."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-website-conf-5": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "You can only define ReplaceKeyPrefix or ReplaceKey but not both."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-website-conf-6": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Condition cannot be empty. To redirect all requests without a condition, the condition element shouldn't be present."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "invalid-website-conf-7": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3StaticWebsiteHosting::test_crud_website_configuration": {
    "recorded-date": "26-08-2023, 00:29:24",
    "recorded-content": {
      "get-no-such-website-config": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchWebsiteConfiguration",
          "Message": "The specified bucket does not have a website configuration"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "del-no-such-website-config": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "put-website-config": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-website-config": {
        "IndexDocument": {
          "Suffix": "index.html"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3StaticWebsiteHosting::test_website_hosting_http_methods": {
    "recorded-date": "26-08-2023, 00:30:55",
    "recorded-content": {
      "not-allowed-post": {
        "content": "<html>\n<head><title>405 Method Not Allowed</title></head>\n<body>\n<h1>405 Method Not Allowed</h1>\n<ul>\n<li>Code: MethodNotAllowed</li>\n<li>Message: The specified method is not allowed against this resource.</li>\n<li>Method: POST</li>\n<li>ResourceType: OBJECT</li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n"
      },
      "not-allowed-delete": {
        "content": "<html>\n<head><title>405 Method Not Allowed</title></head>\n<body>\n<h1>405 Method Not Allowed</h1>\n<ul>\n<li>Code: MethodNotAllowed</li>\n<li>Message: The specified method is not allowed against this resource.</li>\n<li>Method: DELETE</li>\n<li>ResourceType: OBJECT</li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n"
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3StaticWebsiteHosting::test_website_hosting_index_lookup": {
    "recorded-date": "26-08-2023, 00:31:15",
    "recorded-content": {
      "404-no-trailing-slash": "<html>\n<head><title>404 Not Found</title></head>\n<body>\n<h1>404 Not Found</h1>\n<ul>\n<li>Code: NoSuchKey</li>\n<li>Message: The specified key does not exist.</li>\n<li>Key: directory-wrong</li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n",
      "404-with-trailing-slash": "<html>\n<head><title>404 Not Found</title></head>\n<body>\n<h1>404 Not Found</h1>\n<ul>\n<li>Code: NoSuchKey</li>\n<li>Message: The specified key does not exist.</li>\n<li>Key: directory-wrong/index.html</li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n"
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3StaticWebsiteHosting::test_website_hosting_404": {
    "recorded-date": "26-08-2023, 00:30:33",
    "recorded-content": {
      "404-no-such-key": "<html>\n<head><title>404 Not Found</title></head>\n<body>\n<h1>404 Not Found</h1>\n<ul>\n<li>Code: NoSuchKey</li>\n<li>Message: The specified key does not exist.</li>\n<li>Key: index.html</li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n",
      "404-no-such-key-nor-custom": "<html>\n<head><title>404 Not Found</title></head>\n<body>\n<h1>404 Not Found</h1>\n<ul>\n<li>Code: NoSuchKey</li>\n<li>Message: The specified key does not exist.</li>\n<li>Key: index.html</li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<h3>An Error Occurred While Attempting to Retrieve a Custom Error Document</h3>\n<ul>\n<li>Code: NoSuchKey</li>\n<li>Message: The specified key does not exist.</li>\n<li>Key: error.html</li>\n</ul>\n<hr/>\n</body>\n</html>\n"
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3StaticWebsiteHosting::test_website_hosting_no_such_website": {
    "recorded-date": "26-08-2023, 00:31:30",
    "recorded-content": {
      "no-such-bucket": "<html>\n<head><title>404 Not Found</title></head>\n<body>\n<h1>404 Not Found</h1>\n<ul>\n<li>Code: NoSuchBucket</li>\n<li>Message: The specified bucket does not exist</li>\n<li>BucketName: <bucket-name></li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n",
      "no-such-website-config": "<html>\n<head><title>404 Not Found</title></head>\n<body>\n<h1>404 Not Found</h1>\n<ul>\n<li>Code: NoSuchWebsiteConfiguration</li>\n<li>Message: The specified bucket does not have a website configuration</li>\n<li>BucketName: <bucket-name></li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n",
      "no-such-website-config-key": "<html>\n<head><title>404 Not Found</title></head>\n<body>\n<h1>404 Not Found</h1>\n<ul>\n<li>Code: NoSuchWebsiteConfiguration</li>\n<li>Message: The specified bucket does not have a website configuration</li>\n<li>BucketName: <bucket-name></li>\n<li>RequestId: <request-id></li>\n<li>HostId: <host-id></li>\n</ul>\n<hr/>\n</body>\n</html>\n"
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_multipart_and_list_parts": {
    "recorded-date": "03-08-2023, 04:14:05",
    "recorded-content": {
      "create-multipart": {
        "Bucket": "bucket",
        "Key": "test-list-parts",
        "ServerSideEncryption": "AES256",
        "UploadId": "<upload-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-part-after-created": {
        "Bucket": "bucket",
        "Initiator": {
          "DisplayName": "display-name",
          "ID": "owner-id"
        },
        "IsTruncated": false,
        "Key": "test-list-parts",
        "MaxParts": 1000,
        "NextPartNumberMarker": 0,
        "Owner": {
          "DisplayName": "display-name",
          "ID": "owner-id"
        },
        "PartNumberMarker": 0,
        "StorageClass": "STANDARD",
        "UploadId": "<upload-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-all-uploads": {
        "Bucket": "bucket",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxUploads": 1000,
        "NextKeyMarker": "test-list-parts",
        "NextUploadIdMarker": "<upload-id:1>",
        "UploadIdMarker": "",
        "Uploads": [
          {
            "Initiated": "datetime",
            "Initiator": {
              "DisplayName": "display-name",
              "ID": "owner-id"
            },
            "Key": "test-list-parts",
            "Owner": {
              "DisplayName": "display-name",
              "ID": "owner-id"
            },
            "StorageClass": "STANDARD",
            "UploadId": "<upload-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "upload-part": {
        "ETag": "\"3237c18681adb6a9d843c733ce249480\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-part-after-upload": {
        "Bucket": "bucket",
        "Initiator": {
          "DisplayName": "display-name",
          "ID": "owner-id"
        },
        "IsTruncated": false,
        "Key": "test-list-parts",
        "MaxParts": 1000,
        "NextPartNumberMarker": 1,
        "Owner": {
          "DisplayName": "display-name",
          "ID": "owner-id"
        },
        "PartNumberMarker": 0,
        "Parts": [
          {
            "ETag": "\"3237c18681adb6a9d843c733ce249480\"",
            "LastModified": "datetime",
            "PartNumber": 1,
            "Size": 65
          }
        ],
        "StorageClass": "STANDARD",
        "UploadId": "<upload-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-all-uploads-after": {
        "Bucket": "bucket",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxUploads": 1000,
        "NextKeyMarker": "test-list-parts",
        "NextUploadIdMarker": "<upload-id:1>",
        "UploadIdMarker": "",
        "Uploads": [
          {
            "Initiated": "datetime",
            "Initiator": {
              "DisplayName": "display-name",
              "ID": "owner-id"
            },
            "Key": "test-list-parts",
            "Owner": {
              "DisplayName": "display-name",
              "ID": "owner-id"
            },
            "StorageClass": "STANDARD",
            "UploadId": "<upload-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "complete-multipart": {
        "Bucket": "bucket",
        "ETag": "\"e747540af6911dbc890f8d3e0b48549b-1\"",
        "Key": "test-list-parts",
        "Location": "<location:1>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-part-after-complete-exc": {
        "Error": {
          "Code": "NoSuchUpload",
          "Message": "The specified upload does not exist. The upload ID may be invalid, or the upload may have been aborted or completed.",
          "UploadId": "<upload-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "list-all-uploads-completed": {
        "Bucket": "bucket",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxUploads": 1000,
        "NextKeyMarker": "",
        "NextUploadIdMarker": "",
        "UploadIdMarker": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_and_get_object_with_content_language_disposition": {
    "recorded-date": "03-08-2023, 04:13:24",
    "recorded-content": {
      "put-object": {
        "ETag": "\"e99a18c428cb38d5f260853678922e03\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-headers": {
        "HTTPHeaders": {
          "content-length": "0",
          "date": "date",
          "etag": "\"e99a18c428cb38d5f260853678922e03\"",
          "server": "server",
          "x-amz-id-2": "id-2",
          "x-amz-request-id": "request-id",
          "x-amz-server-side-encryption": "AES256"
        },
        "HTTPStatusCode": 200,
        "HostId": "host-id",
        "RequestId": "request-id",
        "RetryAttempts": 0
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "CacheControl": "no-cache",
        "ContentDisposition": "attachment; filename=\"foo.jpg\"",
        "ContentLanguage": "de",
        "ContentLength": 6,
        "ContentType": "binary/octet-stream",
        "ETag": "\"e99a18c428cb38d5f260853678922e03\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-headers": {
        "HTTPHeaders": {
          "accept-ranges": "bytes",
          "cache-control": "no-cache",
          "content-disposition": "attachment; filename=\"foo.jpg\"",
          "content-language": "de",
          "content-length": "6",
          "content-type": "binary/octet-stream",
          "date": "date",
          "etag": "\"e99a18c428cb38d5f260853678922e03\"",
          "last-modified": "last-modified",
          "server": "server",
          "x-amz-id-2": "id-2",
          "x-amz-request-id": "request-id",
          "x-amz-server-side-encryption": "AES256"
        },
        "HTTPStatusCode": 200,
        "HostId": "host-id",
        "RequestId": "request-id",
        "RetryAttempts": 0
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_copy_object_kms": {
    "recorded-date": "03-08-2023, 04:13:12",
    "recorded-content": {
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "hello world",
        "ContentLength": 11,
        "ContentType": "binary/octet-stream",
        "ETag": "\"5eb63bbbe01eeed093cb22bb8f5acdc3\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object": {
        "BucketKeyEnabled": true,
        "CopyObjectResult": {
          "ETag": "copy-etag",
          "LastModified": "datetime"
        },
        "SSEKMSKeyId": "<key-id:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-copied-object": {
        "AcceptRanges": "bytes",
        "Body": "hello world",
        "BucketKeyEnabled": true,
        "ContentLength": 11,
        "ContentType": "binary/octet-stream",
        "ETag": "etag",
        "LastModified": "datetime",
        "Metadata": {},
        "SSEKMSKeyId": "<key-id:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketReplication::test_replication_config": {
    "recorded-date": "12-08-2023, 20:11:46",
    "recorded-content": {
      "expected_error_no_replication_set": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "ReplicationConfigurationNotFoundError",
          "Message": "The replication configuration was not found"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "expected_error_versioning_not_enabled": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Versioning must be 'Enabled' on the bucket to apply a replication configuration"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-replication": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-replication": {
        "ReplicationConfiguration": {
          "Role": "role",
          "Rules": [
            {
              "DeleteMarkerReplication": {
                "Status": "Disabled"
              },
              "Destination": {
                "Bucket": "dest-bucket"
              },
              "Filter": {
                "Prefix": "Tax"
              },
              "ID": "id",
              "Priority": 1,
              "Status": "Enabled"
            }
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-empty-bucket-replication-rules": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "delete-bucket-replication": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "delete-bucket-replication-idempotent": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_delete_non_existing_keys_quiet": {
    "recorded-date": "03-08-2023, 04:17:06",
    "recorded-content": {
      "deleted-resp": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketReplication::test_replication_config_without_filter": {
    "recorded-date": "03-08-2023, 04:13:02",
    "recorded-content": {
      "expected_error_dest_does_not_exist": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Destination bucket must have versioning enabled."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "expected_error_dest_versioning_disabled": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Destination bucket must have versioning enabled."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-replication": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-replication": {
        "ReplicationConfiguration": {
          "Role": "role",
          "Rules": [
            {
              "DeleteMarkerReplication": {
                "Status": "Disabled"
              },
              "Destination": {
                "Bucket": "dest-bucket",
                "Metrics": {
                  "EventThreshold": {
                    "Minutes": 15
                  },
                  "Status": "Enabled"
                },
                "ReplicationTime": {
                  "Status": "Enabled",
                  "Time": {
                    "Minutes": 15
                  }
                },
                "StorageClass": "STANDARD"
              },
              "Filter": {},
              "ID": "rtc",
              "Priority": 0,
              "Status": "Disabled"
            }
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_sse_validate_kms_key": {
    "recorded-date": "03-08-2023, 04:23:56",
    "recorded-content": {
      "create-kms-key": {
        "AWSAccountId": "111111111111",
        "Arn": "arn:aws:kms:<region>:111111111111:key/<uuid:1>",
        "CreationDate": "datetime",
        "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
        "Description": "<description:1>",
        "Enabled": true,
        "EncryptionAlgorithms": [
          "SYMMETRIC_DEFAULT"
        ],
        "KeyId": "<uuid:1>",
        "KeyManager": "CUSTOMER",
        "KeySpec": "SYMMETRIC_DEFAULT",
        "KeyState": "Enabled",
        "KeyUsage": "ENCRYPT_DECRYPT",
        "MultiRegion": false,
        "Origin": "AWS_KMS"
      },
      "put-obj-wrong-kms-key": {
        "Error": {
          "Code": "KMS.NotFoundException",
          "Message": "Invalid keyId fake-key-id"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-obj-wrong-kms-key-real-uuid": {
        "Error": {
          "Code": "KMS.NotFoundException",
          "Message": "Key 'arn:aws:kms:us-west-2:111111111111:key/134f2428-cec1-4b25-a1ae-9048164dba47' does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-obj-wrong-kms-key-real-uuid-arn": {
        "Error": {
          "Code": "KMS.NotFoundException",
          "Message": "Key 'arn:aws:kms:us-west-2:111111111111:key/134f2428-cec1-4b25-a1ae-9048164dba47' does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-obj-different-region-kms-key": {
        "Error": {
          "Code": "KMS.NotFoundException",
          "Message": "Invalid arn <region>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-obj-different-region-kms-key-no-arn": {
        "Error": {
          "Code": "KMS.NotFoundException",
          "Message": "Key 'arn:aws:kms:us-west-2:111111111111:key/<uuid:1>' does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create-multipart-wrong-kms-key": {
        "Error": {
          "Code": "KMS.NotFoundException",
          "Message": "Invalid keyId fake-key-id"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "copy-obj-wrong-kms-key": {
        "Error": {
          "Code": "KMS.NotFoundException",
          "Message": "Invalid keyId fake-key-id"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_complete_multipart_parts_order": {
    "recorded-date": "03-08-2023, 04:24:38",
    "recorded-content": {
      "upload-part-negative-part-number": {
        "Error": {
          "ArgumentName": "partNumber",
          "ArgumentValue": "-1",
          "Code": "InvalidArgument",
          "Message": "Part number must be an integer between 1 and 10000, inclusive"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "complete-multipart-unordered": {
        "Error": {
          "Code": "InvalidPartOrder",
          "Message": "The list of parts was not in ascending order. Parts must be ordered by part number.",
          "UploadId": "<upload-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "complete-multipart-ordered": {
        "Bucket": "bucket",
        "ETag": "\"c7cb0938a47e31f70cf07028d22e6913-3\"",
        "Key": "test-order-parts",
        "Location": "<location:1>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "complete-multipart-with-step-2": {
        "Bucket": "bucket",
        "ETag": "\"c7cb0938a47e31f70cf07028d22e6913-3\"",
        "Key": "key-sequence-with-step-2",
        "Location": "<location:2>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_storage_class[STANDARD]": {
    "recorded-date": "03-08-2023, 04:24:40",
    "recorded-content": {
      "get-object-storage-class": {
        "LastModified": "datetime",
        "StorageClass": "STANDARD",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_storage_class[STANDARD_IA]": {
    "recorded-date": "03-08-2023, 04:24:42",
    "recorded-content": {
      "get-object-storage-class": {
        "LastModified": "datetime",
        "StorageClass": "STANDARD_IA",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_storage_class[GLACIER]": {
    "recorded-date": "03-08-2023, 04:24:44",
    "recorded-content": {
      "get-object-storage-class": {
        "LastModified": "datetime",
        "StorageClass": "GLACIER",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_storage_class[GLACIER_IR]": {
    "recorded-date": "03-08-2023, 04:24:46",
    "recorded-content": {
      "get-object-storage-class": {
        "LastModified": "datetime",
        "StorageClass": "GLACIER_IR",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_storage_class[REDUCED_REDUNDANCY]": {
    "recorded-date": "03-08-2023, 04:24:48",
    "recorded-content": {
      "get-object-storage-class": {
        "LastModified": "datetime",
        "StorageClass": "REDUCED_REDUNDANCY",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_storage_class[ONEZONE_IA]": {
    "recorded-date": "03-08-2023, 04:24:50",
    "recorded-content": {
      "get-object-storage-class": {
        "LastModified": "datetime",
        "StorageClass": "ONEZONE_IA",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_storage_class[INTELLIGENT_TIERING]": {
    "recorded-date": "03-08-2023, 04:24:52",
    "recorded-content": {
      "get-object-storage-class": {
        "LastModified": "datetime",
        "StorageClass": "INTELLIGENT_TIERING",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_storage_class[DEEP_ARCHIVE]": {
    "recorded-date": "03-08-2023, 04:24:54",
    "recorded-content": {
      "get-object-storage-class": {
        "LastModified": "datetime",
        "StorageClass": "DEEP_ARCHIVE",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_storage_class_outposts": {
    "recorded-date": "03-08-2023, 04:24:56",
    "recorded-content": {
      "put-object-outposts": {
        "Error": {
          "Code": "InvalidStorageClass",
          "Message": "The storage class you specified is not valid",
          "StorageClassRequested": "OUTPOSTS"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create-multipart-outposts-exc": {
        "Error": {
          "Code": "InvalidStorageClass",
          "Message": "The storage class you specified is not valid",
          "StorageClassRequested": "OUTPOSTS"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_get_object_checksum[SHA256]": {
    "recorded-date": "03-08-2023, 04:14:55",
    "recorded-content": {
      "put-object": {
        "ChecksumSHA256": "1YQo81vx2VFUl0q5ccWISq8AkSBQQ0WO80S82TmfdIQ=",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ContentEncoding": "",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-with-checksum": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ChecksumSHA256": "1YQo81vx2VFUl0q5ccWISq8AkSBQQ0WO80S82TmfdIQ=",
        "ContentEncoding": "",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-checksum": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ChecksumSHA256": "1YQo81vx2VFUl0q5ccWISq8AkSBQQ0WO80S82TmfdIQ=",
        "ContentEncoding": "",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs": {
        "Checksum": {
          "ChecksumSHA256": "1YQo81vx2VFUl0q5ccWISq8AkSBQQ0WO80S82TmfdIQ="
        },
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_get_object_checksum[None]": {
    "recorded-date": "03-08-2023, 04:14:59",
    "recorded-content": {
      "put-object": {
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-with-checksum": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-checksum": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs": {
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_checksum_with_content_encoding": {
    "recorded-date": "03-08-2023, 04:15:01",
    "recorded-content": {
      "put-object": {
        "ChecksumSHA256": "WO7lLNG8Mn/d4GkX4DqZXqeaVHJCN+BxvMNJXLOhukg=",
        "ETag": "\"5287ceabf01e3e9c080606b5a5b9bf70\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ContentEncoding": "gzip",
        "ContentLength": 41,
        "ContentType": "binary/octet-stream",
        "ETag": "\"5287ceabf01e3e9c080606b5a5b9bf70\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-with-checksum": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ChecksumSHA256": "WO7lLNG8Mn/d4GkX4DqZXqeaVHJCN+BxvMNJXLOhukg=",
        "ContentEncoding": "gzip",
        "ContentLength": 41,
        "ContentType": "binary/octet-stream",
        "ETag": "\"5287ceabf01e3e9c080606b5a5b9bf70\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs": {
        "Checksum": {
          "ChecksumSHA256": "WO7lLNG8Mn/d4GkX4DqZXqeaVHJCN+BxvMNJXLOhukg="
        },
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_complete_multipart_parts_checksum": {
    "recorded-date": "03-08-2023, 04:25:24",
    "recorded-content": {
      "create-mpu-checksum": {
        "Bucket": "bucket",
        "ChecksumAlgorithm": "SHA256",
        "Key": "test-multipart-checksum",
        "ServerSideEncryption": "AES256",
        "UploadId": "<upload-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "upload-part-0": {
        "ChecksumSHA256": "DjU70AB1bON8k0n0fVHv2PJQVWcA/jWsITp6ti20Tbs=",
        "ETag": "\"c4c753e69bb853187f5854c46cf801c6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "upload-part-1": {
        "ChecksumSHA256": "DjU70AB1bON8k0n0fVHv2PJQVWcA/jWsITp6ti20Tbs=",
        "ETag": "\"c4c753e69bb853187f5854c46cf801c6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "upload-part-2": {
        "ChecksumSHA256": "DjU70AB1bON8k0n0fVHv2PJQVWcA/jWsITp6ti20Tbs=",
        "ETag": "\"c4c753e69bb853187f5854c46cf801c6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-parts": {
        "Bucket": "bucket",
        "ChecksumAlgorithm": "SHA256",
        "Initiator": {
          "DisplayName": "display-name",
          "ID": "i-d"
        },
        "IsTruncated": false,
        "Key": "test-multipart-checksum",
        "MaxParts": 1000,
        "NextPartNumberMarker": 3,
        "Owner": {
          "DisplayName": "display-name",
          "ID": "i-d"
        },
        "PartNumberMarker": 0,
        "Parts": [
          {
            "ChecksumSHA256": "DjU70AB1bON8k0n0fVHv2PJQVWcA/jWsITp6ti20Tbs=",
            "ETag": "\"c4c753e69bb853187f5854c46cf801c6\"",
            "LastModified": "datetime",
            "PartNumber": 1,
            "Size": 5242881
          },
          {
            "ChecksumSHA256": "DjU70AB1bON8k0n0fVHv2PJQVWcA/jWsITp6ti20Tbs=",
            "ETag": "\"c4c753e69bb853187f5854c46cf801c6\"",
            "LastModified": "datetime",
            "PartNumber": 2,
            "Size": 5242881
          },
          {
            "ChecksumSHA256": "DjU70AB1bON8k0n0fVHv2PJQVWcA/jWsITp6ti20Tbs=",
            "ETag": "\"c4c753e69bb853187f5854c46cf801c6\"",
            "LastModified": "datetime",
            "PartNumber": 3,
            "Size": 5242881
          }
        ],
        "StorageClass": "STANDARD",
        "UploadId": "<upload-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "complete-multipart-without-checksum": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "The upload was created using a sha256 checksum. The complete request must include the checksum for each part. It was missing for part 1 in the request."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "complete-multipart-checksum": {
        "Bucket": "bucket",
        "ChecksumSHA256": "dVAleH1OmqkLvByTMLIWSjNCz3x2Ul1KJEZw3eQ2Fqg=-3",
        "ETag": "\"c7cb0938a47e31f70cf07028d22e6913-3\"",
        "Key": "test-multipart-checksum",
        "Location": "<location:1>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-with-checksum": {
        "AcceptRanges": "bytes",
        "Body": "",
        "ChecksumSHA256": "dVAleH1OmqkLvByTMLIWSjNCz3x2Ul1KJEZw3eQ2Fqg=-3",
        "ContentLength": 15728643,
        "ContentType": "binary/octet-stream",
        "ETag": "\"c7cb0938a47e31f70cf07028d22e6913-3\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs": {
        "Checksum": {
          "ChecksumSHA256": "dVAleH1OmqkLvByTMLIWSjNCz3x2Ul1KJEZw3eQ2Fqg="
        },
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_multipart_parts_checksum_exceptions": {
    "recorded-date": "03-08-2023, 04:25:28",
    "recorded-content": {
      "create-mpu-no-checksum": {
        "Bucket": "bucket",
        "Key": "test-multipart-checksum-exc",
        "ServerSideEncryption": "AES256",
        "UploadId": "<upload-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "upload-part-with-checksum": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Checksum Type mismatch occurred, expected checksum Type: null, actual checksum Type: sha256"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "upload-part-no-checksum-ok": {
        "ETag": "\"d41d8cd98f00b204e9800998ecf8427e\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "complete-part-with-checksum": {
        "Error": {
          "Code": "InvalidPart",
          "ETag": "d41d8cd98f00b204e9800998ecf8427e",
          "Message": "One or more of the specified parts could not be found.  The part may not have been uploaded, or the specified entity tag may not match the part's entity tag.",
          "PartNumber": "1",
          "UploadId": "<upload-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create-mpu-with-checksum": {
        "Bucket": "bucket",
        "ChecksumAlgorithm": "SHA256",
        "Key": "test-multipart-checksum-exc",
        "ServerSideEncryption": "AES256",
        "UploadId": "<upload-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "upload-part-no-checksum-exc": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Checksum Type mismatch occurred, expected checksum Type: sha256, actual checksum Type: null"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_list_objects_versions_with_prefix": {
    "recorded-date": "22-10-2023, 00:29:59",
    "recorded-content": {
      "list-object-version-1": {
        "CommonPrefixes": [
          {
            "Prefix": "dir/subdir/"
          }
        ],
        "Delimiter": "/",
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "dir/",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"c978d4a128605d97d7c5b1bd17250efd\"",
            "IsLatest": true,
            "Key": "dir/test",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 15,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          },
          {
            "ETag": "\"dbe906ced633d4580318b1cc37ce1ca4\"",
            "IsLatest": false,
            "Key": "dir/test",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 15,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-version-2": {
        "CommonPrefixes": [
          {
            "Prefix": "dir/subdir/"
          }
        ],
        "Delimiter": "/",
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "dir/s",
        "VersionIdMarker": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-version-3": {
        "Delimiter": "/",
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "dir/test",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"c978d4a128605d97d7c5b1bd17250efd\"",
            "IsLatest": true,
            "Key": "dir/test",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 15,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          },
          {
            "ETag": "\"dbe906ced633d4580318b1cc37ce1ca4\"",
            "IsLatest": false,
            "Key": "dir/test",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 15,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-version-4": {
        "CommonPrefixes": [
          {
            "Prefix": "dir/subdir/"
          }
        ],
        "Delimiter": "/",
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "dir/subdir",
        "VersionIdMarker": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-version-5": {
        "Delimiter": "/",
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "dir/subdir/",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"56a8b2485f9683f70ea3316e6fa46be1\"",
            "IsLatest": true,
            "Key": "dir/subdir/test2",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 15,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          },
          {
            "ETag": "\"eafcff1b58415aa1e09ab4891ca2fa8a\"",
            "IsLatest": false,
            "Key": "dir/subdir/test2",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 15,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:4>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-version-6": {
        "Delimiter": "/",
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "dir/subdir/test2",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"56a8b2485f9683f70ea3316e6fa46be1\"",
            "IsLatest": true,
            "Key": "dir/subdir/test2",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 15,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          },
          {
            "ETag": "\"eafcff1b58415aa1e09ab4891ca2fa8a\"",
            "IsLatest": false,
            "Key": "dir/subdir/test2",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 15,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:4>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-versions-no-encoding": {
        "ListVersionsResult": {
          "CommonPrefixes": {
            "Prefix": "dir/subdir/"
          },
          "Delimiter": "/",
          "IsTruncated": "false",
          "KeyMarker": null,
          "MaxKeys": "1000",
          "Name": "<bucket-name:1>",
          "Prefix": "dir/subdir",
          "VersionIdMarker": null
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_sse_validate_kms_key_state": {
    "recorded-date": "03-08-2023, 04:24:07",
    "recorded-content": {
      "create-kms-key": {
        "AWSAccountId": "111111111111",
        "Arn": "arn:aws:kms:<region>:111111111111:key/<uuid:1>",
        "CreationDate": "datetime",
        "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
        "Description": "<description:1>",
        "Enabled": true,
        "EncryptionAlgorithms": [
          "SYMMETRIC_DEFAULT"
        ],
        "KeyId": "<uuid:1>",
        "KeyManager": "CUSTOMER",
        "KeySpec": "SYMMETRIC_DEFAULT",
        "KeyState": "Enabled",
        "KeyUsage": "ENCRYPT_DECRYPT",
        "MultiRegion": false,
        "Origin": "AWS_KMS"
      },
      "success-put-object-sse": {
        "ETag": "\"b81a68cd58c9371a4b5ddce85a8c50d1\"",
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<uuid:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "success-get-object-sse": {
        "AcceptRanges": "bytes",
        "Body": "test-sse",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"b81a68cd58c9371a4b5ddce85a8c50d1\"",
        "LastModified": "datetime",
        "Metadata": {},
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<uuid:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-disabled-key": {
        "Error": {
          "Code": "KMS.DisabledException",
          "Message": "arn:aws:kms:<region>:111111111111:key/<uuid:1> is disabled."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-obj-disabled-key": {
        "Error": {
          "Code": "KMS.DisabledException",
          "Message": "arn:aws:kms:<region>:111111111111:key/<uuid:1> is disabled."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-obj-pending-deletion-key": {
        "Error": {
          "Code": "KMS.KMSInvalidStateException",
          "Message": "arn:aws:kms:<region>:111111111111:key/<uuid:1> is pending deletion."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_delete_keys_in_versioned_bucket": {
    "recorded-date": "03-08-2023, 04:17:11",
    "recorded-content": {
      "list-objects-v2": {
        "Contents": [
          {
            "ETag": "\"d28473b5c0d7abeb397551aa2fe42be7\"",
            "Key": "test-key-versioned",
            "LastModified": "datetime",
            "Size": 12,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 1,
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-object": {
        "Deleted": [
          {
            "DeleteMarker": true,
            "DeleteMarkerVersionId": "<version-id:1>",
            "Key": "test-key-versioned"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-version": {
        "DeleteMarkers": [
          {
            "IsLatest": true,
            "Key": "test-key-versioned",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "VersionId": "<version-id:1>"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"d28473b5c0d7abeb397551aa2fe42be7\"",
            "IsLatest": false,
            "Key": "test-key-versioned",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 12,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          },
          {
            "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
            "IsLatest": false,
            "Key": "test-key-versioned",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 9,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-object-version": {
        "Deleted": [
          {
            "Key": "test-key-versioned",
            "VersionId": "<version-id:3>"
          },
          {
            "Key": "test-key-versioned",
            "VersionId": "<version-id:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-v2-after-delete": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 0,
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-version-after-delete": {
        "DeleteMarkers": [
          {
            "IsLatest": true,
            "Key": "test-key-versioned",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "VersionId": "<version-id:1>"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-object-delete-marker": {
        "Deleted": [
          {
            "DeleteMarker": true,
            "DeleteMarkerVersionId": "<version-id:1>",
            "Key": "test-key-versioned",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_object_acl_on_delete_marker": {
    "recorded-date": "13-08-2023, 02:27:00",
    "recorded-content": {
      "put-obj-1": {
        "ETag": "\"437b930db84b8079c2dd804a71936b5f\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-obj-2": {
        "ETag": "\"d28473b5c0d7abeb397551aa2fe42be7\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-object": {
        "DeleteMarker": true,
        "VersionId": "<version-id:3>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "put-acl-delete-marker": {
        "Error": {
          "Code": "MethodNotAllowed",
          "Message": "The specified method is not allowed against this resource.",
          "Method": "PUT",
          "ResourceType": "DeleteMarker"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 405
        }
      },
      "get-acl-delete-marker": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "test-key-versioned",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put-acl-delete-marker-version-id": {
        "Error": {
          "Code": "MethodNotAllowed",
          "Message": "The specified method is not allowed against this resource.",
          "Method": "PUT",
          "ResourceType": "DeleteMarker"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 405
        }
      },
      "get-acl-delete-marker-version-id": {
        "Error": {
          "Code": "MethodNotAllowed",
          "Message": "The specified method is not allowed against this resource.",
          "Method": "GET",
          "ResourceType": "DeleteMarker"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 405
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_get_object_attributes_versioned": {
    "recorded-date": "03-08-2023, 04:14:03",
    "recorded-content": {
      "put-obj-v1": {
        "ETag": "\"e92499db864217242396e8ef766079a9\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-obj-v2": {
        "ETag": "\"d4ca1ed7571e2e7b1f1c375bd50fa220\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs": {
        "ETag": "d4ca1ed7571e2e7b1f1c375bd50fa220",
        "LastModified": "datetime",
        "ObjectSize": 9,
        "StorageClass": "STANDARD",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-key": {
        "DeleteMarker": true,
        "VersionId": "<version-id:3>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "deleted-object-attrs": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "key-attrs-versioned",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "get-object-attrs-v1": {
        "ETag": "e92499db864217242396e8ef766079a9",
        "LastModified": "datetime",
        "ObjectSize": 7,
        "StorageClass": "STANDARD",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_list_objects_v2_with_prefix": {
    "recorded-date": "22-10-2023, 00:35:27",
    "recorded-content": {
      "list-objects-v2-1": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test/bar/foo/123",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test/foo/bar/123test/foo/bar/456",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 2,
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "test/",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-v2-2": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test/foo/bar/123test/foo/bar/456",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 1,
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "test/foo",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-v2-3": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test/foo/bar/123test/foo/bar/456",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 1,
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "test/foo/bar",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-v2-no-encoding": {
        "ListBucketResult": {
          "Contents": {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test/foo/bar/123test/foo/bar/456",
            "LastModified": "date",
            "Size": "11",
            "StorageClass": "STANDARD"
          },
          "IsTruncated": "false",
          "KeyCount": "1",
          "MaxKeys": "1000",
          "Name": "<bucket-name:1>",
          "Prefix": "test/foo"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_list_multipart_uploads_parameters": {
    "recorded-date": "03-08-2023, 04:25:30",
    "recorded-content": {
      "create-multipart": {
        "Bucket": "bucket",
        "Key": "test-multipart-uploads-parameters",
        "ServerSideEncryption": "AES256",
        "UploadId": "<upload-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "upload-part": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-uploads-basic": {
        "Bucket": "bucket",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxUploads": 1000,
        "NextKeyMarker": "test-multipart-uploads-parameters",
        "NextUploadIdMarker": "<upload-id:1>",
        "UploadIdMarker": "",
        "Uploads": [
          {
            "Initiated": "datetime",
            "Initiator": {
              "DisplayName": "display-name",
              "ID": "i-d"
            },
            "Key": "test-multipart-uploads-parameters",
            "Owner": {
              "DisplayName": "display-name",
              "ID": "i-d"
            },
            "StorageClass": "STANDARD",
            "UploadId": "<upload-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-uploads-max-uploads": {
        "Bucket": "bucket",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxUploads": 1,
        "NextKeyMarker": "test-multipart-uploads-parameters",
        "NextUploadIdMarker": "<upload-id:1>",
        "UploadIdMarker": "",
        "Uploads": [
          {
            "Initiated": "datetime",
            "Initiator": {
              "DisplayName": "display-name",
              "ID": "i-d"
            },
            "Key": "test-multipart-uploads-parameters",
            "Owner": {
              "DisplayName": "display-name",
              "ID": "i-d"
            },
            "StorageClass": "STANDARD",
            "UploadId": "<upload-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-uploads-delimiter": {
        "Bucket": "bucket",
        "Delimiter": "/",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxUploads": 1000,
        "NextKeyMarker": "test-multipart-uploads-parameters",
        "NextUploadIdMarker": "<upload-id:1>",
        "UploadIdMarker": "",
        "Uploads": [
          {
            "Initiated": "datetime",
            "Initiator": {
              "DisplayName": "display-name",
              "ID": "i-d"
            },
            "Key": "test-multipart-uploads-parameters",
            "Owner": {
              "DisplayName": "display-name",
              "ID": "i-d"
            },
            "StorageClass": "STANDARD",
            "UploadId": "<upload-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_multipart_upload_sse": {
    "recorded-date": "03-08-2023, 04:25:32",
    "recorded-content": {
      "multi-sse-create-multipart": {
        "Bucket": "<bucket>",
        "BucketKeyEnabled": true,
        "Key": "test-sse-field-multipart",
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<SSEKMSKeyId:1>",
        "ServerSideEncryption": "aws:kms",
        "UploadId": "<upload-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "multi-sse-upload-part": {
        "BucketKeyEnabled": true,
        "ETag": "\"65784ca4497d11e297a2fb55807714b2\"",
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<SSEKMSKeyId:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "multi-sse-compete-multipart": {
        "Bucket": "<bucket>",
        "BucketKeyEnabled": true,
        "ETag": "\"4582461eadfccba25baeccf1dff3685f-1\"",
        "Key": "test-sse-field-multipart",
        "Location": "<location:1>",
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<SSEKMSKeyId:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj": {
        "AcceptRanges": "bytes",
        "Body": "test-sse",
        "BucketKeyEnabled": true,
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"4582461eadfccba25baeccf1dff3685f-1\"",
        "LastModified": "datetime",
        "Metadata": {},
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<SSEKMSKeyId:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_sse_bucket_key_default": {
    "recorded-date": "03-08-2023, 04:25:36",
    "recorded-content": {
      "put-obj-default-before-setting": {
        "ETag": "\"42832cdec7083e70a9cd6f2d5852e004\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-default-before-setting": {
        "AcceptRanges": "bytes",
        "Body": "test-sse",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"42832cdec7083e70a9cd6f2d5852e004\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-bucket-encryption": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-encryption": {
        "ServerSideEncryptionConfiguration": {
          "Rules": [
            {
              "ApplyServerSideEncryptionByDefault": {
                "KMSMasterKeyID": "<SSEKMSKeyId:1>",
                "SSEAlgorithm": "aws:kms"
              },
              "BucketKeyEnabled": true
            }
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-default-after-setting": {
        "AcceptRanges": "bytes",
        "Body": "test-sse",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"42832cdec7083e70a9cd6f2d5852e004\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-obj-after-setting": {
        "BucketKeyEnabled": true,
        "ETag": "\"0974150952f40577037f6474c338ceea\"",
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<SSEKMSKeyId:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-after-setting": {
        "AcceptRanges": "bytes",
        "Body": "test-sse",
        "BucketKeyEnabled": true,
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"0974150952f40577037f6474c338ceea\"",
        "LastModified": "datetime",
        "Metadata": {},
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<SSEKMSKeyId:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_sse_default_kms_key": {
    "recorded-date": "03-04-2023, 22:16:19",
    "recorded-content": {
      "put-obj-default-kms-s3-key": {
        "ETag": "\"dbcc38f7b88c4c92ee5f9484d181ff51\"",
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<SSEKMSKeyId:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-default-kms-s3-key": {
        "AcceptRanges": "bytes",
        "Body": "test-sse",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"dbcc38f7b88c4c92ee5f9484d181ff51\"",
        "LastModified": "datetime",
        "Metadata": {},
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<SSEKMSKeyId:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-obj-default-kms-s3-key-bucket-2": {
        "ETag": "\"9c8f3cc18cd06e60966725b1c5996554\"",
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<SSEKMSKeyId:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-default-kms-s3-key-bucket-2": {
        "AcceptRanges": "bytes",
        "Body": "test-sse",
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"9c8f3cc18cd06e60966725b1c5996554\"",
        "LastModified": "datetime",
        "Metadata": {},
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<SSEKMSKeyId:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-bucket-encryption-default-kms-s3-key": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-encryption-default-kms-s3-key": {
        "ServerSideEncryptionConfiguration": {
          "Rules": [
            {
              "ApplyServerSideEncryptionByDefault": {
                "SSEAlgorithm": "aws:kms"
              },
              "BucketKeyEnabled": true
            }
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-obj-default-kms-s3-key-from-bucket": {
        "BucketKeyEnabled": true,
        "ETag": "\"671ef6aeba0f69c2391cf0a1b094d0aa\"",
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<SSEKMSKeyId:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-default-kms-s3-key-from-bucket": {
        "AcceptRanges": "bytes",
        "Body": "test-sse",
        "BucketKeyEnabled": true,
        "ContentLength": 8,
        "ContentType": "binary/octet-stream",
        "ETag": "\"671ef6aeba0f69c2391cf0a1b094d0aa\"",
        "LastModified": "datetime",
        "Metadata": {},
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<SSEKMSKeyId:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_object_in_place": {
    "recorded-date": "03-08-2023, 16:51:58",
    "recorded-content": {
      "put_object": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs": {
        "LastModified": "datetime",
        "StorageClass": "STANDARD",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-in-place-no-change": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "This copy request is illegal because it is trying to copy an object to itself without changing the object's metadata, storage class, website redirect location or encryption attributes."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "copy-object-in-place-with-storage-class": {
        "CopyObjectResult": {
          "ChecksumSHA256": "lyTB4g5uPk1/V+0l+dTvsAblCFkNUoyQ2ll/andcE+U=",
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs-after-copy": {
        "LastModified": "datetime",
        "StorageClass": "STANDARD",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:2>",
          "ID": "<owner-id:2>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-in-place-with-acl": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "This copy request is illegal because it is trying to copy an object to itself without changing the object's metadata, storage class, website redirect location or encryption attributes."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_object_in_place_metadata_directive": {
    "recorded-date": "03-08-2023, 04:15:33",
    "recorded-content": {
      "put_object": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head_object": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "application/json",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "no-metadata-directive-fail": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "This copy request is illegal because it is trying to copy an object to itself without changing the object's metadata, storage class, website redirect location or encryption attributes."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "copy-replace-directive": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-replace-directive": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "binary/octet-stream",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key2": "value2"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-copy-directive": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-copy-directive": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "binary/octet-stream",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key2": "value2"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-copy-directive-ignore": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-copy-directive-ignore": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "binary/octet-stream",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {
          "key2": "value2"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-replace-directive-empty": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-replace-directive-empty": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "binary/octet-stream",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_object_in_place_storage_class": {
    "recorded-date": "03-08-2023, 04:15:24",
    "recorded-content": {
      "put-object": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs": {
        "LastModified": "datetime",
        "StorageClass": "STANDARD",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-in-place-with-storage-class": {
        "CopyObjectResult": {
          "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs-after-copy": {
        "LastModified": "datetime",
        "StorageClass": "STANDARD",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_object_in_place_with_encryption": {
    "recorded-date": "03-08-2023, 04:15:27",
    "recorded-content": {
      "put-object-with-kms-encryption": {
        "BucketKeyEnabled": true,
        "ETag": "\"a1bbe074fcc346fea3fb9e3e6fc7dcce\"",
        "SSEKMSKeyId": "<s-s-e-k-m-s-key-id:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object": {
        "AcceptRanges": "bytes",
        "BucketKeyEnabled": true,
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"a1bbe074fcc346fea3fb9e3e6fc7dcce\"",
        "LastModified": "datetime",
        "Metadata": {},
        "SSEKMSKeyId": "<s-s-e-k-m-s-key-id:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-in-place-with-sse": {
        "CopyObjectResult": {
          "ETag": "\"2eba5d22eb3a2551d7fd8284afd1a9d0\"",
          "LastModified": "datetime"
        },
        "SSEKMSKeyId": "<s-s-e-k-m-s-key-id:2>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-copy-with-sse": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"2eba5d22eb3a2551d7fd8284afd1a9d0\"",
        "LastModified": "datetime",
        "Metadata": {},
        "SSEKMSKeyId": "<s-s-e-k-m-s-key-id:2>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-in-place-without-kms-sse": {
        "CopyObjectResult": {
          "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-copy-without-kms-sse": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-in-place-with-aes": {
        "CopyObjectResult": {
          "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-copy-with-aes": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_object_storage_class": {
    "recorded-date": "03-08-2023, 04:15:45",
    "recorded-content": {
      "put-object": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "StorageClass": "STANDARD_IA",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs": {
        "LastModified": "datetime",
        "StorageClass": "STANDARD_IA",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-in-place-with-storage-class": {
        "CopyObjectResult": {
          "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs-after-copy": {
        "LastModified": "datetime",
        "StorageClass": "STANDARD",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "exc-invalid-request-storage-class": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "This copy request is illegal because it is trying to copy an object to itself without changing the object's metadata, storage class, website redirect location or encryption attributes."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_metadata_directive_copy": {
    "recorded-date": "03-08-2023, 04:15:06",
    "recorded-content": {
      "put-object": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object": {
        "AcceptRanges": "bytes",
        "ContentLanguage": "en-US",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object": {
        "CopyObjectResult": {
          "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-copy": {
        "AcceptRanges": "bytes",
        "ContentLanguage": "en-US",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {
          "key": "value"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_object_in_place_website_redirect_location": {
    "recorded-date": "03-08-2023, 04:15:36",
    "recorded-content": {
      "put-object": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "WebsiteRedirectLocation": "/test/direct",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-in-place-with-website-redirection": {
        "CopyObjectResult": {
          "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-after-copy": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "WebsiteRedirectLocation": "/test/direct",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_copy_in_place_with_bucket_encryption": {
    "recorded-date": "03-08-2023, 04:15:30",
    "recorded-content": {
      "put-bucket-encryption": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-obj": {
        "ETag": "\"d41d8cd98f00b204e9800998ecf8427e\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-obj": {
        "CopyObjectResult": {
          "ETag": "\"d41d8cd98f00b204e9800998ecf8427e\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_get_object_checksum[CRC32]": {
    "recorded-date": "03-08-2023, 04:14:45",
    "recorded-content": {
      "put-object": {
        "ChecksumCRC32": "lVk/nw==",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ContentEncoding": "",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-with-checksum": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ChecksumCRC32": "lVk/nw==",
        "ContentEncoding": "",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-checksum": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ChecksumCRC32": "lVk/nw==",
        "ContentEncoding": "",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs": {
        "Checksum": {
          "ChecksumCRC32": "lVk/nw=="
        },
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_get_object_checksum[CRC32C]": {
    "recorded-date": "03-08-2023, 04:14:48",
    "recorded-content": {
      "put-object": {
        "ChecksumCRC32C": "Fz3epA==",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ContentEncoding": "",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-with-checksum": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ChecksumCRC32C": "Fz3epA==",
        "ContentEncoding": "",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-checksum": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ChecksumCRC32C": "Fz3epA==",
        "ContentEncoding": "",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs": {
        "Checksum": {
          "ChecksumCRC32C": "Fz3epA=="
        },
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_get_object_checksum[SHA1]": {
    "recorded-date": "03-08-2023, 04:14:52",
    "recorded-content": {
      "put-object": {
        "ChecksumSHA1": "jbXkHAsXUrubtL3dqDQ4w+7WXc0=",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ContentEncoding": "",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-with-checksum": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ChecksumSHA1": "jbXkHAsXUrubtL3dqDQ4w+7WXc0=",
        "ContentEncoding": "",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-checksum": {
        "AcceptRanges": "bytes",
        "Body": "test-checksum",
        "ChecksumSHA1": "jbXkHAsXUrubtL3dqDQ4w+7WXc0=",
        "ContentEncoding": "",
        "ContentLength": 13,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f2081dd61dfa700a0fd5e29b9c3cc23d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-attrs": {
        "Checksum": {
          "ChecksumSHA1": "jbXkHAsXUrubtL3dqDQ4w+7WXc0="
        },
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_analytics_configurations": {
    "recorded-date": "03-08-2023, 04:25:40",
    "recorded-content": {
      "put_config_with_storage_analysis_err": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get_config_with_storage_analysis_err": {
        "Error": {
          "Code": "NoSuchConfiguration",
          "Message": "The specified configuration does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "delete_config_with_storage_analysis_err": {
        "Error": {
          "Code": "NoSuchConfiguration",
          "Message": "The specified configuration does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put_config_with_storage_analysis_1": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "get_config_with_storage_analysis_1": {
        "AnalyticsConfiguration": {
          "Filter": {
            "Prefix": "test_ls"
          },
          "Id": "config_with_storage_analysis_1",
          "StorageClassAnalysis": {
            "DataExport": {
              "Destination": {
                "S3BucketDestination": {
                  "Bucket": "<bucket>",
                  "Format": "CSV",
                  "Prefix": "test"
                }
              },
              "OutputSchemaVersion": "V_1"
            }
          }
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_config_with_storage_analysis_2": {
        "AnalyticsConfiguration": {
          "Filter": {
            "Prefix": "test_ls_2"
          },
          "Id": "config_with_storage_analysis_1",
          "StorageClassAnalysis": {
            "DataExport": {
              "Destination": {
                "S3BucketDestination": {
                  "Bucket": "<bucket>",
                  "Format": "CSV",
                  "Prefix": "test"
                }
              },
              "OutputSchemaVersion": "V_1"
            }
          }
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get_config_with_storage_analysis_3": {
        "AnalyticsConfiguration": {
          "Filter": {
            "Prefix": "test_ls_3"
          },
          "Id": "config_with_storage_analysis_2",
          "StorageClassAnalysis": {
            "DataExport": {
              "Destination": {
                "S3BucketDestination": {
                  "Bucket": "<bucket>",
                  "Format": "CSV",
                  "Prefix": "test"
                }
              },
              "OutputSchemaVersion": "V_1"
            }
          }
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_config_with_storage_analysis_1": {
        "AnalyticsConfigurationList": [
          {
            "Filter": {
              "Prefix": "test_ls_2"
            },
            "Id": "config_with_storage_analysis_1",
            "StorageClassAnalysis": {
              "DataExport": {
                "Destination": {
                  "S3BucketDestination": {
                    "Bucket": "<bucket>",
                    "Format": "CSV",
                    "Prefix": "test"
                  }
                },
                "OutputSchemaVersion": "V_1"
              }
            }
          },
          {
            "Filter": {
              "Prefix": "test_ls_3"
            },
            "Id": "config_with_storage_analysis_2",
            "StorageClassAnalysis": {
              "DataExport": {
                "Destination": {
                  "S3BucketDestination": {
                    "Bucket": "<bucket>",
                    "Format": "CSV",
                    "Prefix": "test"
                  }
                },
                "OutputSchemaVersion": "V_1"
              }
            }
          }
        ],
        "IsTruncated": false,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_config_with_storage_analysis_2": {
        "AnalyticsConfigurationList": [
          {
            "Filter": {
              "Prefix": "test_ls_2"
            },
            "Id": "config_with_storage_analysis_1",
            "StorageClassAnalysis": {
              "DataExport": {
                "Destination": {
                  "S3BucketDestination": {
                    "Bucket": "<bucket>",
                    "Format": "CSV",
                    "Prefix": "test"
                  }
                },
                "OutputSchemaVersion": "V_1"
              }
            }
          }
        ],
        "IsTruncated": false,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_intelligent_tier_config": {
    "recorded-date": "03-08-2023, 04:25:47",
    "recorded-content": {
      "put_bucket_intelligent_tiering_configuration_err_1`": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put_bucket_intelligent_tiering_configuration_1": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "get_bucket_intelligent_tiering_configuration_1": {
        "IntelligentTieringConfiguration": {
          "Filter": {
            "Prefix": "test1"
          },
          "Id": "test1",
          "Status": "Enabled",
          "Tierings": [
            {
              "AccessTier": "ARCHIVE_ACCESS",
              "Days": 90
            }
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_bucket_intelligent_tiering_configurations_1": {
        "IntelligentTieringConfigurationList": [
          {
            "Filter": {
              "Prefix": "test1"
            },
            "Id": "test1",
            "Status": "Enabled",
            "Tierings": [
              {
                "AccessTier": "ARCHIVE_ACCESS",
                "Days": 90
              }
            ]
          },
          {
            "Filter": {
              "Prefix": "test2"
            },
            "Id": "test2",
            "Status": "Enabled",
            "Tierings": [
              {
                "AccessTier": "ARCHIVE_ACCESS",
                "Days": 90
              }
            ]
          }
        ],
        "IsTruncated": false,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list_bucket_intelligent_tiering_configurations_2": {
        "IntelligentTieringConfigurationList": [
          {
            "Filter": {
              "Prefix": "testupdate"
            },
            "Id": "test1",
            "Status": "Enabled",
            "Tierings": [
              {
                "AccessTier": "ARCHIVE_ACCESS",
                "Days": 90
              }
            ]
          },
          {
            "Filter": {
              "Prefix": "test2"
            },
            "Id": "test2",
            "Status": "Enabled",
            "Tierings": [
              {
                "AccessTier": "ARCHIVE_ACCESS",
                "Days": 90
              }
            ]
          }
        ],
        "IsTruncated": false,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete_bucket_intelligent_tiering_configuration_err_1": {
        "Error": {
          "BucketName": "non-existing-bucket",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "delete_bucket_intelligent_tiering_configuration_err_2": {
        "Error": {
          "Code": "NoSuchConfiguration",
          "Message": "The specified configuration does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "list_bucket_intelligent_tiering_configurations_3": {
        "IntelligentTieringConfigurationList": [
          {
            "Filter": {
              "Prefix": "test2"
            },
            "Id": "test2",
            "Status": "Enabled",
            "Tierings": [
              {
                "AccessTier": "ARCHIVE_ACCESS",
                "Days": 90
              }
            ]
          }
        ],
        "IsTruncated": false,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_multipart_no_such_upload": {
    "recorded-date": "03-08-2023, 04:14:08",
    "recorded-content": {
      "upload-exc": {
        "Error": {
          "Code": "NoSuchUpload",
          "Message": "The specified upload does not exist. The upload ID may be invalid, or the upload may have been aborted or completed.",
          "UploadId": "fakeid"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "complete-exc": {
        "Error": {
          "Code": "NoSuchUpload",
          "Message": "The specified upload does not exist. The upload ID may be invalid, or the upload may have been aborted or completed.",
          "UploadId": "fakeid"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "abort-exc": {
        "Error": {
          "Code": "NoSuchUpload",
          "Message": "The specified upload does not exist. The upload ID may be invalid, or the upload may have been aborted or completed.",
          "UploadId": "fakeid"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_object_with_checksum[CRC32]": {
    "recorded-date": "03-08-2023, 04:15:48",
    "recorded-content": {
      "put-object-no-checksum": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs": {
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-in-place-with-checksum": {
        "CopyObjectResult": {
          "ChecksumCRC32": "MzVIGw==",
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs-after-copy": {
        "Checksum": {
          "ChecksumCRC32": "MzVIGw=="
        },
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-to-dest-keep-checksum": {
        "CopyObjectResult": {
          "ChecksumCRC32": "MzVIGw==",
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_object_with_checksum[CRC32C]": {
    "recorded-date": "03-08-2023, 04:15:51",
    "recorded-content": {
      "put-object-no-checksum": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs": {
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-in-place-with-checksum": {
        "CopyObjectResult": {
          "ChecksumCRC32C": "078Ilw==",
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs-after-copy": {
        "Checksum": {
          "ChecksumCRC32C": "078Ilw=="
        },
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-to-dest-keep-checksum": {
        "CopyObjectResult": {
          "ChecksumCRC32C": "078Ilw==",
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_object_with_checksum[SHA1]": {
    "recorded-date": "03-08-2023, 04:15:54",
    "recorded-content": {
      "put-object-no-checksum": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs": {
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-in-place-with-checksum": {
        "CopyObjectResult": {
          "ChecksumSHA1": "5zXdjmjYk4EJ8Cw4PMnQVslCpRQ=",
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs-after-copy": {
        "Checksum": {
          "ChecksumSHA1": "5zXdjmjYk4EJ8Cw4PMnQVslCpRQ="
        },
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-to-dest-keep-checksum": {
        "CopyObjectResult": {
          "ChecksumSHA1": "5zXdjmjYk4EJ8Cw4PMnQVslCpRQ=",
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_object_with_checksum[SHA256]": {
    "recorded-date": "03-08-2023, 04:15:56",
    "recorded-content": {
      "put-object-no-checksum": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs": {
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-in-place-with-checksum": {
        "CopyObjectResult": {
          "ChecksumSHA256": "lyTB4g5uPk1/V+0l+dTvsAblCFkNUoyQ2ll/andcE+U=",
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "object-attrs-after-copy": {
        "Checksum": {
          "ChecksumSHA256": "lyTB4g5uPk1/V+0l+dTvsAblCFkNUoyQ2ll/andcE+U="
        },
        "LastModified": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object-to-dest-keep-checksum": {
        "CopyObjectResult": {
          "ChecksumSHA256": "lyTB4g5uPk1/V+0l+dTvsAblCFkNUoyQ2ll/andcE+U=",
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_get_object_special_character[file%2Fname]": {
    "recorded-date": "13-09-2023, 22:47:29",
    "recorded-content": {
      "put-object-special-char": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-special-char": {
        "Contents": [
          {
            "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
            "Key": "file%2Fname",
            "LastModified": "datetime",
            "Size": 4,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 1,
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-special-char": {
        "AcceptRanges": "bytes",
        "Body": "test",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "del-object-special-char": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_get_object_special_character[test@key/]": {
    "recorded-date": "13-09-2023, 22:47:32",
    "recorded-content": {
      "put-object-special-char": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-special-char": {
        "Contents": [
          {
            "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
            "Key": "test@key/",
            "LastModified": "datetime",
            "Size": 4,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 1,
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-special-char": {
        "AcceptRanges": "bytes",
        "Body": "test",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "del-object-special-char": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_get_object_special_character[test%123]": {
    "recorded-date": "13-09-2023, 22:47:34",
    "recorded-content": {
      "put-object-special-char": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-special-char": {
        "Contents": [
          {
            "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
            "Key": "test%123",
            "LastModified": "datetime",
            "Size": 4,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 1,
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-special-char": {
        "AcceptRanges": "bytes",
        "Body": "test",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "del-object-special-char": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_get_object_special_character[test%percent]": {
    "recorded-date": "13-09-2023, 22:47:36",
    "recorded-content": {
      "put-object-special-char": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-special-char": {
        "Contents": [
          {
            "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
            "Key": "test%percent",
            "LastModified": "datetime",
            "Size": 4,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 1,
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-special-char": {
        "AcceptRanges": "bytes",
        "Body": "test",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "del-object-special-char": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_get_object_headers": {
    "recorded-date": "03-08-2023, 04:25:53",
    "recorded-content": {
      "if_none_match_err_1": {
        "Code": "304",
        "Message": "Not Modified"
      },
      "if_none_match_err_2": {
        "Code": "304",
        "Message": "Not Modified"
      },
      "if_none_match_1": 200,
      "if_match_1": 200,
      "if_match_2": 200,
      "if_match_err_1": {
        "Code": "PreconditionFailed",
        "Condition": "If-Match",
        "Message": "At least one of the pre-conditions you specified did not hold"
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_object_preconditions": {
    "recorded-date": "03-08-2023, 04:16:02",
    "recorded-content": {
      "head-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"8d777f385d3dfec8815d20f7496026dc\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-precondition-if-match": {
        "Error": {
          "Code": "PreconditionFailed",
          "Condition": "x-amz-copy-source-If-Match",
          "Message": "At least one of the pre-conditions you specified did not hold"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 412
        }
      },
      "copy-precondition-if-unmodified-since": {
        "Error": {
          "Code": "PreconditionFailed",
          "Condition": "x-amz-copy-source-If-Unmodified-Since",
          "Message": "At least one of the pre-conditions you specified did not hold"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 412
        }
      },
      "copy-precondition-if-none-match": {
        "Error": {
          "Code": "PreconditionFailed",
          "Condition": "x-amz-copy-source-If-None-Match",
          "Message": "At least one of the pre-conditions you specified did not hold"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 412
        }
      },
      "copy-precondition-if-modified-since": {
        "Error": {
          "Code": "PreconditionFailed",
          "Condition": "x-amz-copy-source-If-Modified-Since",
          "Message": "At least one of the pre-conditions you specified did not hold"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 412
        }
      },
      "copy-ignore-future-modified-since": {
        "CopyObjectResult": {
          "ETag": "\"8d777f385d3dfec8815d20f7496026dc\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-etag-missing-quotes": {
        "Error": {
          "Code": "PreconditionFailed",
          "Condition": "x-amz-copy-source-If-None-Match",
          "Message": "At least one of the pre-conditions you specified did not hold"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 412
        }
      },
      "copy-success": {
        "CopyObjectResult": {
          "ETag": "\"8d777f385d3dfec8815d20f7496026dc\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketLogging::test_put_bucket_logging": {
    "recorded-date": "12-08-2023, 19:54:07",
    "recorded-content": {
      "get-bucket-logging-default": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-default-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "display-name",
              "ID": "owner-id",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "display-name",
          "ID": "owner-id"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-bucket-logging": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-logging": {
        "LoggingEnabled": {
          "TargetBucket": "<target-bucket:1>",
          "TargetPrefix": "log"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-bucket-logging-delete": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketLogging::test_put_bucket_logging_accept_wrong_grants": {
    "recorded-date": "03-08-2023, 04:26:11",
    "recorded-content": {
      "put-bucket-logging": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-logging": {
        "LoggingEnabled": {
          "TargetBucket": "<target-bucket:1>",
          "TargetGrants": [
            {
              "Grantee": {
                "Type": "Group",
                "URI": "http://acs.amazonaws.com/groups/s3/LogDelivery"
              },
              "Permission": "WRITE"
            },
            {
              "Grantee": {
                "Type": "Group",
                "URI": "http://acs.amazonaws.com/groups/s3/LogDelivery"
              },
              "Permission": "READ_ACP"
            }
          ],
          "TargetPrefix": "log"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketLogging::test_put_bucket_logging_wrong_target": {
    "recorded-date": "03-08-2023, 04:26:14",
    "recorded-content": {
      "put-bucket-logging-different-regions": {
        "Error": {
          "Code": "CrossLocationLoggingProhibitted",
          "Message": "Cross S3 location logging not allowed. ",
          "TargetBucketLocation": "us-west-2"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "put-bucket-logging-non-existent-bucket": {
        "Error": {
          "Code": "InvalidTargetBucketForLogging",
          "Message": "The target bucket for logging does not exist",
          "TargetBucket": "<target-bucket:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketLifecycle::test_bucket_lifecycle_configuration_object_expiry_versioned": {
    "recorded-date": "07-07-2023, 19:44:39",
    "recorded-content": {
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": "<expiration>",
            "Filter": {},
            "ID": "rule2",
            "NoncurrentVersionExpiration": {
              "NoncurrentDays": 1
            },
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-expiry": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-expiry-noncurrent": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-expiry-current-with-version-id": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-expiry-current-without-version-id": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_object_expiry_after_bucket_lifecycle_configuration": {
    "recorded-date": "07-07-2023, 15:52:37",
    "recorded-content": {
      "put-object-before": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": "<expiration>",
            "Filter": {},
            "ID": "rule3",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-expiry-before": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-after": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-expiry-after": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketLifecycle::test_bucket_lifecycle_multiple_rules": {
    "recorded-date": "07-07-2023, 16:43:56",
    "recorded-content": {
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": "<expiration>",
            "Filter": {
              "Prefix": "testobject"
            },
            "ID": "rule_one",
            "Status": "Enabled"
          },
          {
            "Expiration": "<expiration>",
            "Filter": {
              "Prefix": "test"
            },
            "ID": "rule_two",
            "Status": "Enabled"
          },
          {
            "Expiration": "<expiration>",
            "Filter": {
              "Prefix": "t"
            },
            "ID": "rule_three",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-match-both-rules": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-match-rule-2": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-no-match": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketLifecycle::test_put_bucket_lifecycle_conf_exc": {
    "recorded-date": "26-07-2023, 15:06:44",
    "recorded-content": {
      "missing-id": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "missing-filter": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "missing-noncurrent-version-expiration-data": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "wrong-filter-and-plus-prefix": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "wrong-filter-and-and-object-size": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "wrong-data-no-midnight": {
        "Error": {
          "ArgumentName": "Date",
          "ArgumentValue": "<datetime:1>",
          "Code": "InvalidArgument",
          "Message": "'Date' must be at midnight GMT"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "duplicate-tag-keys": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Duplicate Tag Keys are not allowed."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "expired-delete-marker-and-days": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketLifecycle::test_bucket_lifecycle_configuration_date": {
    "recorded-date": "07-07-2023, 18:47:29",
    "recorded-content": {
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": {
              "Date": "datetime"
            },
            "Filter": {},
            "ID": "rule_number_one",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketLifecycle::test_bucket_lifecycle_object_size_rules": {
    "recorded-date": "07-07-2023, 20:26:53",
    "recorded-content": {
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": "<expiration>",
            "Filter": {
              "ObjectSizeGreaterThan": 20
            },
            "ID": "rule_one",
            "Status": "Enabled"
          },
          {
            "Expiration": "<expiration>",
            "Filter": {
              "ObjectSizeLessThan": 10
            },
            "ID": "rule_two",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-match-rule-1": {
        "ETag": "\"ff49cfac3968dbce26ebe7d4823e58bd\"",
        "Expiration": "<expiration>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-match-rule-2": {
        "ETag": "\"594f803b380a41396ed63dca39503542\"",
        "Expiration": "<expiration>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-no-match": {
        "ETag": "\"12f9cf6998d52dbe773b06f848bb3608\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketLifecycle::test_bucket_lifecycle_tag_rules": {
    "recorded-date": "07-07-2023, 20:53:27",
    "recorded-content": {
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": "<expiration>",
            "Filter": {
              "Tag": {
                "Key": "testlifecycle",
                "Value": "positive"
              }
            },
            "ID": "rule_one",
            "Status": "Enabled"
          },
          {
            "Expiration": "<expiration>",
            "Filter": {
              "And": {
                "Tags": [
                  {
                    "Key": "testlifecycle",
                    "Value": "positive"
                  },
                  {
                    "Key": "testlifecycletwo",
                    "Value": "positive-two"
                  }
                ]
              }
            },
            "ID": "rule_two",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-match-both-rules": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-match-rule-1": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-no-match": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketLifecycle::test_object_expiry_after_bucket_lifecycle_configuration": {
    "recorded-date": "07-07-2023, 21:38:39",
    "recorded-content": {
      "put-object-before": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": "<expiration>",
            "Filter": {},
            "ID": "rule3",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-expiry-before": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-after": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-expiry-after": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "Expiration": "<expiration>",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_inventory_report_crud": {
    "recorded-date": "03-08-2023, 04:26:19",
    "recorded-content": {
      "put-inventory-config": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "list-inventory-config": {
        "InventoryConfigurationList": [
          {
            "Destination": {
              "S3BucketDestination": {
                "Bucket": "arn:aws:s3:::<resource:1>",
                "Format": "CSV"
              }
            },
            "Id": "test-inventory",
            "IncludedObjectVersions": "All",
            "IsEnabled": true,
            "OptionalFields": [
              "Size",
              "ETag"
            ],
            "Schedule": {
              "Frequency": "Daily"
            }
          }
        ],
        "IsTruncated": false,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-inventory-config": {
        "InventoryConfiguration": {
          "Destination": {
            "S3BucketDestination": {
              "Bucket": "arn:aws:s3:::<resource:1>",
              "Format": "CSV"
            }
          },
          "Id": "test-inventory",
          "IncludedObjectVersions": "All",
          "IsEnabled": true,
          "OptionalFields": [
            "Size",
            "ETag"
          ],
          "Schedule": {
            "Frequency": "Daily"
          }
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "del-inventory-config": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "list-inventory-config-after-del": {
        "IsTruncated": false,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-nonexistent-inv-config": {
        "Error": {
          "Code": "NoSuchConfiguration",
          "Message": "The specified configuration does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_put_inventory_report_exceptions": {
    "recorded-date": "03-08-2023, 04:26:23",
    "recorded-content": {
      "wrong-id": {
        "Error": {
          "Code": "IdMismatch",
          "Message": "Document ID does not match the specified configuration ID."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "wrong-destination-arn": {
        "Error": {
          "Code": "InvalidS3DestinationBucket",
          "Message": "Invalid bucket ARN."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "wrong-destination-format": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "wrong-schedule-frequency": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "wrong-object-versions": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "wrong-optional-field": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_put_bucket_inventory_config_order": {
    "recorded-date": "03-08-2023, 04:26:27",
    "recorded-content": {
      "list-inventory-config": {
        "InventoryConfigurationList": [
          {
            "Destination": {
              "S3BucketDestination": {
                "Bucket": "arn:aws:s3:::<resource:1>",
                "Format": "CSV"
              }
            },
            "Id": "a-test",
            "IncludedObjectVersions": "All",
            "IsEnabled": true,
            "Schedule": {
              "Frequency": "Daily"
            }
          },
          {
            "Destination": {
              "S3BucketDestination": {
                "Bucket": "arn:aws:s3:::<resource:1>",
                "Format": "CSV"
              }
            },
            "Id": "test-1",
            "IncludedObjectVersions": "All",
            "IsEnabled": true,
            "Schedule": {
              "Frequency": "Daily"
            }
          },
          {
            "Destination": {
              "S3BucketDestination": {
                "Bucket": "arn:aws:s3:::<resource:1>",
                "Format": "CSV"
              }
            },
            "Id": "z-test",
            "IncludedObjectVersions": "All",
            "IsEnabled": true,
            "Schedule": {
              "Frequency": "Daily"
            }
          }
        ],
        "IsTruncated": false,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "del-inventory-config": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "list-inventory-config-after-del": {
        "InventoryConfigurationList": [
          {
            "Destination": {
              "S3BucketDestination": {
                "Bucket": "arn:aws:s3:::<resource:1>",
                "Format": "CSV"
              }
            },
            "Id": "a-test",
            "IncludedObjectVersions": "All",
            "IsEnabled": true,
            "Schedule": {
              "Frequency": "Daily"
            }
          },
          {
            "Destination": {
              "S3BucketDestination": {
                "Bucket": "arn:aws:s3:::<resource:1>",
                "Format": "CSV"
              }
            },
            "Id": "test-1",
            "IncludedObjectVersions": "All",
            "IsEnabled": true,
            "Schedule": {
              "Frequency": "Daily"
            }
          }
        ],
        "IsTruncated": false,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3BucketLifecycle::test_lifecycle_expired_object_delete_marker": {
    "recorded-date": "26-07-2023, 15:14:49",
    "recorded-content": {
      "get-bucket-lifecycle-conf": {
        "Rules": [
          {
            "Expiration": "<expiration>",
            "Filter": {},
            "ID": "rule-marker",
            "Status": "Enabled"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_multipart_complete_multipart_too_small": {
    "recorded-date": "03-08-2023, 04:14:10",
    "recorded-content": {
      "upload-part1": {
        "ETag": "\"8d777f385d3dfec8815d20f7496026dc\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "upload-part2": {
        "ETag": "\"8d777f385d3dfec8815d20f7496026dc\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "complete-exc-no-parts": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "You must specify at least one part"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "complete-exc-too-small": {
        "Error": {
          "Code": "EntityTooSmall",
          "ETag": "8d777f385d3dfec8815d20f7496026dc",
          "Message": "Your proposed upload is smaller than the minimum allowed size",
          "MinSizeAllowed": "5242880",
          "PartNumber": "1",
          "ProposedSize": "4"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_multipart_complete_multipart_wrong_part": {
    "recorded-date": "03-08-2023, 04:14:12",
    "recorded-content": {
      "complete-exc-wrong-part-number": {
        "Error": {
          "Code": "InvalidPart",
          "ETag": "8d777f385d3dfec8815d20f7496026dc",
          "Message": "One or more of the specified parts could not be found.  The part may not have been uploaded, or the specified entity tag may not match the part's entity tag.",
          "PartNumber": "2",
          "UploadId": "<upload-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "complete-exc-wrong-etag": {
        "Error": {
          "Code": "InvalidPart",
          "ETag": "d41d8cd98f00b204e9800998ecf8427e",
          "Message": "One or more of the specified parts could not be found.  The part may not have been uploaded, or the specified entity tag may not match the part's entity tag.",
          "PartNumber": "1",
          "UploadId": "<upload-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_tagging_directive[COPY]": {
    "recorded-date": "03-08-2023, 04:15:09",
    "recorded-content": {
      "put-object": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-tag": {
        "TagSet": [
          {
            "Key": "key1",
            "Value": "value1"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object": {
        "CopyObjectResult": {
          "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-copy-object-tag": {
        "TagSet": [
          {
            "Key": "key1",
            "Value": "value1"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_tagging_directive[REPLACE]": {
    "recorded-date": "03-08-2023, 04:15:11",
    "recorded-content": {
      "put-object": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-tag": {
        "TagSet": [
          {
            "Key": "key1",
            "Value": "value1"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object": {
        "CopyObjectResult": {
          "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-copy-object-tag": {
        "TagSet": [
          {
            "Key": "key2",
            "Value": "value2"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_copy_tagging_directive[None]": {
    "recorded-date": "03-08-2023, 04:15:14",
    "recorded-content": {
      "put-object": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-tag": {
        "TagSet": [
          {
            "Key": "key1",
            "Value": "value1"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-object": {
        "CopyObjectResult": {
          "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
          "LastModified": "datetime"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-copy-object-tag": {
        "TagSet": [
          {
            "Key": "key1",
            "Value": "value1"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_get_object_content_length_with_virtual_host[True]": {
    "recorded-date": "07-08-2023, 19:56:10",
    "recorded-content": {
      "get-obj-content-len-headers": {
        "accept-ranges": "bytes",
        "content-length": "3",
        "content-type": "binary/octet-stream",
        "date": "date",
        "etag": "\"202cb962ac59075b964b07152d234b70\"",
        "last-modified": "last-modified",
        "server": "<server:1>",
        "x-amz-id-2": "<x-amz-id-2:1>",
        "x-amz-request-id": "<x-amz-request-id:1>",
        "x-amz-server-side-encryption": "AES256"
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_get_object_content_length_with_virtual_host[False]": {
    "recorded-date": "07-08-2023, 19:56:13",
    "recorded-content": {
      "get-obj-content-len-headers": {
        "accept-ranges": "bytes",
        "content-length": "3",
        "content-type": "binary/octet-stream",
        "date": "date",
        "etag": "\"202cb962ac59075b964b07152d234b70\"",
        "last-modified": "last-modified",
        "server": "<server:1>",
        "x-amz-id-2": "<x-amz-id-2:1>",
        "x-amz-request-id": "<x-amz-request-id:1>",
        "x-amz-server-side-encryption": "AES256"
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3ObjectLockRetention::test_s3_object_retention_exc": {
    "recorded-date": "09-08-2023, 17:58:37",
    "recorded-content": {
      "put-object-retention-no-bucket": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put-object-retention-no-key": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "non-existing-key",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "get-object-retention-never-set": {
        "Error": {
          "Code": "NoSuchObjectLockConfiguration",
          "Message": "The specified object does not have a ObjectLock configuration"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put-object-missing-retention-fields": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "update-retention-no-bypass": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "Access Denied"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "put-object-retention-regular-bucket": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Bucket is missing Object Lock Configuration"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-object-retention-regular-bucket": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Bucket is missing Object Lock Configuration"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3ObjectLockRetention::test_s3_copy_object_retention_lock": {
    "recorded-date": "09-08-2023, 17:58:47",
    "recorded-content": {
      "put-source-object": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-source-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "binary/octet-stream",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ObjectLockMode": "GOVERNANCE",
        "ObjectLockRetainUntilDate": "datetime",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-lock": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "CopySourceVersionId": "<version-id:1>",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-dest-key": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "binary/octet-stream",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3ObjectLockRetention::test_s3_object_retention": {
    "recorded-date": "09-08-2023, 18:56:37",
    "recorded-content": {
      "put-obj-locked-1": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-retention-on-key-1": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-retention-on-key-1": {
        "Retention": {
          "Mode": "GOVERNANCE",
          "RetainUntilDate": "datetime"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-locked": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ObjectLockMode": "GOVERNANCE",
        "ObjectLockRetainUntilDate": "datetime",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-obj-locked": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "Access Denied"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "delete-obj-locked-bypass": {
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "put-obj-locked-2": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "update-retention-locked-object": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "Access Denied"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "put-object-empty-retention": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "update-retention-object": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3ObjectLockRetention::test_bucket_config_default_retention": {
    "recorded-date": "09-08-2023, 22:42:40",
    "recorded-content": {
      "put-lock-config": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-default": {
        "ETag": "\"1df86997d49364e87360e3831d87cc46\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-default": {
        "AcceptRanges": "bytes",
        "ContentLength": 17,
        "ContentType": "binary/octet-stream",
        "ETag": "\"1df86997d49364e87360e3831d87cc46\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ObjectLockMode": "GOVERNANCE",
        "ObjectLockRetainUntilDate": "datetime",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-with-lock": {
        "ETag": "\"f4b85168936b954f2d82998d6d3775c5\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-lock": {
        "AcceptRanges": "bytes",
        "ContentLength": 20,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f4b85168936b954f2d82998d6d3775c5\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ObjectLockMode": "GOVERNANCE",
        "ObjectLockRetainUntilDate": "datetime",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3ObjectLockRetention::test_object_lock_delete_markers": {
    "recorded-date": "09-08-2023, 22:24:23",
    "recorded-content": {
      "put-object-with-lock": {
        "ETag": "\"f4b85168936b954f2d82998d6d3775c5\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-lock": {
        "AcceptRanges": "bytes",
        "ContentLength": 20,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f4b85168936b954f2d82998d6d3775c5\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ObjectLockMode": "GOVERNANCE",
        "ObjectLockRetainUntilDate": "datetime",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-delete-marker": {
        "DeleteMarker": true,
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "put-object-retention-delete-marker": {
        "Error": {
          "Code": "MethodNotAllowed",
          "Message": "The specified method is not allowed against this resource.",
          "Method": "PUT",
          "ResourceType": "DeleteMarker"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 405
        }
      },
      "get-object-retention-delete-marker": {
        "Error": {
          "Code": "MethodNotAllowed",
          "Message": "The specified method is not allowed against this resource.",
          "Method": "GET",
          "ResourceType": "DeleteMarker"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 405
        }
      },
      "head-object-locked-delete-marker": {
        "Error": {
          "Code": "405",
          "Message": "Method Not Allowed"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 405
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3ObjectLockRetention::test_object_lock_extend_duration": {
    "recorded-date": "09-08-2023, 23:09:03",
    "recorded-content": {
      "put-object-with-lock": {
        "ETag": "\"f4b85168936b954f2d82998d6d3775c5\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-lock": {
        "AcceptRanges": "bytes",
        "ContentLength": 20,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f4b85168936b954f2d82998d6d3775c5\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ObjectLockMode": "GOVERNANCE",
        "ObjectLockRetainUntilDate": "datetime",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-retention-extend": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-lock-extended": {
        "AcceptRanges": "bytes",
        "ContentLength": 20,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f4b85168936b954f2d82998d6d3775c5\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ObjectLockMode": "GOVERNANCE",
        "ObjectLockRetainUntilDate": "datetime",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-retention-reduce": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "Access Denied"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3ObjectLockLegalHold::test_put_get_object_legal_hold": {
    "recorded-date": "10-08-2023, 00:17:23",
    "recorded-content": {
      "put-obj": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-legal-hold-unset": {
        "Error": {
          "Code": "NoSuchObjectLockConfiguration",
          "Message": "The specified object does not have a ObjectLock configuration"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put-object-legal-hold": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-legal-hold": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ObjectLockLegalHoldStatus": "ON",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-legal-hold-set": {
        "LegalHold": {
          "Status": "ON"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-legal-hold-off": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3ObjectLockLegalHold::test_put_object_legal_hold_exc": {
    "recorded-date": "10-08-2023, 00:17:30",
    "recorded-content": {
      "put-object-legal-hold-no-bucket": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put-object-legal-hold-no-key": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "non-existing-key",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put-object-retention-regular-bucket": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Bucket is missing Object Lock Configuration"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-retention-empty": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-object-retention-regular-bucket": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Bucket is missing Object Lock Configuration"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3ObjectLockLegalHold::test_delete_locked_object": {
    "recorded-date": "10-08-2023, 00:17:33",
    "recorded-content": {
      "put-obj": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-legal-hold": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-object-locked": {
        "Error": {
          "Code": "AccessDenied",
          "Message": "Access Denied"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 403
        }
      },
      "delete-objects-locked": {
        "Errors": [
          {
            "Code": "AccessDenied",
            "Key": "test-delete-locked",
            "Message": "Access Denied",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-legal-hold-off": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3ObjectLockLegalHold::test_s3_legal_hold_lock_versioned": {
    "recorded-date": "10-08-2023, 00:17:37",
    "recorded-content": {
      "put-object": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-legal-hold-ver1": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-ver1": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ObjectLockLegalHoldStatus": "ON",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-2": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-legal-hold-ver2": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-ver2": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ObjectLockLegalHoldStatus": "ON",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "remove-object-legal-hold-ver1": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-ver1-no-lock": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ObjectLockLegalHoldStatus": "OFF",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-object-ver1": {
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3ObjectLockLegalHold::test_s3_copy_object_legal_hold": {
    "recorded-date": "10-08-2023, 00:17:41",
    "recorded-content": {
      "put-object": {
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "binary/octet-stream",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ObjectLockLegalHoldStatus": "ON",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "copy-legal-hold": {
        "CopyObjectResult": {
          "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
          "LastModified": "datetime"
        },
        "CopySourceVersionId": "<version-id:1>",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-dest-key": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "binary/octet-stream",
        "ETag": "\"88bac95f31528d13a072c05f2a1cf371\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3ObjectLockLegalHold::test_put_object_with_legal_hold": {
    "recorded-date": "10-08-2023, 00:17:26",
    "recorded-content": {
      "put-obj": {
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-with-legal-hold": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"098f6bcd4621d373cade4e832627b4f6\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ObjectLockLegalHoldStatus": "ON",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-legal-hold-off": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_get_object_preconditions[get_object]": {
    "recorded-date": "23-10-2023, 18:17:15",
    "recorded-content": {
      "precondition-if-match": {
        "Error": {
          "Code": "PreconditionFailed",
          "Condition": "If-Match",
          "Message": "At least one of the pre-conditions you specified did not hold"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 412
        }
      },
      "precondition-if-unmodified-since": {
        "Error": {
          "Code": "PreconditionFailed",
          "Condition": "If-Unmodified-Since",
          "Message": "At least one of the pre-conditions you specified did not hold"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 412
        }
      },
      "precondition-if-none-match": {
        "Error": {
          "Code": "304",
          "Message": "Not Modified"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 304
        }
      },
      "copy-precondition-if-modified-since": {
        "Error": {
          "Code": "304",
          "Message": "Not Modified"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 304
        }
      },
      "obj-ignore-future-modified-since": {
        "AcceptRanges": "bytes",
        "Body": "data",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"8d777f385d3dfec8815d20f7496026dc\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "etag-missing-quotes": {
        "Error": {
          "Code": "304",
          "Message": "Not Modified"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 304
        }
      },
      "precondition-if-unmodified-since-is-object": {
        "AcceptRanges": "bytes",
        "Body": "data",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"8d777f385d3dfec8815d20f7496026dc\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "precondition-if-modified-since-is-object": {
        "Error": {
          "Code": "304",
          "Message": "Not Modified"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 304
        }
      },
      "obj-success": {
        "AcceptRanges": "bytes",
        "Body": "data",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"8d777f385d3dfec8815d20f7496026dc\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_get_object_preconditions[head_object]": {
    "recorded-date": "23-10-2023, 18:17:21",
    "recorded-content": {
      "precondition-if-match": {
        "Error": {
          "Code": "412",
          "Message": "Precondition Failed"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 412
        }
      },
      "precondition-if-unmodified-since": {
        "Error": {
          "Code": "412",
          "Message": "Precondition Failed"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 412
        }
      },
      "precondition-if-none-match": {
        "Error": {
          "Code": "304",
          "Message": "Not Modified"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 304
        }
      },
      "copy-precondition-if-modified-since": {
        "Error": {
          "Code": "304",
          "Message": "Not Modified"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 304
        }
      },
      "obj-ignore-future-modified-since": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"8d777f385d3dfec8815d20f7496026dc\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "etag-missing-quotes": {
        "Error": {
          "Code": "304",
          "Message": "Not Modified"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 304
        }
      },
      "precondition-if-unmodified-since-is-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"8d777f385d3dfec8815d20f7496026dc\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "precondition-if-modified-since-is-object": {
        "Error": {
          "Code": "304",
          "Message": "Not Modified"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 304
        }
      },
      "obj-success": {
        "AcceptRanges": "bytes",
        "ContentLength": 4,
        "ContentType": "binary/octet-stream",
        "ETag": "\"8d777f385d3dfec8815d20f7496026dc\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_get_object_part": {
    "recorded-date": "10-08-2023, 02:06:55",
    "recorded-content": {
      "multipart-upload": {
        "Bucket": "<bucket:1>",
        "ETag": "\"2848839dc84e13fa00a0944e760e233b-2\"",
        "Key": "test.file",
        "Location": "<location:1>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-part": {
        "AcceptRanges": "bytes",
        "ContentLength": 16,
        "ContentType": "binary/octet-stream",
        "ETag": "\"2848839dc84e13fa00a0944e760e233b-2\"",
        "LastModified": "datetime",
        "Metadata": {},
        "PartsCount": 2,
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 206
        }
      },
      "get-object-part": {
        "AcceptRanges": "bytes",
        "Body": "test content 123",
        "ContentLength": 16,
        "ContentRange": "bytes 5242896-5242911/5242912",
        "ContentType": "binary/octet-stream",
        "ETag": "\"2848839dc84e13fa00a0944e760e233b-2\"",
        "LastModified": "datetime",
        "Metadata": {},
        "PartsCount": 2,
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 206
        }
      },
      "part-doesnt-exist": {
        "Error": {
          "ActualPartCount": "2",
          "Code": "InvalidPartNumber",
          "Message": "The requested partnumber is not satisfiable",
          "PartNumberRequested": "10"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 416
        }
      },
      "part-with-range": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Cannot specify both Range header and partNumber query parameter"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "part-no-multipart": {
        "Error": {
          "ActualPartCount": "1",
          "Code": "InvalidPartNumber",
          "Message": "The requested partnumber is not satisfiable",
          "PartNumberRequested": "2"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 416
        }
      },
      "get-obj-no-multipart": {
        "AcceptRanges": "bytes",
        "Body": "test-123",
        "ContentLength": 8,
        "ContentRange": "bytes 0-7/8",
        "ContentType": "binary/octet-stream",
        "ETag": "\"ca6d00e33edff0e9cb3782d31182de33\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 206
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedPost::test_post_object_with_tags[single]": {
    "recorded-date": "14-08-2023, 19:32:11",
    "recorded-content": {
      "get-tagging": {
        "TagSet": [
          {
            "Key": "TagName",
            "Value": "TagValue"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedPost::test_post_object_with_tags[list]": {
    "recorded-date": "14-08-2023, 19:32:13",
    "recorded-content": {
      "get-tagging": {
        "TagSet": [
          {
            "Key": "TagName",
            "Value": "TagValue"
          },
          {
            "Key": "TagName2",
            "Value": "TagValue2"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedPost::test_post_object_with_tags[invalid]": {
    "recorded-date": "14-08-2023, 19:32:14",
    "recorded-content": {
      "get-tagging": {
        "TagSet": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedPost::test_post_object_with_tags[notxml]": {
    "recorded-date": "14-08-2023, 19:32:16",
    "recorded-content": {
      "tagging-error": {
        "Error": {
          "Code": "MalformedXML",
          "HostId": "<host-id:1>",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema",
          "RequestId": "<request-id:1>"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedPost::test_post_object_with_metadata": {
    "recorded-date": "14-08-2023, 19:54:15",
    "recorded-content": {
      "head-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 17,
        "ContentType": "text/plain",
        "ETag": "\"a7d8531d918474360de3e2eaeb110cda\"",
        "Expires": "datetime",
        "LastModified": "datetime",
        "Metadata": {
          "test-1": "test-meta-1",
          "test-2": "test-meta-2"
        },
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3PresignedPost::test_post_object_with_storage_class": {
    "recorded-date": "14-08-2023, 20:14:49",
    "recorded-content": {
      "head-object": {
        "AcceptRanges": "bytes",
        "ContentLength": 23,
        "ContentType": "binary/octet-stream",
        "ETag": "\"f73f1a2dbae1bbd6c42f86e771298073\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "StorageClass": "STANDARD_IA",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "invalid-storage-error": {
        "Error": {
          "Code": "InvalidStorageClass",
          "HostId": "<host-id:2>",
          "Message": "The storage class you specified is not valid",
          "RequestId": "<request-id:2>",
          "StorageClassRequested": "FakeClass"
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_object_acl": {
    "recorded-date": "15-08-2023, 23:41:05",
    "recorded-content": {
      "put-object-default-acl": {
        "ETag": "\"d41d8cd98f00b204e9800998ecf8427e\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-acl-default": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-acl": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/global/AllUsers"
            },
            "Permission": "READ"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-grant-acl": {
        "Grants": [
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/s3/LogDelivery"
            },
            "Permission": "READ"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-acp-acl": {
        "Grants": [
          {
            "Grantee": {
              "DisplayName": "<display-name:1>",
              "ID": "<owner-id:1>",
              "Type": "CanonicalUser"
            },
            "Permission": "FULL_CONTROL"
          },
          {
            "Grantee": {
              "Type": "Group",
              "URI": "http://acs.amazonaws.com/groups/s3/LogDelivery"
            },
            "Permission": "WRITE"
          }
        ],
        "Owner": {
          "DisplayName": "<display-name:1>",
          "ID": "<owner-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_s3_object_acl_exceptions": {
    "recorded-date": "15-08-2023, 23:47:00",
    "recorded-content": {
      "put-object-canned-acl": {
        "Error": {
          "ArgumentName": "x-amz-acl",
          "ArgumentValue": "fake-acl",
          "Code": "InvalidArgument",
          "Message": null
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-acl-canned-acl": {
        "Error": {
          "ArgumentName": "x-amz-acl",
          "ArgumentValue": "fake-acl",
          "Code": "InvalidArgument",
          "Message": null
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-grant-acl-fake-uri": {
        "Error": {
          "ArgumentName": "uri",
          "ArgumentValue": "http://acs.amazonaws.com/groups/s3/FakeGroup",
          "Code": "InvalidArgument",
          "Message": "Invalid group uri"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-grant-acl-fake-key": {
        "Error": {
          "ArgumentName": "x-amz-grant-write",
          "ArgumentValue": "fakekey=\"1234\"",
          "Code": "InvalidArgument",
          "Message": "Argument format not recognized"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-grant-acl-wrong-id": {
        "Error": {
          "ArgumentName": "id",
          "ArgumentValue": "wrong-id",
          "Code": "InvalidArgument",
          "Message": "Invalid id"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-acp-acl-1": {
        "Error": {
          "Code": "MalformedACLError",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-acp-acl-2": {
        "Error": {
          "Code": "MalformedACLError",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-acp-acl-3": {
        "Error": {
          "ArgumentName": "CanonicalUser/ID",
          "ArgumentValue": "wrong-id",
          "Code": "InvalidArgument",
          "Message": "Invalid id"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-acp-acl-4": {
        "Error": {
          "ArgumentName": "Group/URI",
          "ArgumentValue": "http://acs.amazonaws.com/groups/s3/FakeGroup",
          "Code": "InvalidArgument",
          "Message": "Invalid group uri"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-acp-acl-5": {
        "Error": {
          "ArgumentName": "CanonicalUser/ID",
          "ArgumentValue": "wrong-id",
          "Code": "InvalidArgument",
          "Message": "Invalid id"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-acp-acl-6": {
        "Error": {
          "Code": "MalformedACLError",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-empty-acp": {
        "Error": {
          "Code": "MalformedACLError",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-acl-empty": {
        "Error": {
          "Code": "MissingSecurityHeader",
          "Message": "Your request was missing a required header",
          "MissingHeaderName": "x-amz-acl"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-two-type-acl": {
        "Error": {
          "Code": "InvalidRequest",
          "Message": "Specifying both Canned ACLs and Header Grants is not allowed"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-two-type-acl-acp": {
        "Error": {
          "Code": "UnexpectedContent",
          "Message": "This request does not support content"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_empty_bucket_fixture": {
    "recorded-date": "08-09-2023, 18:52:15",
    "recorded-content": {
      "list-obj": {
        "Contents": [
          {
            "ETag": "\"202cb962ac59075b964b07152d234b70\"",
            "Key": "key0",
            "LastModified": "datetime",
            "Size": 3,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"202cb962ac59075b964b07152d234b70\"",
            "Key": "key1",
            "LastModified": "datetime",
            "Size": 3,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"202cb962ac59075b964b07152d234b70\"",
            "Key": "key2",
            "LastModified": "datetime",
            "Size": 3,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 3,
        "MaxKeys": 1000,
        "Name": "<name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-obj-after-empty": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 0,
        "MaxKeys": 1000,
        "Name": "<name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_bucket_operation_between_regions": {
    "recorded-date": "12-09-2023, 14:35:39",
    "recorded-content": {
      "put-website-config-region-1": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-cors-config-region-1": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-website-config-region-2": {
        "IndexDocument": {
          "Suffix": "index.html"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-cors-config-region-2": {
        "CORSRules": [
          {
            "AllowedMethods": [
              "GET"
            ],
            "AllowedOrigins": [
              "*"
            ]
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_url_encoded_key": {
    "recorded-date": "14-09-2023, 00:01:41",
    "recorded-content": {
      "list-object-encoded-char": {
        "Contents": [
          {
            "ETag": "\"03dc4443b5f395b54d011fdb7d9e0ae1\"",
            "Key": "test%40key",
            "LastModified": "datetime",
            "Size": 24,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"51a6065890415b4b299dec1aa33d712c\"",
            "Key": "test%40key/",
            "LastModified": "datetime",
            "Size": 12,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"b792145c4a8e8d9ac95d3c2f9f0ac42d\"",
            "Key": "test@key/",
            "LastModified": "datetime",
            "Size": 16,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 3,
        "MaxKeys": 1000,
        "Name": "<name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_multipart_overwrite_key": {
    "recorded-date": "18-10-2023, 17:40:12",
    "recorded-content": {
      "put-object": {
        "ETag": "\"eee506dd7ada7ded524c77e359a0e7c6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "multipart-upload": {
        "Bucket": "<bucket:1>",
        "ETag": "\"b972025bc34adf8d76d6d51e93c035cc-1\"",
        "Key": "test.file",
        "Location": "<location:1>",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_list_objects_with_prefix[]": {
    "recorded-date": "23-10-2023, 18:32:21",
    "recorded-content": {
      "list-objects": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test/foo/bar/123",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1,
        "Name": "<bucket-name:1>",
        "Prefix": "test/",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_list_objects_v2_continuation_start_after": {
    "recorded-date": "22-10-2023, 02:21:09",
    "recorded-content": {
      "list-objects-v2-max-5": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_0",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_1",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_10",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_11",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_2",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": true,
        "KeyCount": 5,
        "MaxKeys": 5,
        "Name": "<bucket-name:1>",
        "NextContinuationToken": "<next-continuation-token:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-v2-rest": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_3",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_4",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_5",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_6",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_7",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_8",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_9",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "ContinuationToken": "<next-continuation-token:1>",
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 7,
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-start-after": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_8",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_9",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 2,
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "StartAfter": "test_7",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-start-after-token": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_3",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_4",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_5",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_6",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_7",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_8",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "test_9",
            "LastModified": "datetime",
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "ContinuationToken": "<next-continuation-token:1>",
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 7,
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "exc-continuation-token": {
        "Error": {
          "ArgumentName": "continuation-token",
          "Code": "InvalidArgument",
          "Message": "The continuation token provided is incorrect"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_list_objects_versions_markers": {
    "recorded-date": "22-10-2023, 04:04:58",
    "recorded-content": {
      "version-order": {
        "Versions": [
          {
            "VersionId": "<version-id:1>"
          },
          {
            "VersionId": "<version-id:2>"
          },
          {
            "VersionId": "<version-id:3>"
          },
          {
            "VersionId": "<version-id:4>"
          },
          {
            "VersionId": "<version-id:5>"
          },
          {
            "VersionId": "<version-id:6>"
          },
          {
            "VersionId": "<version-id:7>"
          },
          {
            "VersionId": "<version-id:8>"
          },
          {
            "VersionId": "<version-id:9>"
          }
        ]
      },
      "list-objects-versions-all": {
        "DeleteMarkers": [
          {
            "IsLatest": false,
            "Key": "test_0",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "VersionId": "<version-id:5>"
          },
          {
            "IsLatest": false,
            "Key": "test_1",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "VersionId": "<version-id:6>"
          },
          {
            "IsLatest": true,
            "Key": "test_2",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "VersionId": "<version-id:7>"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"d4ca1ed7571e2e7b1f1c375bd50fa220\"",
            "IsLatest": true,
            "Key": "test_0",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 9,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:8>"
          },
          {
            "ETag": "\"db3ec040e20dfc657dab510aeab74759\"",
            "IsLatest": false,
            "Key": "test_0",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 9,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          },
          {
            "ETag": "\"d4ca1ed7571e2e7b1f1c375bd50fa220\"",
            "IsLatest": true,
            "Key": "test_1",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 9,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:9>"
          },
          {
            "ETag": "\"db3ec040e20dfc657dab510aeab74759\"",
            "IsLatest": false,
            "Key": "test_1",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 9,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          },
          {
            "ETag": "\"d4ca1ed7571e2e7b1f1c375bd50fa220\"",
            "IsLatest": false,
            "Key": "test_2",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 9,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:4>"
          },
          {
            "ETag": "\"db3ec040e20dfc657dab510aeab74759\"",
            "IsLatest": false,
            "Key": "test_2",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 9,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-versions-5": {
        "DeleteMarkers": [
          {
            "IsLatest": false,
            "Key": "test_0",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "VersionId": "<version-id:5>"
          },
          {
            "IsLatest": false,
            "Key": "test_1",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "VersionId": "<version-id:6>"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": true,
        "KeyMarker": "",
        "MaxKeys": 5,
        "Name": "<bucket-name:1>",
        "NextKeyMarker": "test_1",
        "NextVersionIdMarker": "<version-id:6>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"d4ca1ed7571e2e7b1f1c375bd50fa220\"",
            "IsLatest": true,
            "Key": "test_0",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 9,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:8>"
          },
          {
            "ETag": "\"db3ec040e20dfc657dab510aeab74759\"",
            "IsLatest": false,
            "Key": "test_0",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 9,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          },
          {
            "ETag": "\"d4ca1ed7571e2e7b1f1c375bd50fa220\"",
            "IsLatest": true,
            "Key": "test_1",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 9,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:9>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-next-key-only": {
        "DeleteMarkers": [
          {
            "IsLatest": true,
            "Key": "test_2",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "VersionId": "<version-id:7>"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": true,
        "KeyMarker": "test_1",
        "MaxKeys": 1,
        "Name": "<bucket-name:1>",
        "NextKeyMarker": "test_2",
        "NextVersionIdMarker": "<version-id:7>",
        "Prefix": "",
        "VersionIdMarker": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-next-key-last": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "test_2",
        "MaxKeys": 1,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-next-version-only": {
        "Error": {
          "ArgumentName": "version-id-marker",
          "ArgumentValue": "<version-id:6>",
          "Code": "InvalidArgument",
          "Message": "A version-id marker cannot be specified without a key marker."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "list-objects-both-markers": {
        "EncodingType": "url",
        "IsTruncated": true,
        "KeyMarker": "test_1",
        "MaxKeys": 1,
        "Name": "<bucket-name:1>",
        "NextKeyMarker": "test_1",
        "NextVersionIdMarker": "<version-id:2>",
        "Prefix": "",
        "VersionIdMarker": "<version-id:6>",
        "Versions": [
          {
            "ETag": "\"db3ec040e20dfc657dab510aeab74759\"",
            "IsLatest": false,
            "Key": "test_1",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 9,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-next-key-empty": {
        "EncodingType": "url",
        "IsTruncated": true,
        "KeyMarker": "",
        "MaxKeys": 1,
        "Name": "<bucket-name:1>",
        "NextKeyMarker": "test_0",
        "NextVersionIdMarker": "<version-id:8>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"d4ca1ed7571e2e7b1f1c375bd50fa220\"",
            "IsLatest": true,
            "Key": "test_0",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 9,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:8>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_list_objects_next_marker": {
    "recorded-date": "22-10-2023, 04:13:47",
    "recorded-content": {
      "list-objects-all": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "<key:1>",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "<key:2>",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 11,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "<key:3>",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "Marker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-max-1": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "<key:1>",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "Delimiter": "/",
        "EncodingType": "url",
        "IsTruncated": true,
        "Marker": "",
        "MaxKeys": 1,
        "Name": "<bucket-name:1>",
        "NextMarker": "<key:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-rest": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "<key:2>",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": true,
        "Marker": "<key:1>",
        "MaxKeys": 1,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects-marker-empty": {
        "Contents": [
          {
            "ETag": "\"0d9fa06a66933b40f615f530e59edd6b\"",
            "Key": "<key:1>",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 11,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": true,
        "Marker": "",
        "MaxKeys": 1,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/s3/test_s3.py::TestS3::test_delete_objects_encoding": {
    "recorded-date": "22-10-2023, 04:25:14",
    "recorded-content": {
      "list-objects-before-delete": {
        "Contents": [
          {
            "ETag": "\"1ac438708eff428b768f07249b3e2bb2\"",
            "Key": "a%2Fb",
            "LastModified": "datetime",
            "Size": 16,
            "StorageClass": "STANDARD"
          },
          {
            "ETag": "\"ec53baa61c0c0b736a567bdef59250f3\"",
            "Key": "a/%F0%9F%98%80",
            "LastModified": "datetime",
            "Size": 21,
            "StorageClass": "STANDARD"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 2,
        "MaxKeys": 1000,
        "Name": "<name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "deleted-resp": {
        "Deleted": [
          {
            "Key": "a%2Fb"
          },
          {
            "Key": "a/%F0%9F%98%80"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-objects": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyCount": 0,
        "MaxKeys": 1000,
        "Name": "<name:1>",
        "Prefix": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  }
}
