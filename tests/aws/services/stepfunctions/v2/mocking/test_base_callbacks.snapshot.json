{
  "tests/aws/services/stepfunctions/v2/mocking/test_base_callbacks.py::TestBaseScenarios::test_sfn_start_execution_sync[SFN_SYNC]": {
    "recorded-date": "24-04-2025, 10:05:48",
    "recorded-content": {
      "get_execution_history": {
        "events": [
          {
            "executionStartedEventDetails": {
              "input": {
                "StateMachineArn": "state-machine-arn",
                "Input": null,
                "Name": "TestStartTarget"
              },
              "inputDetails": {
                "truncated": false
              },
              "roleArn": "snf_role_arn"
            },
            "id": 1,
            "previousEventId": 0,
            "timestamp": "timestamp",
            "type": "ExecutionStarted"
          },
          {
            "id": 2,
            "previousEventId": 0,
            "stateEnteredEventDetails": {
              "input": {
                "StateMachineArn": "state-machine-arn",
                "Input": null,
                "Name": "TestStartTarget"
              },
              "inputDetails": {
                "truncated": false
              },
              "name": "StartExecution"
            },
            "timestamp": "timestamp",
            "type": "TaskStateEntered"
          },
          {
            "id": 3,
            "previousEventId": 2,
            "taskScheduledEventDetails": {
              "parameters": {
                "Input": null,
                "StateMachineArn": "state-machine-arn",
                "Name": "TestStartTarget"
              },
              "region": "<region>",
              "resource": "startExecution.sync",
              "resourceType": "states"
            },
            "timestamp": "timestamp",
            "type": "TaskScheduled"
          },
          {
            "id": 4,
            "previousEventId": 3,
            "taskStartedEventDetails": {
              "resource": "startExecution.sync",
              "resourceType": "states"
            },
            "timestamp": "timestamp",
            "type": "TaskStarted"
          },
          {
            "id": 5,
            "previousEventId": 4,
            "taskSubmittedEventDetails": {
              "output": {
                "ExecutionArn": "execution-arn",
                "SdkHttpMetadata": {
                  "AllHttpHeaders": {
                    "x-amzn-RequestId": "x-amzn-RequestId",
                    "connection": [
                      "keep-alive"
                    ],
                    "Content-Length": [
                      "164"
                    ],
                    "Date": "date",
                    "Content-Type": [
                      "application/x-amz-json-1.0"
                    ]
                  },
                  "HttpHeaders": {
                    "connection": "keep-alive",
                    "Content-Length": "164",
                    "Content-Type": "application/x-amz-json-1.0",
                    "Date": "date",
                    "x-amzn-RequestId": "x-amzn-RequestId"
                  },
                  "HttpStatusCode": 200
                },
                "SdkResponseMetadata": {
                  "RequestId": "RequestId"
                },
                "StartDate": "start-date"
              },
              "outputDetails": {
                "truncated": false
              },
              "resource": "startExecution.sync",
              "resourceType": "states"
            },
            "timestamp": "timestamp",
            "type": "TaskSubmitted"
          },
          {
            "id": 6,
            "previousEventId": 5,
            "taskSucceededEventDetails": {
              "output": {
                "ExecutionArn": "execution-arn",
                "Input": "{}",
                "InputDetails": {
                  "Included": true
                },
                "Name": "TestStartTarget",
                "Output": "{\"Arg1\":\"argument1\"}",
                "OutputDetails": {
                  "Included": true
                },
                "RedriveCount": 0,
                "RedriveStatus": "NOT_REDRIVABLE",
                "RedriveStatusReason": "Execution is SUCCEEDED and cannot be redriven",
                "StartDate": "start-date",
                "StateMachineArn": "state-machine-arn",
                "Status": "SUCCEEDED",
                "StopDate": "stop-date"
              },
              "outputDetails": {
                "truncated": false
              },
              "resource": "startExecution.sync",
              "resourceType": "states"
            },
            "timestamp": "timestamp",
            "type": "TaskSucceeded"
          },
          {
            "id": 7,
            "previousEventId": 6,
            "stateExitedEventDetails": {
              "name": "StartExecution",
              "output": {
                "ExecutionArn": "execution-arn",
                "Input": "{}",
                "InputDetails": {
                  "Included": true
                },
                "Name": "TestStartTarget",
                "Output": "{\"Arg1\":\"argument1\"}",
                "OutputDetails": {
                  "Included": true
                },
                "RedriveCount": 0,
                "RedriveStatus": "NOT_REDRIVABLE",
                "RedriveStatusReason": "Execution is SUCCEEDED and cannot be redriven",
                "StartDate": "start-date",
                "StateMachineArn": "state-machine-arn",
                "Status": "SUCCEEDED",
                "StopDate": "stop-date"
              },
              "outputDetails": {
                "truncated": false
              }
            },
            "timestamp": "timestamp",
            "type": "TaskStateExited"
          },
          {
            "executionSucceededEventDetails": {
              "output": {
                "ExecutionArn": "execution-arn",
                "Input": "{}",
                "InputDetails": {
                  "Included": true
                },
                "Name": "TestStartTarget",
                "Output": "{\"Arg1\":\"argument1\"}",
                "OutputDetails": {
                  "Included": true
                },
                "RedriveCount": 0,
                "RedriveStatus": "NOT_REDRIVABLE",
                "RedriveStatusReason": "Execution is SUCCEEDED and cannot be redriven",
                "StartDate": "start-date",
                "StateMachineArn": "state-machine-arn",
                "Status": "SUCCEEDED",
                "StopDate": "stop-date"
              },
              "outputDetails": {
                "truncated": false
              }
            },
            "id": 8,
            "previousEventId": 7,
            "timestamp": "timestamp",
            "type": "ExecutionSucceeded"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/stepfunctions/v2/mocking/test_base_callbacks.py::TestBaseScenarios::test_sfn_start_execution_sync[SFN_SYNC2]": {
    "recorded-date": "24-04-2025, 10:06:22",
    "recorded-content": {
      "get_execution_history": {
        "events": [
          {
            "executionStartedEventDetails": {
              "input": {
                "StateMachineArn": "state-machine-arn",
                "Input": null,
                "Name": "TestStartTarget"
              },
              "inputDetails": {
                "truncated": false
              },
              "roleArn": "snf_role_arn"
            },
            "id": 1,
            "previousEventId": 0,
            "timestamp": "timestamp",
            "type": "ExecutionStarted"
          },
          {
            "id": 2,
            "previousEventId": 0,
            "stateEnteredEventDetails": {
              "input": {
                "StateMachineArn": "state-machine-arn",
                "Input": null,
                "Name": "TestStartTarget"
              },
              "inputDetails": {
                "truncated": false
              },
              "name": "StartExecution"
            },
            "timestamp": "timestamp",
            "type": "TaskStateEntered"
          },
          {
            "id": 3,
            "previousEventId": 2,
            "taskScheduledEventDetails": {
              "parameters": {
                "Input": null,
                "StateMachineArn": "state-machine-arn",
                "Name": "TestStartTarget"
              },
              "region": "<region>",
              "resource": "startExecution.sync:2",
              "resourceType": "states"
            },
            "timestamp": "timestamp",
            "type": "TaskScheduled"
          },
          {
            "id": 4,
            "previousEventId": 3,
            "taskStartedEventDetails": {
              "resource": "startExecution.sync:2",
              "resourceType": "states"
            },
            "timestamp": "timestamp",
            "type": "TaskStarted"
          },
          {
            "id": 5,
            "previousEventId": 4,
            "taskSubmittedEventDetails": {
              "output": {
                "ExecutionArn": "execution-arn",
                "SdkHttpMetadata": {
                  "AllHttpHeaders": {
                    "x-amzn-RequestId": "x-amzn-RequestId",
                    "connection": [
                      "keep-alive"
                    ],
                    "Content-Length": [
                      "164"
                    ],
                    "Date": "date",
                    "Content-Type": [
                      "application/x-amz-json-1.0"
                    ]
                  },
                  "HttpHeaders": {
                    "connection": "keep-alive",
                    "Content-Length": "164",
                    "Content-Type": "application/x-amz-json-1.0",
                    "Date": "date",
                    "x-amzn-RequestId": "x-amzn-RequestId"
                  },
                  "HttpStatusCode": 200
                },
                "SdkResponseMetadata": {
                  "RequestId": "RequestId"
                },
                "StartDate": "start-date"
              },
              "outputDetails": {
                "truncated": false
              },
              "resource": "startExecution.sync:2",
              "resourceType": "states"
            },
            "timestamp": "timestamp",
            "type": "TaskSubmitted"
          },
          {
            "id": 6,
            "previousEventId": 5,
            "taskSucceededEventDetails": {
              "output": {
                "ExecutionArn": "execution-arn",
                "Input": {},
                "InputDetails": {
                  "Included": true
                },
                "Name": "TestStartTarget",
                "Output": {
                  "Arg1": "argument1"
                },
                "OutputDetails": {
                  "Included": true
                },
                "RedriveCount": 0,
                "RedriveStatus": "NOT_REDRIVABLE",
                "RedriveStatusReason": "Execution is SUCCEEDED and cannot be redriven",
                "StartDate": "start-date",
                "StateMachineArn": "state-machine-arn",
                "Status": "SUCCEEDED",
                "StopDate": "stop-date"
              },
              "outputDetails": {
                "truncated": false
              },
              "resource": "startExecution.sync:2",
              "resourceType": "states"
            },
            "timestamp": "timestamp",
            "type": "TaskSucceeded"
          },
          {
            "id": 7,
            "previousEventId": 6,
            "stateExitedEventDetails": {
              "name": "StartExecution",
              "output": {
                "ExecutionArn": "execution-arn",
                "Input": {},
                "InputDetails": {
                  "Included": true
                },
                "Name": "TestStartTarget",
                "Output": {
                  "Arg1": "argument1"
                },
                "OutputDetails": {
                  "Included": true
                },
                "RedriveCount": 0,
                "RedriveStatus": "NOT_REDRIVABLE",
                "RedriveStatusReason": "Execution is SUCCEEDED and cannot be redriven",
                "StartDate": "start-date",
                "StateMachineArn": "state-machine-arn",
                "Status": "SUCCEEDED",
                "StopDate": "stop-date"
              },
              "outputDetails": {
                "truncated": false
              }
            },
            "timestamp": "timestamp",
            "type": "TaskStateExited"
          },
          {
            "executionSucceededEventDetails": {
              "output": {
                "ExecutionArn": "execution-arn",
                "Input": {},
                "InputDetails": {
                  "Included": true
                },
                "Name": "TestStartTarget",
                "Output": {
                  "Arg1": "argument1"
                },
                "OutputDetails": {
                  "Included": true
                },
                "RedriveCount": 0,
                "RedriveStatus": "NOT_REDRIVABLE",
                "RedriveStatusReason": "Execution is SUCCEEDED and cannot be redriven",
                "StartDate": "start-date",
                "StateMachineArn": "state-machine-arn",
                "Status": "SUCCEEDED",
                "StopDate": "stop-date"
              },
              "outputDetails": {
                "truncated": false
              }
            },
            "id": 8,
            "previousEventId": 7,
            "timestamp": "timestamp",
            "type": "ExecutionSucceeded"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/stepfunctions/v2/mocking/test_base_callbacks.py::TestBaseScenarios::test_sqs_wait_for_task_token": {
    "recorded-date": "29-04-2025, 10:17:01",
    "recorded-content": {
      "get_execution_history": {
        "events": [
          {
            "executionStartedEventDetails": {
              "input": {
                "QueueUrl": "sqs_queue_url",
                "Message": "string-literal"
              },
              "inputDetails": {
                "truncated": false
              },
              "roleArn": "arn:<partition>:iam::111111111111:role/<resource:1>"
            },
            "id": 1,
            "previousEventId": 0,
            "timestamp": "timestamp",
            "type": "ExecutionStarted"
          },
          {
            "id": 2,
            "previousEventId": 0,
            "stateEnteredEventDetails": {
              "input": {
                "QueueUrl": "sqs_queue_url",
                "Message": "string-literal"
              },
              "inputDetails": {
                "truncated": false
              },
              "name": "SendMessageWithWait"
            },
            "timestamp": "timestamp",
            "type": "TaskStateEntered"
          },
          {
            "id": 3,
            "previousEventId": 2,
            "taskScheduledEventDetails": {
              "parameters": {
                "MessageBody": {
                  "Message": "string-literal",
                  "TaskToken": "<task_token:1>"
                },
                "QueueUrl": "sqs_queue_url"
              },
              "region": "<region>",
              "resource": "sendMessage.waitForTaskToken",
              "resourceType": "sqs"
            },
            "timestamp": "timestamp",
            "type": "TaskScheduled"
          },
          {
            "id": 4,
            "previousEventId": 3,
            "taskStartedEventDetails": {
              "resource": "sendMessage.waitForTaskToken",
              "resourceType": "sqs"
            },
            "timestamp": "timestamp",
            "type": "TaskStarted"
          },
          {
            "id": 5,
            "previousEventId": 4,
            "taskSubmittedEventDetails": {
              "output": {
                "MD5OfMessageBody": "<m-d5-of-message-body:1>",
                "MessageId": "<uuid:1>",
                "SdkHttpMetadata": {
                  "AllHttpHeaders": {
                    "x-amzn-RequestId": "x-amzn-RequestId",
                    "connection": [
                      "keep-alive"
                    ],
                    "Content-Length": [
                      "106"
                    ],
                    "Date": "date",
                    "Content-Type": [
                      "application/x-amz-json-1.0"
                    ]
                  },
                  "HttpHeaders": {
                    "connection": "keep-alive",
                    "Content-Length": "106",
                    "Content-Type": "application/x-amz-json-1.0",
                    "Date": "date",
                    "x-amzn-RequestId": "x-amzn-RequestId"
                  },
                  "HttpStatusCode": 200
                },
                "SdkResponseMetadata": {
                  "RequestId": "RequestId"
                }
              },
              "outputDetails": {
                "truncated": false
              },
              "resource": "sendMessage.waitForTaskToken",
              "resourceType": "sqs"
            },
            "timestamp": "timestamp",
            "type": "TaskSubmitted"
          },
          {
            "id": 6,
            "previousEventId": 5,
            "taskSucceededEventDetails": {
              "output": "\"string-literal\"",
              "outputDetails": {
                "truncated": false
              },
              "resource": "sendMessage.waitForTaskToken",
              "resourceType": "sqs"
            },
            "timestamp": "timestamp",
            "type": "TaskSucceeded"
          },
          {
            "id": 7,
            "previousEventId": 6,
            "stateExitedEventDetails": {
              "name": "SendMessageWithWait",
              "output": "\"string-literal\"",
              "outputDetails": {
                "truncated": false
              }
            },
            "timestamp": "timestamp",
            "type": "TaskStateExited"
          },
          {
            "executionSucceededEventDetails": {
              "output": "\"string-literal\"",
              "outputDetails": {
                "truncated": false
              }
            },
            "id": 8,
            "previousEventId": 7,
            "timestamp": "timestamp",
            "type": "ExecutionSucceeded"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/stepfunctions/v2/mocking/test_base_callbacks.py::TestBaseScenarios::test_sqs_wait_for_task_token_task_failure": {
    "recorded-date": "29-04-2025, 11:15:14",
    "recorded-content": {
      "get_execution_history": {
        "events": [
          {
            "executionStartedEventDetails": {
              "input": {
                "QueueUrl": "sqs_queue_url",
                "Message": "string-literal"
              },
              "inputDetails": {
                "truncated": false
              },
              "roleArn": "arn:<partition>:iam::111111111111:role/<resource:1>"
            },
            "id": 1,
            "previousEventId": 0,
            "timestamp": "timestamp",
            "type": "ExecutionStarted"
          },
          {
            "id": 2,
            "previousEventId": 0,
            "stateEnteredEventDetails": {
              "input": {
                "QueueUrl": "sqs_queue_url",
                "Message": "string-literal"
              },
              "inputDetails": {
                "truncated": false
              },
              "name": "SendMessageWithWait"
            },
            "timestamp": "timestamp",
            "type": "TaskStateEntered"
          },
          {
            "id": 3,
            "previousEventId": 2,
            "taskScheduledEventDetails": {
              "parameters": {
                "MessageBody": {
                  "Context": {
                    "QueueUrl": "sqs_queue_url",
                    "Message": "string-literal"
                  },
                  "TaskToken": "<task_token:1>"
                },
                "QueueUrl": "sqs_queue_url"
              },
              "region": "<region>",
              "resource": "sendMessage.waitForTaskToken",
              "resourceType": "sqs"
            },
            "timestamp": "timestamp",
            "type": "TaskScheduled"
          },
          {
            "id": 4,
            "previousEventId": 3,
            "taskStartedEventDetails": {
              "resource": "sendMessage.waitForTaskToken",
              "resourceType": "sqs"
            },
            "timestamp": "timestamp",
            "type": "TaskStarted"
          },
          {
            "id": 5,
            "previousEventId": 4,
            "taskSubmittedEventDetails": {
              "output": {
                "MD5OfMessageBody": "<m-d5-of-message-body:1>",
                "MessageId": "<uuid:1>",
                "SdkHttpMetadata": {
                  "AllHttpHeaders": {
                    "x-amzn-RequestId": "x-amzn-RequestId",
                    "connection": [
                      "keep-alive"
                    ],
                    "Content-Length": [
                      "106"
                    ],
                    "Date": "date",
                    "Content-Type": [
                      "application/x-amz-json-1.0"
                    ]
                  },
                  "HttpHeaders": {
                    "connection": "keep-alive",
                    "Content-Length": "106",
                    "Content-Type": "application/x-amz-json-1.0",
                    "Date": "date",
                    "x-amzn-RequestId": "x-amzn-RequestId"
                  },
                  "HttpStatusCode": 200
                },
                "SdkResponseMetadata": {
                  "RequestId": "RequestId"
                }
              },
              "outputDetails": {
                "truncated": false
              },
              "resource": "sendMessage.waitForTaskToken",
              "resourceType": "sqs"
            },
            "timestamp": "timestamp",
            "type": "TaskSubmitted"
          },
          {
            "id": 6,
            "previousEventId": 5,
            "taskFailedEventDetails": {
              "cause": "Failure cause",
              "error": "Failure error",
              "resource": "sendMessage.waitForTaskToken",
              "resourceType": "sqs"
            },
            "timestamp": "timestamp",
            "type": "TaskFailed"
          },
          {
            "id": 7,
            "previousEventId": 6,
            "stateExitedEventDetails": {
              "name": "SendMessageWithWait",
              "output": {
                "QueueUrl": "sqs_queue_url",
                "Message": "string-literal",
                "states_all_error": {
                  "Error": "Failure error",
                  "Cause": "Failure cause"
                }
              },
              "outputDetails": {
                "truncated": false
              }
            },
            "timestamp": "timestamp",
            "type": "TaskStateExited"
          },
          {
            "id": 8,
            "previousEventId": 7,
            "stateEnteredEventDetails": {
              "input": {
                "QueueUrl": "sqs_queue_url",
                "Message": "string-literal",
                "states_all_error": {
                  "Error": "Failure error",
                  "Cause": "Failure cause"
                }
              },
              "inputDetails": {
                "truncated": false
              },
              "name": "CaughtStatesALL"
            },
            "timestamp": "timestamp",
            "type": "PassStateEntered"
          },
          {
            "id": 9,
            "previousEventId": 8,
            "stateExitedEventDetails": {
              "name": "CaughtStatesALL",
              "output": {
                "QueueUrl": "sqs_queue_url",
                "Message": "string-literal",
                "states_all_error": {
                  "Error": "Failure error",
                  "Cause": "Failure cause"
                }
              },
              "outputDetails": {
                "truncated": false
              }
            },
            "timestamp": "timestamp",
            "type": "PassStateExited"
          },
          {
            "executionSucceededEventDetails": {
              "output": {
                "QueueUrl": "sqs_queue_url",
                "Message": "string-literal",
                "states_all_error": {
                  "Error": "Failure error",
                  "Cause": "Failure cause"
                }
              },
              "outputDetails": {
                "truncated": false
              }
            },
            "id": 10,
            "previousEventId": 9,
            "timestamp": "timestamp",
            "type": "ExecutionSucceeded"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe_execution_response": {
        "executionArn": "arn:<partition>:states:<region>:111111111111:execution:<resource:3>:<resource:2>",
        "input": {
          "QueueUrl": "sqs_queue_url",
          "Message": "string-literal"
        },
        "inputDetails": {
          "included": true
        },
        "name": "<resource:2>",
        "output": {
          "QueueUrl": "sqs_queue_url",
          "Message": "string-literal",
          "states_all_error": {
            "Error": "Failure error",
            "Cause": "Failure cause"
          }
        },
        "outputDetails": {
          "included": true
        },
        "redriveCount": 0,
        "redriveStatus": "NOT_REDRIVABLE",
        "redriveStatusReason": "Execution is SUCCEEDED and cannot be redriven",
        "startDate": "datetime",
        "stateMachineArn": "arn:<partition>:states:<region>:111111111111:stateMachine:<resource:3>",
        "status": "SUCCEEDED",
        "stopDate": "datetime",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  }
}
