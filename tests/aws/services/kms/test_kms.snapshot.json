{
  "tests/aws/services/kms/test_kms.py::TestKMS::test_generate_random_invalid_number_of_bytes[None]": {
    "recorded-date": "26-06-2025, 19:18:57",
    "recorded-content": {
      "generate-random-exc": {
        "Error": {
          "Code": "ValidationException",
          "Message": "NumberOfBytes is required."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_generate_random_invalid_number_of_bytes[0]": {
    "recorded-date": "26-06-2025, 19:18:57",
    "recorded-content": {
      "generate-random-exc": {
        "Error": {
          "Code": "ValidationException",
          "Message": "1 validation error detected: Value '0' at 'numberOfBytes' failed to satisfy constraint: Member must have value greater than or equal to 1"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_generate_random_invalid_number_of_bytes[1025]": {
    "recorded-date": "26-06-2025, 19:18:57",
    "recorded-content": {
      "generate-random-exc": {
        "Error": {
          "Code": "ValidationException",
          "Message": "1 validation error detected: Value '1025' at 'numberOfBytes' failed to satisfy constraint: Member must have value less than or equal to 1024"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_encrypt_validate_plaintext_size_per_key_type[RSA_2048-RSAES_OAEP_SHA_1]": {
    "recorded-date": "26-06-2025, 19:19:17",
    "recorded-content": {
      "generate-random-exc": {
        "Error": {
          "Code": "ValidationException",
          "Message": "Algorithm RSAES_OAEP_SHA_1 and key spec RSA_2048 cannot encrypt data larger than 214 bytes."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_encrypt_validate_plaintext_size_per_key_type[RSA_2048-RSAES_OAEP_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:17",
    "recorded-content": {
      "generate-random-exc": {
        "Error": {
          "Code": "ValidationException",
          "Message": "Algorithm RSAES_OAEP_SHA_256 and key spec RSA_2048 cannot encrypt data larger than 190 bytes."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_encrypt_validate_plaintext_size_per_key_type[RSA_3072-RSAES_OAEP_SHA_1]": {
    "recorded-date": "26-06-2025, 19:19:17",
    "recorded-content": {
      "generate-random-exc": {
        "Error": {
          "Code": "ValidationException",
          "Message": "Algorithm RSAES_OAEP_SHA_1 and key spec RSA_3072 cannot encrypt data larger than 342 bytes."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_encrypt_validate_plaintext_size_per_key_type[RSA_3072-RSAES_OAEP_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:17",
    "recorded-content": {
      "generate-random-exc": {
        "Error": {
          "Code": "ValidationException",
          "Message": "Algorithm RSAES_OAEP_SHA_256 and key spec RSA_3072 cannot encrypt data larger than 318 bytes."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_encrypt_validate_plaintext_size_per_key_type[RSA_4096-RSAES_OAEP_SHA_1]": {
    "recorded-date": "26-06-2025, 19:19:19",
    "recorded-content": {
      "generate-random-exc": {
        "Error": {
          "Code": "ValidationException",
          "Message": "Algorithm RSAES_OAEP_SHA_1 and key spec RSA_4096 cannot encrypt data larger than 470 bytes."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_encrypt_validate_plaintext_size_per_key_type[RSA_4096-RSAES_OAEP_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:20",
    "recorded-content": {
      "generate-random-exc": {
        "Error": {
          "Code": "ValidationException",
          "Message": "Algorithm RSAES_OAEP_SHA_256 and key spec RSA_4096 cannot encrypt data larger than 446 bytes."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_generate_random[12]": {
    "recorded-date": "26-06-2025, 19:18:57",
    "recorded-content": {
      "result_length": 12
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_generate_random[44]": {
    "recorded-date": "26-06-2025, 19:18:57",
    "recorded-content": {
      "result_length": 44
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_generate_random[91]": {
    "recorded-date": "26-06-2025, 19:18:57",
    "recorded-content": {
      "result_length": 91
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_generate_random[1]": {
    "recorded-date": "26-06-2025, 19:18:57",
    "recorded-content": {
      "result_length": 1
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_generate_random[1024]": {
    "recorded-date": "26-06-2025, 19:18:57",
    "recorded-content": {
      "result_length": 1024
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_key": {
    "recorded-date": "26-06-2025, 19:18:53",
    "recorded-content": {
      "describe-key": {
        "AWSAccountId": "111111111111",
        "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
        "CreationDate": "datetime",
        "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
        "Description": "test key 123",
        "Enabled": true,
        "EncryptionAlgorithms": [
          "SYMMETRIC_DEFAULT"
        ],
        "KeyId": "<key-id:1>",
        "KeyManager": "CUSTOMER",
        "KeySpec": "SYMMETRIC_DEFAULT",
        "KeyState": "Enabled",
        "KeyUsage": "ENCRYPT_DECRYPT",
        "MultiRegion": false,
        "Origin": "AWS_KMS"
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_get_key_in_different_region": {
    "recorded-date": "26-06-2025, 19:18:55",
    "recorded-content": {
      "describe-key-diff-region-with-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Key 'arn:<partition>:kms:<region>:111111111111:key/<key-id:1>' does not exist"
        },
        "message": "Key 'arn:<partition>:kms:<region>:111111111111:key/<key-id:1>' does not exist",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "describe-key-diff-region-with-arn": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid arn <secondary-region>"
        },
        "message": "Invalid arn <secondary-region>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "describe-key-same-specific-region-with-id": {
        "KeyMetadata": {
          "AWSAccountId": "111111111111",
          "Arn": "arn:<partition>:kms:<secondary-region>:111111111111:key/<key-id:1>",
          "CreationDate": "datetime",
          "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
          "Description": "test key 123",
          "Enabled": true,
          "EncryptionAlgorithms": [
            "SYMMETRIC_DEFAULT"
          ],
          "KeyId": "<key-id:1>",
          "KeyManager": "CUSTOMER",
          "KeySpec": "SYMMETRIC_DEFAULT",
          "KeyState": "Enabled",
          "KeyUsage": "ENCRYPT_DECRYPT",
          "MultiRegion": false,
          "Origin": "AWS_KMS"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-key-same-specific-region-with-arn": {
        "KeyMetadata": {
          "AWSAccountId": "111111111111",
          "Arn": "arn:<partition>:kms:<secondary-region>:111111111111:key/<key-id:1>",
          "CreationDate": "datetime",
          "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
          "Description": "test key 123",
          "Enabled": true,
          "EncryptionAlgorithms": [
            "SYMMETRIC_DEFAULT"
          ],
          "KeyId": "<key-id:1>",
          "KeyManager": "CUSTOMER",
          "KeySpec": "SYMMETRIC_DEFAULT",
          "KeyState": "Enabled",
          "KeyUsage": "ENCRYPT_DECRYPT",
          "MultiRegion": false,
          "Origin": "AWS_KMS"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_get_key_does_not_exist": {
    "recorded-date": "26-06-2025, 19:18:56",
    "recorded-content": {
      "describe-nonexistent-key-with-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Key '<key-arn>' does not exist"
        },
        "message": "Key '<key-arn>' does not exist",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "describe-nonexistent-with-arn": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Key '<key-arn>' does not exist"
        },
        "message": "Key '<key-arn>' does not exist",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "describe-key-with-valid-id-mrk": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Key 'arn:<partition>:kms:<region>:111111111111:key/mrk-d3b95762d3b95762d3b95762d3b95762' does not exist"
        },
        "message": "Key 'arn:<partition>:kms:<region>:111111111111:key/mrk-d3b95762d3b95762d3b95762d3b95762' does not exist",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_get_key_invalid_uuid": {
    "recorded-date": "26-06-2025, 19:18:56",
    "recorded-content": {
      "describe-key-with-invalid-uuid": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid keyId 'fake-key-id'"
        },
        "message": "Invalid keyId 'fake-key-id'",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "describe-key-with-invalid-uuid-2": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid keyId '134f2428cec14b25a1ae9048164dba47'"
        },
        "message": "Invalid keyId '134f2428cec14b25a1ae9048164dba47'",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "describe-key-with-invalid-uuid-mrk": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid keyId 'mrk-fake-key-id'"
        },
        "message": "Invalid keyId 'mrk-fake-key-id'",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_replicate_key": {
    "recorded-date": "26-06-2025, 19:19:21",
    "recorded-content": {
      "describe-key-from-different-region": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Key 'arn:<partition>:kms:ap-southeast-1:111111111111:key/<key-id:1>' does not exist"
        },
        "message": "Key 'arn:<partition>:kms:ap-southeast-1:111111111111:key/<key-id:1>' does not exist",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "replicate-key": {
        "ReplicaKeyMetadata": {
          "AWSAccountId": "111111111111",
          "Arn": "arn:<partition>:kms:ap-southeast-1:111111111111:key/<key-id:1>",
          "CreationDate": "datetime",
          "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
          "Description": "",
          "Enabled": true,
          "EncryptionAlgorithms": [
            "SYMMETRIC_DEFAULT"
          ],
          "KeyId": "<key-id:1>",
          "KeyManager": "CUSTOMER",
          "KeySpec": "SYMMETRIC_DEFAULT",
          "KeyState": "Enabled",
          "KeyUsage": "ENCRYPT_DECRYPT",
          "MultiRegion": true,
          "MultiRegionConfiguration": {
            "MultiRegionKeyType": "REPLICA",
            "PrimaryKey": {
              "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
              "Region": "<region>"
            },
            "ReplicaKeys": [
              {
                "Arn": "arn:<partition>:kms:ap-southeast-1:111111111111:key/<key-id:1>",
                "Region": "ap-southeast-1"
              }
            ]
          },
          "Origin": "AWS_KMS"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-key-from-region": {
        "KeyMetadata": {
          "AWSAccountId": "111111111111",
          "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
          "CreationDate": "datetime",
          "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
          "Description": "test replicated key",
          "Enabled": true,
          "EncryptionAlgorithms": [
            "SYMMETRIC_DEFAULT"
          ],
          "KeyId": "<key-id:1>",
          "KeyManager": "CUSTOMER",
          "KeySpec": "SYMMETRIC_DEFAULT",
          "KeyState": "Enabled",
          "KeyUsage": "ENCRYPT_DECRYPT",
          "MultiRegion": true,
          "MultiRegionConfiguration": {
            "MultiRegionKeyType": "PRIMARY",
            "PrimaryKey": {
              "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
              "Region": "<region>"
            },
            "ReplicaKeys": [
              {
                "Arn": "arn:<partition>:kms:ap-southeast-1:111111111111:key/<key-id:1>",
                "Region": "ap-southeast-1"
              }
            ]
          },
          "Origin": "AWS_KMS"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-replicated-key": {
        "KeyMetadata": {
          "AWSAccountId": "111111111111",
          "Arn": "arn:<partition>:kms:ap-southeast-1:111111111111:key/<key-id:1>",
          "CreationDate": "datetime",
          "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
          "Description": "",
          "Enabled": true,
          "EncryptionAlgorithms": [
            "SYMMETRIC_DEFAULT"
          ],
          "KeyId": "<key-id:1>",
          "KeyManager": "CUSTOMER",
          "KeySpec": "SYMMETRIC_DEFAULT",
          "KeyState": "Enabled",
          "KeyUsage": "ENCRYPT_DECRYPT",
          "MultiRegion": true,
          "MultiRegionConfiguration": {
            "MultiRegionKeyType": "REPLICA",
            "PrimaryKey": {
              "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
              "Region": "<region>"
            },
            "ReplicaKeys": [
              {
                "Arn": "arn:<partition>:kms:ap-southeast-1:111111111111:key/<key-id:1>",
                "Region": "ap-southeast-1"
              }
            ]
          },
          "Origin": "AWS_KMS"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_alias": {
    "recorded-date": "26-06-2025, 19:18:53",
    "recorded-content": {
      "create_alias": {
        "Error": {
          "Code": "ValidationException",
          "Message": "Alias must start with the prefix \"alias/\". Please see https://docs.aws.amazon.com/kms/latest/developerguide/kms-alias.html"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_sign_verify[RSA_2048-RSASSA_PSS_SHA_256]": {
    "recorded-date": "26-06-2025, 19:18:58",
    "recorded-content": {
      "signature": {
        "KeyId": "<key-id:1>",
        "Signature": "<signature>",
        "SigningAlgorithm": "RSASSA_PSS_SHA_256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verification": {
        "KeyId": "<key-id:1>",
        "SignatureValid": true,
        "SigningAlgorithm": "RSASSA_PSS_SHA_256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "bad-digest": {
        "Error": {
          "Code": "ValidationException",
          "Message": "The provided data must be the same length as the hash algorithm's digest size."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "bad-signature": {
        "Error": {
          "Code": "KMSInvalidSignatureException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_sign_verify[RSA_2048-RSASSA_PSS_SHA_384]": {
    "recorded-date": "26-06-2025, 19:18:59",
    "recorded-content": {
      "signature": {
        "KeyId": "<key-id:1>",
        "Signature": "<signature>",
        "SigningAlgorithm": "RSASSA_PSS_SHA_384",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verification": {
        "KeyId": "<key-id:1>",
        "SignatureValid": true,
        "SigningAlgorithm": "RSASSA_PSS_SHA_384",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "bad-digest": {
        "Error": {
          "Code": "ValidationException",
          "Message": "The provided data must be the same length as the hash algorithm's digest size."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "bad-signature": {
        "Error": {
          "Code": "KMSInvalidSignatureException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_sign_verify[RSA_2048-RSASSA_PSS_SHA_512]": {
    "recorded-date": "26-06-2025, 19:18:59",
    "recorded-content": {
      "signature": {
        "KeyId": "<key-id:1>",
        "Signature": "<signature>",
        "SigningAlgorithm": "RSASSA_PSS_SHA_512",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verification": {
        "KeyId": "<key-id:1>",
        "SignatureValid": true,
        "SigningAlgorithm": "RSASSA_PSS_SHA_512",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "bad-digest": {
        "Error": {
          "Code": "ValidationException",
          "Message": "The provided data must be the same length as the hash algorithm's digest size."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "bad-signature": {
        "Error": {
          "Code": "KMSInvalidSignatureException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_sign_verify[RSA_4096-RSASSA_PKCS1_V1_5_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:04",
    "recorded-content": {
      "signature": {
        "KeyId": "<key-id:1>",
        "Signature": "<signature>",
        "SigningAlgorithm": "RSASSA_PKCS1_V1_5_SHA_256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verification": {
        "KeyId": "<key-id:1>",
        "SignatureValid": true,
        "SigningAlgorithm": "RSASSA_PKCS1_V1_5_SHA_256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "bad-digest": {
        "Error": {
          "Code": "ValidationException",
          "Message": "The provided data must be the same length as the hash algorithm's digest size."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "bad-signature": {
        "Error": {
          "Code": "KMSInvalidSignatureException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_sign_verify[RSA_4096-RSASSA_PKCS1_V1_5_SHA_512]": {
    "recorded-date": "26-06-2025, 19:19:08",
    "recorded-content": {
      "signature": {
        "KeyId": "<key-id:1>",
        "Signature": "<signature>",
        "SigningAlgorithm": "RSASSA_PKCS1_V1_5_SHA_512",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verification": {
        "KeyId": "<key-id:1>",
        "SignatureValid": true,
        "SigningAlgorithm": "RSASSA_PKCS1_V1_5_SHA_512",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "bad-digest": {
        "Error": {
          "Code": "ValidationException",
          "Message": "The provided data must be the same length as the hash algorithm's digest size."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "bad-signature": {
        "Error": {
          "Code": "KMSInvalidSignatureException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_sign_verify[ECC_NIST_P256-ECDSA_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:08",
    "recorded-content": {
      "signature": {
        "KeyId": "<key-id:1>",
        "Signature": "<signature>",
        "SigningAlgorithm": "ECDSA_SHA_256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verification": {
        "KeyId": "<key-id:1>",
        "SignatureValid": true,
        "SigningAlgorithm": "ECDSA_SHA_256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "bad-digest": {
        "Error": {
          "Code": "ValidationException",
          "Message": "The provided data must be the same length as the hash algorithm's digest size."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "bad-signature": {
        "Error": {
          "Code": "KMSInvalidSignatureException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_sign_verify[ECC_NIST_P256-ECDSA_SHA_384]": {
    "recorded-date": "16-03-2023, 18:57:59",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_sign_verify[ECC_SECG_P256K1-ECDSA_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:08",
    "recorded-content": {
      "signature": {
        "KeyId": "<key-id:1>",
        "Signature": "<signature>",
        "SigningAlgorithm": "ECDSA_SHA_256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verification": {
        "KeyId": "<key-id:1>",
        "SignatureValid": true,
        "SigningAlgorithm": "ECDSA_SHA_256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "bad-digest": {
        "Error": {
          "Code": "ValidationException",
          "Message": "The provided data must be the same length as the hash algorithm's digest size."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "bad-signature": {
        "Error": {
          "Code": "KMSInvalidSignatureException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_sign_verify[ECC_SECG_P256K1-ECDSA_SHA_512]": {
    "recorded-date": "16-03-2023, 18:58:07",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_sign_verify[ECC_NIST_P384-ECDSA_SHA_384]": {
    "recorded-date": "26-06-2025, 19:19:08",
    "recorded-content": {
      "signature": {
        "KeyId": "<key-id:1>",
        "Signature": "<signature>",
        "SigningAlgorithm": "ECDSA_SHA_384",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verification": {
        "KeyId": "<key-id:1>",
        "SignatureValid": true,
        "SigningAlgorithm": "ECDSA_SHA_384",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "bad-digest": {
        "Error": {
          "Code": "ValidationException",
          "Message": "The provided data must be the same length as the hash algorithm's digest size."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "bad-signature": {
        "Error": {
          "Code": "KMSInvalidSignatureException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_hmac_create_key": {
    "recorded-date": "26-06-2025, 19:19:24",
    "recorded-content": {
      "create-hmac-key": {
        "AWSAccountId": "111111111111",
        "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
        "CreationDate": "datetime",
        "CustomerMasterKeySpec": "HMAC_256",
        "Description": "test key",
        "Enabled": true,
        "KeyId": "<key-id:1>",
        "KeyManager": "CUSTOMER",
        "KeySpec": "HMAC_256",
        "KeyState": "Enabled",
        "KeyUsage": "GENERATE_VERIFY_MAC",
        "MacAlgorithms": [
          "HMAC_SHA_256"
        ],
        "MultiRegion": false,
        "Origin": "AWS_KMS"
      },
      "describe-key": {
        "AWSAccountId": "111111111111",
        "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
        "CreationDate": "datetime",
        "CustomerMasterKeySpec": "HMAC_256",
        "Description": "test key",
        "Enabled": true,
        "KeyId": "<key-id:1>",
        "KeyManager": "CUSTOMER",
        "KeySpec": "HMAC_256",
        "KeyState": "Enabled",
        "KeyUsage": "GENERATE_VERIFY_MAC",
        "MacAlgorithms": [
          "HMAC_SHA_256"
        ],
        "MultiRegion": false,
        "Origin": "AWS_KMS"
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_hmac_create_key_invalid_operations": {
    "recorded-date": "26-06-2025, 19:19:24",
    "recorded-content": {
      "create-hmac-key-without-key-usage": {
        "Error": {
          "Code": "ValidationException",
          "Message": "You must specify a KeyUsage value for all KMS keys except for symmetric encryption keys."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create-hmac-key-invalid-spec": {
        "Error": {
          "Code": "ValidationException",
          "Message": "1 validation error detected: Value 'HMAC_random' at 'keySpec' failed to satisfy constraint: Member must satisfy enum value set: [RSA_2048, ECC_NIST_P384, ECC_NIST_P256, ECC_NIST_P521, HMAC_384, RSA_3072, ECC_SECG_P256K1, RSA_4096, SYMMETRIC_DEFAULT, HMAC_256, HMAC_224, HMAC_512]"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "create-hmac-key-invalid-key-usage": {
        "Error": {
          "Code": "ValidationException",
          "Message": "1 validation error detected: Value 'RANDOM' at 'keyUsage' failed to satisfy constraint: Member must satisfy enum value set: [ENCRYPT_DECRYPT, SIGN_VERIFY, GENERATE_VERIFY_MAC]"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_generate_and_verify_mac[HMAC_224-HMAC_SHA_224]": {
    "recorded-date": "26-06-2025, 19:19:24",
    "recorded-content": {
      "generate-mac": {
        "KeyId": "<key-id:1>",
        "Mac": "<mac>",
        "MacAlgorithm": "HMAC_SHA_224",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verify-mac": {
        "KeyId": "<key-id:1>",
        "MacAlgorithm": "HMAC_SHA_224",
        "MacValid": true,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "generate-mac-invalid-key-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid keyId 'key_id'"
        },
        "message": "Invalid keyId 'key_id'",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "verify-mac-invalid-key-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid keyId 'key_id'"
        },
        "message": "Invalid keyId 'key_id'",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_generate_and_verify_mac[HMAC_256-HMAC_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:24",
    "recorded-content": {
      "generate-mac": {
        "KeyId": "<key-id:1>",
        "Mac": "<mac>",
        "MacAlgorithm": "HMAC_SHA_256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verify-mac": {
        "KeyId": "<key-id:1>",
        "MacAlgorithm": "HMAC_SHA_256",
        "MacValid": true,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "generate-mac-invalid-key-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid keyId 'key_id'"
        },
        "message": "Invalid keyId 'key_id'",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "verify-mac-invalid-key-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid keyId 'key_id'"
        },
        "message": "Invalid keyId 'key_id'",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_generate_and_verify_mac[HMAC_384-HMAC_SHA_384]": {
    "recorded-date": "26-06-2025, 19:19:24",
    "recorded-content": {
      "generate-mac": {
        "KeyId": "<key-id:1>",
        "Mac": "<mac>",
        "MacAlgorithm": "HMAC_SHA_384",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verify-mac": {
        "KeyId": "<key-id:1>",
        "MacAlgorithm": "HMAC_SHA_384",
        "MacValid": true,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "generate-mac-invalid-key-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid keyId 'key_id'"
        },
        "message": "Invalid keyId 'key_id'",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "verify-mac-invalid-key-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid keyId 'key_id'"
        },
        "message": "Invalid keyId 'key_id'",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_generate_and_verify_mac[HMAC_512-HMAC_SHA_512]": {
    "recorded-date": "26-06-2025, 19:19:24",
    "recorded-content": {
      "generate-mac": {
        "KeyId": "<key-id:1>",
        "Mac": "<mac>",
        "MacAlgorithm": "HMAC_SHA_512",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verify-mac": {
        "KeyId": "<key-id:1>",
        "MacAlgorithm": "HMAC_SHA_512",
        "MacValid": true,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "generate-mac-invalid-key-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid keyId 'key_id'"
        },
        "message": "Invalid keyId 'key_id'",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "verify-mac-invalid-key-id": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Invalid keyId 'key_id'"
        },
        "message": "Invalid keyId 'key_id'",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_invalid_generate_mac[HMAC_224-HMAC_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:24",
    "recorded-content": {
      "generate-mac": {
        "Error": {
          "Code": "InvalidKeyUsageException",
          "Message": "Algorithm HMAC_SHA_256 is incompatible with key spec HMAC_224."
        },
        "message": "Algorithm HMAC_SHA_256 is incompatible with key spec HMAC_224.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_invalid_generate_mac[HMAC_256-INVALID]": {
    "recorded-date": "26-06-2025, 19:19:24",
    "recorded-content": {
      "generate-mac": {
        "Error": {
          "Code": "ValidationException",
          "Message": "1 validation error detected: Value 'INVALID' at 'macAlgorithm' failed to satisfy constraint: Member must satisfy enum value set: [HMAC_SHA_384, HMAC_SHA_256, HMAC_SHA_224, HMAC_SHA_512]"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_invalid_verify_mac[HMAC_256-HMAC_SHA_256-some different important message]": {
    "recorded-date": "26-06-2025, 19:19:24",
    "recorded-content": {
      "generate-mac": {
        "KeyId": "<key-id:1>",
        "Mac": "<mac>",
        "MacAlgorithm": "HMAC_SHA_256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verify-mac": {
        "Error": {
          "Code": "KMSInvalidMacException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_invalid_verify_mac[HMAC_256-HMAC_SHA_512-some important message]": {
    "recorded-date": "26-06-2025, 19:19:24",
    "recorded-content": {
      "generate-mac": {
        "KeyId": "<key-id:1>",
        "Mac": "<mac>",
        "MacAlgorithm": "HMAC_SHA_256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verify-mac": {
        "Error": {
          "Code": "InvalidKeyUsageException",
          "Message": "Algorithm HMAC_SHA_512 is incompatible with key spec HMAC_256."
        },
        "message": "Algorithm HMAC_SHA_512 is incompatible with key spec HMAC_256.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_invalid_verify_mac[HMAC_256-INVALID-some important message]": {
    "recorded-date": "26-06-2025, 19:19:24",
    "recorded-content": {
      "generate-mac": {
        "KeyId": "<key-id:1>",
        "Mac": "<mac>",
        "MacAlgorithm": "HMAC_SHA_256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "verify-mac": {
        "Error": {
          "Code": "ValidationException",
          "Message": "1 validation error detected: Value 'INVALID' at 'macAlgorithm' failed to satisfy constraint: Member must satisfy enum value set: [HMAC_SHA_384, HMAC_SHA_256, HMAC_SHA_224, HMAC_SHA_512]"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_import_key_symmetric": {
    "recorded-date": "26-06-2025, 19:19:20",
    "recorded-content": {
      "created-key": {
        "AWSAccountId": "111111111111",
        "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
        "CreationDate": "datetime",
        "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
        "Description": "<description:1>",
        "Enabled": false,
        "EncryptionAlgorithms": [
          "SYMMETRIC_DEFAULT"
        ],
        "KeyId": "<key-id:1>",
        "KeyManager": "CUSTOMER",
        "KeySpec": "SYMMETRIC_DEFAULT",
        "KeyState": "PendingImport",
        "KeyUsage": "ENCRYPT_DECRYPT",
        "MultiRegion": false,
        "Origin": "EXTERNAL"
      },
      "encrypt-before-import-error": {
        "Error": {
          "Code": "KMSInvalidStateException",
          "Message": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1> is pending import."
        },
        "message": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1> is pending import.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "describe-key-before-import": {
        "KeyMetadata": {
          "AWSAccountId": "111111111111",
          "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
          "CreationDate": "datetime",
          "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
          "Description": "<description:1>",
          "Enabled": false,
          "EncryptionAlgorithms": [
            "SYMMETRIC_DEFAULT"
          ],
          "KeyId": "<key-id:1>",
          "KeyManager": "CUSTOMER",
          "KeySpec": "SYMMETRIC_DEFAULT",
          "KeyState": "PendingImport",
          "KeyUsage": "ENCRYPT_DECRYPT",
          "MultiRegion": false,
          "Origin": "EXTERNAL"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "import-expiring-key-without-valid-to": {
        "Error": {
          "Code": "ValidationException",
          "Message": "A validTo date must be set if the ExpirationModel is KEY_MATERIAL_EXPIRES"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "describe-key-after-import": {
        "KeyMetadata": {
          "AWSAccountId": "111111111111",
          "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
          "CreationDate": "datetime",
          "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
          "Description": "<description:1>",
          "Enabled": true,
          "EncryptionAlgorithms": [
            "SYMMETRIC_DEFAULT"
          ],
          "ExpirationModel": "KEY_MATERIAL_DOES_NOT_EXPIRE",
          "KeyId": "<key-id:1>",
          "KeyManager": "CUSTOMER",
          "KeySpec": "SYMMETRIC_DEFAULT",
          "KeyState": "Enabled",
          "KeyUsage": "ENCRYPT_DECRYPT",
          "MultiRegion": false,
          "Origin": "EXTERNAL"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-key-after-deleted-import": {
        "KeyMetadata": {
          "AWSAccountId": "111111111111",
          "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
          "CreationDate": "datetime",
          "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
          "Description": "<description:1>",
          "Enabled": false,
          "EncryptionAlgorithms": [
            "SYMMETRIC_DEFAULT"
          ],
          "KeyId": "<key-id:1>",
          "KeyManager": "CUSTOMER",
          "KeySpec": "SYMMETRIC_DEFAULT",
          "KeyState": "PendingImport",
          "KeyUsage": "ENCRYPT_DECRYPT",
          "MultiRegion": false,
          "Origin": "EXTERNAL"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "encrypt-after-delete-error": {
        "Error": {
          "Code": "KMSInvalidStateException",
          "Message": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1> is pending import."
        },
        "message": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1> is pending import.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_import_key_asymmetric": {
    "recorded-date": "26-06-2025, 19:19:20",
    "recorded-content": {
      "created-key": {
        "AWSAccountId": "111111111111",
        "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
        "CreationDate": "datetime",
        "CustomerMasterKeySpec": "ECC_NIST_P256",
        "Description": "<description:1>",
        "Enabled": false,
        "KeyId": "<key-id:1>",
        "KeyManager": "CUSTOMER",
        "KeySpec": "ECC_NIST_P256",
        "KeyState": "PendingImport",
        "KeyUsage": "SIGN_VERIFY",
        "MultiRegion": false,
        "Origin": "EXTERNAL",
        "SigningAlgorithms": [
          "ECDSA_SHA_256"
        ]
      },
      "describe-key-before-import": {
        "KeyMetadata": {
          "AWSAccountId": "111111111111",
          "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
          "CreationDate": "datetime",
          "CustomerMasterKeySpec": "ECC_NIST_P256",
          "Description": "<description:1>",
          "Enabled": false,
          "KeyId": "<key-id:1>",
          "KeyManager": "CUSTOMER",
          "KeySpec": "ECC_NIST_P256",
          "KeyState": "PendingImport",
          "KeyUsage": "SIGN_VERIFY",
          "MultiRegion": false,
          "Origin": "EXTERNAL",
          "SigningAlgorithms": [
            "ECDSA_SHA_256"
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-key-after-import": {
        "KeyMetadata": {
          "AWSAccountId": "111111111111",
          "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
          "CreationDate": "datetime",
          "CustomerMasterKeySpec": "ECC_NIST_P256",
          "Description": "<description:1>",
          "Enabled": true,
          "ExpirationModel": "KEY_MATERIAL_DOES_NOT_EXPIRE",
          "KeyId": "<key-id:1>",
          "KeyManager": "CUSTOMER",
          "KeySpec": "ECC_NIST_P256",
          "KeyState": "Enabled",
          "KeyUsage": "SIGN_VERIFY",
          "MultiRegion": false,
          "Origin": "EXTERNAL",
          "SigningAlgorithms": [
            "ECDSA_SHA_256"
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "describe-key-after-deleted-import": {
        "KeyMetadata": {
          "AWSAccountId": "111111111111",
          "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
          "CreationDate": "datetime",
          "CustomerMasterKeySpec": "ECC_NIST_P256",
          "Description": "<description:1>",
          "Enabled": false,
          "KeyId": "<key-id:1>",
          "KeyManager": "CUSTOMER",
          "KeySpec": "ECC_NIST_P256",
          "KeyState": "PendingImport",
          "KeyUsage": "SIGN_VERIFY",
          "MultiRegion": false,
          "Origin": "EXTERNAL",
          "SigningAlgorithms": [
            "ECDSA_SHA_256"
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_error_messaging_for_invalid_keys": {
    "recorded-date": "26-06-2025, 19:19:25",
    "recorded-content": {
      "generate-mac-invalid-key-id": {
        "Error": {
          "Code": "InvalidKeyUsageException",
          "Message": "<key-arn> key usage is ENCRYPT_DECRYPT which is not valid for GenerateMac."
        },
        "message": "<key-arn> key usage is ENCRYPT_DECRYPT which is not valid for GenerateMac.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "sign-invalid-key-id": {
        "Error": {
          "Code": "InvalidKeyUsageException",
          "Message": "<key-arn> key usage is GENERATE_VERIFY_MAC which is not valid for Sign."
        },
        "message": "<key-arn> key usage is GENERATE_VERIFY_MAC which is not valid for Sign.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "verify-invalid-key-id": {
        "Error": {
          "Code": "InvalidKeyUsageException",
          "Message": "<key-arn> key usage is ENCRYPT_DECRYPT which is not valid for Verify."
        },
        "message": "<key-arn> key usage is ENCRYPT_DECRYPT which is not valid for Verify.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "encrypt-invalid-key-id": {
        "Error": {
          "Code": "InvalidKeyUsageException",
          "Message": "<key-arn> key usage is SIGN_VERIFY which is not valid for Encrypt."
        },
        "message": "<key-arn> key usage is SIGN_VERIFY which is not valid for Encrypt.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "decrypt-invalid-key-id": {
        "Error": {
          "Code": "IncorrectKeyException",
          "Message": "The key ID in the request does not identify a CMK that can perform this operation."
        },
        "message": "The key ID in the request does not identify a CMK that can perform this operation.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_plaintext_size_for_encrypt": {
    "recorded-date": "26-06-2025, 19:19:25",
    "recorded-content": {
      "invalid-plaintext-size-encrypt": {
        "Error": {
          "Code": "ValidationException",
          "Message": "1 validation error detected: Value at 'plaintext' failed to satisfy constraint: Member must have length less than or equal to 4096"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMSGenerateKeys::test_generate_data_key_pair_without_plaintext": {
    "recorded-date": "26-06-2025, 19:19:30",
    "recorded-content": {
      "generate-data-key-pair-without-plaintext": {
        "KeyId": "arn:<partition>:kms:<region>:111111111111:key/<resource:1>",
        "KeyPairSpec": "RSA_2048",
        "PrivateKeyCiphertextBlob": "private-key-ciphertext-blob",
        "PublicKey": "public-key",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMSGenerateKeys::test_generate_data_key_pair": {
    "recorded-date": "26-06-2025, 19:19:30",
    "recorded-content": {
      "generate-data-key-pair": {
        "KeyId": "arn:<partition>:kms:<region>:111111111111:key/<resource:1>",
        "KeyPairSpec": "RSA_2048",
        "PrivateKeyCiphertextBlob": "private-key-ciphertext-blob",
        "PrivateKeyPlaintext": "private-key-plaintext",
        "PublicKey": "public-key",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMSGenerateKeys::test_generate_data_key": {
    "recorded-date": "26-06-2025, 19:19:30",
    "recorded-content": {
      "generate-data-key-result": {
        "CiphertextBlob": "ciphertext-blob",
        "KeyId": "arn:<partition>:kms:<region>:111111111111:key/<resource:1>",
        "Plaintext": "plaintext",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMSGenerateKeys::test_generate_data_key_without_plaintext": {
    "recorded-date": "26-06-2025, 19:19:30",
    "recorded-content": {
      "generate-data-key-without-plaintext": {
        "CiphertextBlob": "ciphertext-blob",
        "KeyId": "arn:<partition>:kms:<region>:111111111111:key/<resource:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_encrypt_decrypt_encryption_context": {
    "recorded-date": "26-06-2025, 19:19:25",
    "recorded-content": {
      "encrypt_response": {
        "CiphertextBlob": "ciphertext-blob",
        "EncryptionAlgorithm": "SYMMETRIC_DEFAULT",
        "KeyId": "<key-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "decrypt_response_with_encryption_context": {
        "EncryptionAlgorithm": "SYMMETRIC_DEFAULT",
        "KeyId": "<key-id:1>",
        "Plaintext": "plaintext",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "decrypt_response_without_encryption_context": {
        "Error": {
          "Code": "InvalidCiphertextException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMSGenerateKeys::test_encryption_context_generate_data_key": {
    "recorded-date": "26-06-2025, 19:19:30",
    "recorded-content": {
      "decrypt-without-encryption-context": {
        "Error": {
          "Code": "InvalidCiphertextException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMSGenerateKeys::test_encryption_context_generate_data_key_without_plaintext": {
    "recorded-date": "26-06-2025, 19:19:30",
    "recorded-content": {
      "decrypt-without-encryption-context": {
        "Error": {
          "Code": "InvalidCiphertextException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMSGenerateKeys::test_encryption_context_generate_data_key_pair": {
    "recorded-date": "26-06-2025, 19:19:30",
    "recorded-content": {
      "decrypt-without-encryption-context": {
        "Error": {
          "Code": "InvalidCiphertextException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMSGenerateKeys::test_encryption_context_generate_data_key_pair_without_plaintext": {
    "recorded-date": "26-06-2025, 19:19:30",
    "recorded-content": {
      "decrypt-without-encryption-context": {
        "Error": {
          "Code": "InvalidCiphertextException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_get_parameters_for_import": {
    "recorded-date": "26-06-2025, 19:19:25",
    "recorded-content": {
      "response-error": {
        "Error": {
          "Code": "UnsupportedOperationException",
          "Message": "<key-arn> origin is AWS_KMS which is not valid for this operation."
        },
        "message": "<key-arn> origin is AWS_KMS which is not valid for this operation.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_multi_region_key": {
    "recorded-date": "26-06-2025, 19:19:21",
    "recorded-content": {
      "create_multi_region_key": {
        "AWSAccountId": "111111111111",
        "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
        "CreationDate": "datetime",
        "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
        "Description": "test multi region key",
        "Enabled": true,
        "EncryptionAlgorithms": [
          "SYMMETRIC_DEFAULT"
        ],
        "KeyId": "<key-id:1>",
        "KeyManager": "CUSTOMER",
        "KeySpec": "SYMMETRIC_DEFAULT",
        "KeyState": "Enabled",
        "KeyUsage": "ENCRYPT_DECRYPT",
        "MultiRegion": true,
        "MultiRegionConfiguration": {
          "MultiRegionKeyType": "PRIMARY",
          "PrimaryKey": {
            "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
            "Region": "<region>"
          },
          "ReplicaKeys": []
        },
        "Origin": "AWS_KMS"
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_non_multi_region_keys_should_not_have_multi_region_properties": {
    "recorded-date": "26-06-2025, 19:19:21",
    "recorded-content": {
      "non_multi_region_keys_should_not_have_multi_region_properties": {
        "AWSAccountId": "111111111111",
        "Arn": "arn:<partition>:kms:<region>:111111111111:key/<key-id:1>",
        "CreationDate": "datetime",
        "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
        "Description": "test non multi region key",
        "Enabled": true,
        "EncryptionAlgorithms": [
          "SYMMETRIC_DEFAULT"
        ],
        "KeyId": "<key-id:1>",
        "KeyManager": "CUSTOMER",
        "KeySpec": "SYMMETRIC_DEFAULT",
        "KeyState": "Enabled",
        "KeyUsage": "ENCRYPT_DECRYPT",
        "MultiRegion": false,
        "Origin": "AWS_KMS"
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_derive_shared_secret": {
    "recorded-date": "26-06-2025, 19:19:25",
    "recorded-content": {
      "response": {
        "KeyAgreementAlgorithm": "ECDH",
        "KeyId": "<key-id:1>",
        "KeyOrigin": "AWS_KMS",
        "SharedSecret": "shared-secret",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "response-invalid-key-usage": {
        "Error": {
          "Code": "InvalidKeyUsageException",
          "Message": "<key-arn> key usage is SIGN_VERIFY which is not valid for DeriveSharedSecret."
        },
        "message": "<key-arn> key usage is SIGN_VERIFY which is not valid for DeriveSharedSecret.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "response-invalid-key-spec": {
        "Error": {
          "Code": "ValidationException",
          "Message": "KeyUsage KEY_AGREEMENT is not compatible with KeySpec RSA_2048"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "response-invalid-key-agreement-algo": {
        "Error": {
          "Code": "ValidationException",
          "Message": "1 validation error detected: Value 'INVALID' at 'keyAgreementAlgorithm' failed to satisfy constraint: Member must satisfy enum value set: [ECDH]"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "response-invalid-key": {
        "Error": {
          "Code": "InvalidKeyUsageException",
          "Message": "<key-arn> key usage is ENCRYPT_DECRYPT which is not valid for DeriveSharedSecret."
        },
        "message": "<key-arn> key usage is ENCRYPT_DECRYPT which is not valid for DeriveSharedSecret.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "response-invalid-public-key": {
        "Error": {
          "Code": "ValidationException",
          "Message": ""
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_tag_existing_key_and_untag": {
    "recorded-date": "26-06-2025, 19:18:53",
    "recorded-content": {
      "list-resource-tags": [
        {
          "TagKey": "tag1",
          "TagValue": "value1"
        },
        {
          "TagKey": "tag2",
          "TagValue": "value2"
        }
      ],
      "list-resource-tags-after-all-untagged": []
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_key_with_tag_and_untag": {
    "recorded-date": "26-06-2025, 19:18:54",
    "recorded-content": {
      "list-resource-tags": [
        {
          "TagKey": "tag1",
          "TagValue": "value1"
        },
        {
          "TagKey": "tag2",
          "TagValue": "value2"
        }
      ],
      "list-resource-tags-after-all-untagged": []
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_untag_key_partially": {
    "recorded-date": "26-06-2025, 19:18:54",
    "recorded-content": {
      "list-resource-tags": [
        {
          "TagKey": "tag1",
          "TagValue": "value1"
        },
        {
          "TagKey": "tag2",
          "TagValue": "value2"
        },
        {
          "TagKey": "tag3",
          "TagValue": "value3"
        }
      ],
      "list-resource-tags-after-partially-untagged": [
        {
          "TagKey": "tag1",
          "TagValue": "value1"
        },
        {
          "TagKey": "tag3",
          "TagValue": "value3"
        }
      ]
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_update_and_add_tags_on_tagged_key": {
    "recorded-date": "26-06-2025, 19:18:54",
    "recorded-content": {
      "list-resource-tags": [
        {
          "TagKey": "tag1",
          "TagValue": "value1"
        },
        {
          "TagKey": "tag2",
          "TagValue": "value2"
        },
        {
          "TagKey": "tag3",
          "TagValue": "value3"
        }
      ],
      "list-resource-tags-after-tags-updated": [
        {
          "TagKey": "tag1",
          "TagValue": "value1"
        },
        {
          "TagKey": "tag2",
          "TagValue": "updated_value2"
        },
        {
          "TagKey": "tag3",
          "TagValue": "value3"
        },
        {
          "TagKey": "tag4",
          "TagValue": "value4"
        },
        {
          "TagKey": "tag5",
          "TagValue": "value5"
        }
      ]
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_tag_key_with_duplicate_tag_keys_raises_error": {
    "recorded-date": "26-06-2025, 19:18:54",
    "recorded-content": {
      "duplicate-tag-keys": {
        "Error": {
          "Code": "TagException",
          "Message": "Duplicate tag keys"
        },
        "message": "Duplicate tag keys",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_key_with_too_many_tags_raises_error": {
    "recorded-date": "26-06-2025, 19:18:54",
    "recorded-content": {
      "invalid-tag-key": {
        "Error": {
          "Code": "TagException",
          "Message": "Too many tags"
        },
        "message": "Too many tags",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_tag_existing_key_with_invalid_tag_key": {
    "recorded-date": "26-06-2025, 19:18:55",
    "recorded-content": {
      "invalid-tag-key": {
        "Error": {
          "Code": "TagException",
          "Message": "Tags beginning with aws: are reserved"
        },
        "message": "Tags beginning with aws: are reserved",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_key_with_long_tag_value_raises_error": {
    "recorded-date": "26-06-2025, 19:18:55",
    "recorded-content": {
      "too-long-tag-value": {
        "Error": {
          "Code": "ValidationException",
          "Message": "1 validation error detected: Value 'vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv' at 'tags.1.member.tagValue' failed to satisfy constraint: Member must have length less than or equal to 256"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_key_with_invalid_tag_key[lowercase_prefix]": {
    "recorded-date": "26-06-2025, 19:18:54",
    "recorded-content": {
      "invalid-tag-key": {
        "Error": {
          "Code": "TagException",
          "Message": "Tags beginning with aws: are reserved"
        },
        "message": "Tags beginning with aws: are reserved",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_key_with_invalid_tag_key[uppercase_prefix]": {
    "recorded-date": "26-06-2025, 19:18:55",
    "recorded-content": {
      "invalid-tag-key": {
        "Error": {
          "Code": "TagException",
          "Message": "Tags beginning with aws: are reserved"
        },
        "message": "Tags beginning with aws: are reserved",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_key_with_invalid_tag_key[too_long_key]": {
    "recorded-date": "26-06-2025, 19:18:55",
    "recorded-content": {
      "invalid-tag-key": {
        "Error": {
          "Code": "ValidationException",
          "Message": "1 validation error detected: Value 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' at 'tags.1.member.tagKey' failed to satisfy constraint: Member must have length less than or equal to 128"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_key_enable_rotation_status[90]": {
    "recorded-date": "26-06-2025, 19:19:23",
    "recorded-content": {
      "match_response": {
        "KeyId": "<key-id:1>",
        "KeyRotationEnabled": true,
        "NextRotationDate": "datetime",
        "RotationPeriodInDays": 90,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_key_enable_rotation_status[180]": {
    "recorded-date": "26-06-2025, 19:19:23",
    "recorded-content": {
      "match_response": {
        "KeyId": "<key-id:1>",
        "KeyRotationEnabled": true,
        "NextRotationDate": "datetime",
        "RotationPeriodInDays": 180,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_rotate_key_on_demand_modifies_key_material": {
    "recorded-date": "26-06-2025, 19:19:21",
    "recorded-content": {
      "rotate-on-demand-response": {
        "KeyId": "<key-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_rotate_key_on_demand_with_symmetric_key_and_automatic_rotation_disabled": {
    "recorded-date": "26-06-2025, 19:19:22",
    "recorded-content": {
      "rotate-on-demand-response": {
        "KeyId": "<key-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "rotation-status-response-after-rotation": {
        "KeyId": "<key-id:1>",
        "KeyRotationEnabled": false,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_rotate_key_on_demand_with_symmetric_key_and_automatic_rotation_enabled": {
    "recorded-date": "26-06-2025, 19:19:22",
    "recorded-content": {
      "rotate-on-demand-response": {
        "KeyId": "<key-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "rotation-status-response-after-rotation": {
        "KeyId": "<key-id:1>",
        "KeyRotationEnabled": true,
        "NextRotationDate": "datetime",
        "RotationPeriodInDays": 365,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_rotate_key_on_demand_succeeds_for_key_with_imported_key_material": {
    "recorded-date": "26-06-2025, 19:19:22",
    "recorded-content": {
      "rotate-on-demand-response": {
        "KeyId": "<key-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_key_before_and_after_rotations_on_imported_key": {
    "recorded-date": "01-07-2025, 10:36:09",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_rotate_key_on_demand_raises_error_given_key_is_disabled": {
    "recorded-date": "26-06-2025, 19:19:22",
    "recorded-content": {
      "error-response": {
        "Error": {
          "Code": "DisabledException",
          "Message": "<key-arn> is disabled."
        },
        "message": "<key-arn> is disabled.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_rotate_key_on_demand_raises_error_given_key_that_does_not_exist": {
    "recorded-date": "26-06-2025, 19:19:22",
    "recorded-content": {
      "error-response": {
        "Error": {
          "Code": "NotFoundException",
          "Message": "Key '<key-arn>' does not exist"
        },
        "message": "Key '<key-arn>' does not exist",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_rotate_key_on_demand_raises_error_given_non_symmetric_key": {
    "recorded-date": "26-06-2025, 19:19:22",
    "recorded-content": {
      "error-response": {
        "Error": {
          "Code": "UnsupportedOperationException",
          "Message": ""
        },
        "message": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_verify_salt_length[RSA_2048-RSASSA_PSS_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:08",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_verify_salt_length[RSA_2048-RSASSA_PSS_SHA_384]": {
    "recorded-date": "26-06-2025, 19:19:08",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_verify_salt_length[RSA_2048-RSASSA_PSS_SHA_512]": {
    "recorded-date": "26-06-2025, 19:19:09",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_verify_salt_length[RSA_4096-RSASSA_PKCS1_V1_5_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:10",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_verify_salt_length[RSA_4096-RSASSA_PKCS1_V1_5_SHA_512]": {
    "recorded-date": "26-06-2025, 19:19:12",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_verify_salt_length[ECC_NIST_P256-ECDSA_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:12",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_verify_salt_length[ECC_NIST_P384-ECDSA_SHA_384]": {
    "recorded-date": "26-06-2025, 19:19:12",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_verify_salt_length[ECC_SECG_P256K1-ECDSA_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:12",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_key_rotations_encryption_decryption": {
    "recorded-date": "26-06-2025, 19:19:21",
    "recorded-content": {
      "bad-ciphertext": "An error occurred (InvalidCiphertextException) when calling the Decrypt operation: "
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_key_rotations_limits": {
    "recorded-date": "26-06-2025, 19:19:21",
    "recorded-content": {
      "error-response": {
        "Error": {
          "Code": "LimitExceededException",
          "Message": "The on-demand rotations limit has been reached for the given keyId. No more on-demand rotations can be performed for this key: <key-arn>"
        },
        "message": "The on-demand rotations limit has been reached for the given keyId. No more on-demand rotations can be performed for this key: <key-arn>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMSGenerateKeys::test_generate_data_key_pair_dry_run": {
    "recorded-date": "26-06-2025, 19:19:30",
    "recorded-content": {
      "dryrun_exception": {
        "Error": {
          "Code": "DryRunOperationException",
          "Message": "The request would have succeeded, but the DryRun option is set."
        },
        "message": "The request would have succeeded, but the DryRun option is set.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMSGenerateKeys::test_generate_data_key_pair_without_plaintext_dry_run": {
    "recorded-date": "26-06-2025, 19:19:30",
    "recorded-content": {
      "dryrun_exception": {
        "Error": {
          "Code": "DryRunOperationException",
          "Message": "The request would have succeeded, but the DryRun option is set."
        },
        "message": "The request would have succeeded, but the DryRun option is set.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_re_encrypt[SYMMETRIC_DEFAULT-SYMMETRIC_DEFAULT]": {
    "recorded-date": "26-06-2025, 19:19:13",
    "recorded-content": {
      "test_re_encrypt": {
        "CiphertextBlob": "ciphertext-blob",
        "DestinationEncryptionAlgorithm": "SYMMETRIC_DEFAULT",
        "KeyId": "<key-id:1>",
        "SourceEncryptionAlgorithm": "SYMMETRIC_DEFAULT",
        "SourceKeyId": "<key-arn>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_re_encrypt[RSA_2048-RSAES_OAEP_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:13",
    "recorded-content": {
      "test_re_encrypt": {
        "CiphertextBlob": "ciphertext-blob",
        "DestinationEncryptionAlgorithm": "RSAES_OAEP_SHA_256",
        "KeyId": "<key-id:1>",
        "SourceEncryptionAlgorithm": "RSAES_OAEP_SHA_256",
        "SourceKeyId": "<key-arn>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_re_encrypt_incorrect_source_key": {
    "recorded-date": "26-06-2025, 19:19:13",
    "recorded-content": {
      "incorrect-source-key": {
        "Error": {
          "Code": "IncorrectKeyException",
          "Message": "The key ID in the request does not identify a CMK that can perform this operation."
        },
        "message": "The key ID in the request does not identify a CMK that can perform this operation.",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_key_custom_id": {
    "recorded-date": "26-06-2025, 19:18:55",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_key_custom_key_material_hmac": {
    "recorded-date": "26-06-2025, 19:18:55",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_key_custom_key_material_symmetric_decrypt": {
    "recorded-date": "26-06-2025, 19:18:55",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_custom_key_asymmetric": {
    "recorded-date": "26-06-2025, 19:18:55",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_list_keys": {
    "recorded-date": "26-06-2025, 19:18:56",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_schedule_and_cancel_key_deletion": {
    "recorded-date": "26-06-2025, 19:18:56",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_disable_and_enable_key": {
    "recorded-date": "26-06-2025, 19:18:56",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_grant_with_invalid_key": {
    "recorded-date": "26-06-2025, 19:18:56",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_list_grants_with_invalid_key": {
    "recorded-date": "26-06-2025, 19:18:56",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_grant_with_valid_key": {
    "recorded-date": "26-06-2025, 19:18:56",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_grant_with_same_name_two_keys": {
    "recorded-date": "26-06-2025, 19:18:56",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_revoke_grant": {
    "recorded-date": "26-06-2025, 19:18:56",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_retire_grant_with_grant_token": {
    "recorded-date": "26-06-2025, 19:18:57",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_retire_grant_with_grant_id_and_key_id": {
    "recorded-date": "26-06-2025, 19:18:57",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_list_retirable_grants": {
    "recorded-date": "26-06-2025, 19:18:57",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_invalid_key_usage": {
    "recorded-date": "26-06-2025, 19:19:13",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_encrypt_decrypt[SYMMETRIC_DEFAULT-SYMMETRIC_DEFAULT]": {
    "recorded-date": "26-06-2025, 19:19:13",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_encrypt_decrypt[RSA_2048-RSAES_OAEP_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:13",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_re_encrypt_invalid_destination_key": {
    "recorded-date": "26-06-2025, 19:19:13",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_symmetric_encrypt_offline_decrypt_online[RSA_2048-RSAES_OAEP_SHA_1]": {
    "recorded-date": "26-06-2025, 19:19:13",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_symmetric_encrypt_offline_decrypt_online[RSA_2048-RSAES_OAEP_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:14",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_symmetric_encrypt_offline_decrypt_online[RSA_3072-RSAES_OAEP_SHA_1]": {
    "recorded-date": "26-06-2025, 19:19:14",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_symmetric_encrypt_offline_decrypt_online[RSA_3072-RSAES_OAEP_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:14",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_symmetric_encrypt_offline_decrypt_online[RSA_4096-RSAES_OAEP_SHA_1]": {
    "recorded-date": "26-06-2025, 19:19:15",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_symmetric_encrypt_offline_decrypt_online[RSA_4096-RSAES_OAEP_SHA_256]": {
    "recorded-date": "26-06-2025, 19:19:17",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_get_public_key": {
    "recorded-date": "26-06-2025, 19:19:20",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_describe_and_list_sign_key": {
    "recorded-date": "26-06-2025, 19:19:20",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_list_aliases_of_key": {
    "recorded-date": "26-06-2025, 19:19:21",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_all_types_of_key_id_can_be_used_for_encryption": {
    "recorded-date": "26-06-2025, 19:19:21",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_update_key_description": {
    "recorded-date": "26-06-2025, 19:19:21",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_key_rotation_status": {
    "recorded-date": "26-06-2025, 19:19:21",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_create_list_delete_alias": {
    "recorded-date": "26-06-2025, 19:19:23",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_update_alias": {
    "recorded-date": "26-06-2025, 19:19:23",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_get_put_list_key_policies": {
    "recorded-date": "26-06-2025, 19:19:24",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_cant_use_disabled_or_deleted_keys": {
    "recorded-date": "26-06-2025, 19:19:24",
    "recorded-content": {}
  },
  "tests/aws/services/kms/test_kms.py::TestKMS::test_cant_delete_deleted_key": {
    "recorded-date": "26-06-2025, 19:19:24",
    "recorded-content": {}
  }
}
