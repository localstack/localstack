{
  "tests/aws/services/apigateway/test_apigateway_common.py::TestApiGatewayCommon::test_api_gateway_request_validator": {
    "recorded-date": "27-07-2023, 17:59:26",
    "recorded-content": {
      "register-lambda": {
        "fn_arn": "arn:aws:lambda:<region>:111111111111:function:<fn_name:1>",
        "fn_name": "<fn_name:1>"
      },
      "deploy-1": {
        "createdDate": "datetime",
        "id": "<id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "change-request-path-names": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "POST",
        "methodIntegration": {
          "cacheKeyParameters": [],
          "cacheNamespace": "<cache-namespace:1>",
          "httpMethod": "POST",
          "integrationResponses": {
            "200": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "WHEN_NO_MATCH",
          "timeoutInMillis": 29000,
          "type": "AWS_PROXY",
          "uri": "arn:aws:apigateway:<region>:lambda:path//2015-03-31/functions/arn:aws:lambda:<region>:111111111111:function:<fn_name:1>/invocations"
        },
        "methodResponses": {
          "200": {
            "statusCode": "200"
          }
        },
        "requestParameters": {
          "method.request.path.issuer": true
        },
        "requestValidatorId": "<request-validator-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "missing-required-request-params": {
        "message": "Missing required request parameters: [issuer]"
      },
      "add-schema-GET": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "GET",
        "methodIntegration": {
          "cacheKeyParameters": [],
          "cacheNamespace": "<cache-namespace:1>",
          "httpMethod": "POST",
          "integrationResponses": {
            "200": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "WHEN_NO_MATCH",
          "timeoutInMillis": 29000,
          "type": "AWS_PROXY",
          "uri": "arn:aws:apigateway:<region>:lambda:path//2015-03-31/functions/arn:aws:lambda:<region>:111111111111:function:<fn_name:1>/invocations"
        },
        "methodResponses": {
          "200": {
            "statusCode": "200"
          }
        },
        "requestModels": {
          "application/json": "testSchema"
        },
        "requestParameters": {
          "method.request.path.test": true
        },
        "requestValidatorId": "<request-validator-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "add-schema-POST": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "POST",
        "methodIntegration": {
          "cacheKeyParameters": [],
          "cacheNamespace": "<cache-namespace:1>",
          "httpMethod": "POST",
          "integrationResponses": {
            "200": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "WHEN_NO_MATCH",
          "timeoutInMillis": 29000,
          "type": "AWS_PROXY",
          "uri": "arn:aws:apigateway:<region>:lambda:path//2015-03-31/functions/arn:aws:lambda:<region>:111111111111:function:<fn_name:1>/invocations"
        },
        "methodResponses": {
          "200": {
            "statusCode": "200"
          }
        },
        "requestModels": {
          "application/json": "testSchema"
        },
        "requestParameters": {
          "method.request.path.issuer": true
        },
        "requestValidatorId": "<request-validator-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "revert-request-path-names": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "POST",
        "methodIntegration": {
          "cacheKeyParameters": [],
          "cacheNamespace": "<cache-namespace:1>",
          "httpMethod": "POST",
          "integrationResponses": {
            "200": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "WHEN_NO_MATCH",
          "timeoutInMillis": 29000,
          "type": "AWS_PROXY",
          "uri": "arn:aws:apigateway:<region>:lambda:path//2015-03-31/functions/arn:aws:lambda:<region>:111111111111:function:<fn_name:1>/invocations"
        },
        "methodResponses": {
          "200": {
            "statusCode": "200"
          }
        },
        "requestModels": {
          "application/json": "testSchema"
        },
        "requestParameters": {
          "method.request.path.test": true
        },
        "requestValidatorId": "<request-validator-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "invalid-request-body": {
        "message": "Invalid request body"
      },
      "remove-validator-GET": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "GET",
        "methodIntegration": {
          "cacheKeyParameters": [],
          "cacheNamespace": "<cache-namespace:1>",
          "httpMethod": "POST",
          "integrationResponses": {
            "200": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "WHEN_NO_MATCH",
          "timeoutInMillis": 29000,
          "type": "AWS_PROXY",
          "uri": "arn:aws:apigateway:<region>:lambda:path//2015-03-31/functions/arn:aws:lambda:<region>:111111111111:function:<fn_name:1>/invocations"
        },
        "methodResponses": {
          "200": {
            "statusCode": "200"
          }
        },
        "requestModels": {
          "application/json": "testSchema"
        },
        "requestParameters": {
          "method.request.path.test": true
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "remove-validator-POST": {
        "apiKeyRequired": false,
        "authorizationType": "NONE",
        "httpMethod": "POST",
        "methodIntegration": {
          "cacheKeyParameters": [],
          "cacheNamespace": "<cache-namespace:1>",
          "httpMethod": "POST",
          "integrationResponses": {
            "200": {
              "statusCode": "200"
            }
          },
          "passthroughBehavior": "WHEN_NO_MATCH",
          "timeoutInMillis": 29000,
          "type": "AWS_PROXY",
          "uri": "arn:aws:apigateway:<region>:lambda:path//2015-03-31/functions/arn:aws:lambda:<region>:111111111111:function:<fn_name:1>/invocations"
        },
        "methodResponses": {
          "200": {
            "statusCode": "200"
          }
        },
        "requestModels": {
          "application/json": "testSchema"
        },
        "requestParameters": {
          "method.request.path.test": true
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/apigateway/test_apigateway_common.py::TestUsagePlans::test_api_key_required_for_methods": {
    "recorded-date": "27-07-2023, 17:57:20",
    "recorded-content": {
      "create-usage-plan": {
        "apiStages": [
          {
            "apiId": "<api-id:1>",
            "stage": "dev"
          }
        ],
        "description": "Test Usage Plan for API key",
        "id": "<id:1>",
        "name": "<name:1>",
        "quota": {
          "limit": 10,
          "offset": 0,
          "period": "DAY"
        },
        "tags": {
          "tag_key": "tag_value"
        },
        "throttle": {
          "burstLimit": 1,
          "rateLimit": 2.0
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "create-api-key": {
        "createdDate": "datetime",
        "enabled": true,
        "id": "<id:2>",
        "lastUpdatedDate": "datetime",
        "name": "<name:2>",
        "stageKeys": [],
        "value": "<value:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "create-usage-plan-key": {
        "id": "<id:2>",
        "name": "<name:2>",
        "type": "API_KEY",
        "value": "<value:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "update-api-key-disabled": {
        "createdDate": "datetime",
        "enabled": false,
        "id": "<id:2>",
        "lastUpdatedDate": "datetime",
        "name": "<name:2>",
        "stageKeys": [],
        "tags": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/apigateway/test_apigateway_common.py::TestUsagePlans::test_usage_plan_crud": {
    "recorded-date": "28-07-2023, 08:30:23",
    "recorded-content": {
      "create-usage-plan": {
        "apiStages": [
          {
            "apiId": "<api-id:1>",
            "stage": "dev"
          }
        ],
        "description": "<description:1>",
        "id": "<id:1>",
        "name": "<name:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "get-usage-plan": {
        "apiStages": [
          {
            "apiId": "<api-id:1>",
            "stage": "dev"
          }
        ],
        "description": "<description:1>",
        "id": "<id:1>",
        "name": "<name:1>",
        "tags": {},
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-usage-plans": {
        "items": [
          {
            "apiStages": [
              {
                "apiId": "<api-id:1>",
                "stage": "dev"
              }
            ],
            "description": "<description:1>",
            "id": "<id:1>",
            "name": "<name:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "update-usage-plan": {
        "apiStages": [
          {
            "apiId": "<api-id:1>",
            "stage": "dev"
          }
        ],
        "description": "<description:1>",
        "id": "<id:1>",
        "name": "<name:1>",
        "tags": {},
        "throttle": {
          "burstLimit": 100,
          "rateLimit": 200.0
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/apigateway/test_apigateway_common.py::TestStages::test_create_update_stages": {
    "recorded-date": "01-09-2023, 00:33:13",
    "recorded-content": {
      "create-stage": {
        "cacheClusterEnabled": false,
        "cacheClusterStatus": "NOT_AVAILABLE",
        "createdDate": "datetime",
        "deploymentId": "<deployment-id:1>",
        "description": "my stage",
        "documentationVersion": "v123",
        "lastUpdatedDate": "datetime",
        "methodSettings": {},
        "stageName": "s1",
        "tracingEnabled": false,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "error-update-doc-version": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid method setting path: /documentation_version. Must be one of: [/deploymentId, /description, /cacheClusterEnabled, /cacheClusterSize, /clientCertificateId, /accessLogSettings, /accessLogSettings/destinationArn, /accessLogSettings/format, /{resourcePath}/{httpMethod}/metrics/enabled, /{resourcePath}/{httpMethod}/logging/dataTrace, /{resourcePath}/{httpMethod}/logging/loglevel, /{resourcePath}/{httpMethod}/throttling/burstLimit/{resourcePath}/{httpMethod}/throttling/rateLimit/{resourcePath}/{httpMethod}/caching/ttlInSeconds, /{resourcePath}/{httpMethod}/caching/enabled, /{resourcePath}/{httpMethod}/caching/dataEncrypted, /{resourcePath}/{httpMethod}/caching/requireAuthorizationForCacheControl, /{resourcePath}/{httpMethod}/caching/unauthorizedCacheControlHeaderStrategy, /*/*/metrics/enabled, /*/*/logging/dataTrace, /*/*/logging/loglevel, /*/*/throttling/burstLimit /*/*/throttling/rateLimit /*/*/caching/ttlInSeconds, /*/*/caching/enabled, /*/*/caching/dataEncrypted, /*/*/caching/requireAuthorizationForCacheControl, /*/*/caching/unauthorizedCacheControlHeaderStrategy, /variables/{variable_name}, /tracingEnabled]"
        },
        "message": "Invalid method setting path: /documentation_version. Must be one of: [/deploymentId, /description, /cacheClusterEnabled, /cacheClusterSize, /clientCertificateId, /accessLogSettings, /accessLogSettings/destinationArn, /accessLogSettings/format, /{resourcePath}/{httpMethod}/metrics/enabled, /{resourcePath}/{httpMethod}/logging/dataTrace, /{resourcePath}/{httpMethod}/logging/loglevel, /{resourcePath}/{httpMethod}/throttling/burstLimit/{resourcePath}/{httpMethod}/throttling/rateLimit/{resourcePath}/{httpMethod}/caching/ttlInSeconds, /{resourcePath}/{httpMethod}/caching/enabled, /{resourcePath}/{httpMethod}/caching/dataEncrypted, /{resourcePath}/{httpMethod}/caching/requireAuthorizationForCacheControl, /{resourcePath}/{httpMethod}/caching/unauthorizedCacheControlHeaderStrategy, /*/*/metrics/enabled, /*/*/logging/dataTrace, /*/*/logging/loglevel, /*/*/throttling/burstLimit /*/*/throttling/rateLimit /*/*/caching/ttlInSeconds, /*/*/caching/enabled, /*/*/caching/dataEncrypted, /*/*/caching/requireAuthorizationForCacheControl, /*/*/caching/unauthorizedCacheControlHeaderStrategy, /variables/{variable_name}, /tracingEnabled]",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "error-update-tags": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Invalid method setting path: /tags/tag1. Must be one of: [/deploymentId, /description, /cacheClusterEnabled, /cacheClusterSize, /clientCertificateId, /accessLogSettings, /accessLogSettings/destinationArn, /accessLogSettings/format, /{resourcePath}/{httpMethod}/metrics/enabled, /{resourcePath}/{httpMethod}/logging/dataTrace, /{resourcePath}/{httpMethod}/logging/loglevel, /{resourcePath}/{httpMethod}/throttling/burstLimit/{resourcePath}/{httpMethod}/throttling/rateLimit/{resourcePath}/{httpMethod}/caching/ttlInSeconds, /{resourcePath}/{httpMethod}/caching/enabled, /{resourcePath}/{httpMethod}/caching/dataEncrypted, /{resourcePath}/{httpMethod}/caching/requireAuthorizationForCacheControl, /{resourcePath}/{httpMethod}/caching/unauthorizedCacheControlHeaderStrategy, /*/*/metrics/enabled, /*/*/logging/dataTrace, /*/*/logging/loglevel, /*/*/throttling/burstLimit /*/*/throttling/rateLimit /*/*/caching/ttlInSeconds, /*/*/caching/enabled, /*/*/caching/dataEncrypted, /*/*/caching/requireAuthorizationForCacheControl, /*/*/caching/unauthorizedCacheControlHeaderStrategy, /variables/{variable_name}, /tracingEnabled]"
        },
        "message": "Invalid method setting path: /tags/tag1. Must be one of: [/deploymentId, /description, /cacheClusterEnabled, /cacheClusterSize, /clientCertificateId, /accessLogSettings, /accessLogSettings/destinationArn, /accessLogSettings/format, /{resourcePath}/{httpMethod}/metrics/enabled, /{resourcePath}/{httpMethod}/logging/dataTrace, /{resourcePath}/{httpMethod}/logging/loglevel, /{resourcePath}/{httpMethod}/throttling/burstLimit/{resourcePath}/{httpMethod}/throttling/rateLimit/{resourcePath}/{httpMethod}/caching/ttlInSeconds, /{resourcePath}/{httpMethod}/caching/enabled, /{resourcePath}/{httpMethod}/caching/dataEncrypted, /{resourcePath}/{httpMethod}/caching/requireAuthorizationForCacheControl, /{resourcePath}/{httpMethod}/caching/unauthorizedCacheControlHeaderStrategy, /*/*/metrics/enabled, /*/*/logging/dataTrace, /*/*/logging/loglevel, /*/*/throttling/burstLimit /*/*/throttling/rateLimit /*/*/caching/ttlInSeconds, /*/*/caching/enabled, /*/*/caching/dataEncrypted, /*/*/caching/requireAuthorizationForCacheControl, /*/*/caching/unauthorizedCacheControlHeaderStrategy, /variables/{variable_name}, /tracingEnabled]",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "update-stage": {
        "cacheClusterEnabled": false,
        "cacheClusterStatus": "NOT_AVAILABLE",
        "createdDate": "datetime",
        "deploymentId": "<deployment-id:1>",
        "description": "stage new",
        "documentationVersion": "v123",
        "lastUpdatedDate": "datetime",
        "methodSettings": {
          "*/*": {
            "cacheDataEncrypted": false,
            "cacheTtlInSeconds": 300,
            "cachingEnabled": true,
            "dataTraceEnabled": false,
            "metricsEnabled": false,
            "requireAuthorizationForCacheControl": true,
            "throttlingBurstLimit": 123,
            "throttlingRateLimit": 10000.0,
            "unauthorizedCacheControlHeaderStrategy": "SUCCEED_WITH_RESPONSE_HEADER"
          }
        },
        "stageName": "s1",
        "tracingEnabled": true,
        "variables": {
          "var1": "test",
          "var2": "test2"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-stage": {
        "cacheClusterEnabled": false,
        "cacheClusterStatus": "NOT_AVAILABLE",
        "createdDate": "datetime",
        "deploymentId": "<deployment-id:1>",
        "description": "stage new",
        "documentationVersion": "v123",
        "lastUpdatedDate": "datetime",
        "methodSettings": {
          "*/*": {
            "cacheDataEncrypted": false,
            "cacheTtlInSeconds": 300,
            "cachingEnabled": true,
            "dataTraceEnabled": false,
            "metricsEnabled": false,
            "requireAuthorizationForCacheControl": true,
            "throttlingBurstLimit": 123,
            "throttlingRateLimit": 10000.0,
            "unauthorizedCacheControlHeaderStrategy": "SUCCEED_WITH_RESPONSE_HEADER"
          }
        },
        "stageName": "s1",
        "tracingEnabled": true,
        "variables": {
          "var1": "test",
          "var2": "test2"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/apigateway/test_apigateway_common.py::TestDocumentations::test_documentation_parts_and_versions": {
    "recorded-date": "07-08-2023, 22:02:13",
    "recorded-content": {
      "create-part-response": {
        "id": "<id:1>",
        "location": {
          "type": "API"
        },
        "properties": {
          "foo": "bar"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "get-parts-response": {
        "items": [
          {
            "id": "<id:1>",
            "location": {
              "type": "API"
            },
            "properties": {
              "foo": "bar"
            }
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "create-version-response": {
        "createdDate": "datetime",
        "version": "v123",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 201
        }
      },
      "update-version-response": {
        "createdDate": "datetime",
        "description": "doc version new",
        "version": "v123",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-version-response": {
        "createdDate": "datetime",
        "description": "doc version new",
        "version": "v123",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/apigateway/test_apigateway_common.py::TestDeployments::test_create_delete_deployments[True]": {
    "recorded-date": "07-09-2023, 19:27:48",
    "recorded-content": {
      "get-deployment": {
        "createdDate": "datetime",
        "id": "<deployment-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-stages": {
        "item": [
          {
            "cacheClusterEnabled": false,
            "cacheClusterStatus": "NOT_AVAILABLE",
            "createdDate": "datetime",
            "deploymentId": "<deployment-id:1>",
            "lastUpdatedDate": "datetime",
            "methodSettings": {},
            "stageName": "s1",
            "tracingEnabled": false
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-deployment-error-0": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Active stages pointing to this deployment must be moved or deleted"
        },
        "message": "Active stages pointing to this deployment must be moved or deleted",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-deployments-0": {
        "items": [
          {
            "createdDate": "datetime",
            "id": "<id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-stages-0": {
        "item": [
          {
            "cacheClusterEnabled": false,
            "cacheClusterStatus": "NOT_AVAILABLE",
            "createdDate": "datetime",
            "deploymentId": "<id:1>",
            "lastUpdatedDate": "datetime",
            "methodSettings": {},
            "stageName": "s1",
            "tracingEnabled": false
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-deployment-error-1": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Active stages pointing to this deployment must be moved or deleted"
        },
        "message": "Active stages pointing to this deployment must be moved or deleted",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-deployments-1": {
        "items": [
          {
            "createdDate": "datetime",
            "id": "<id:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-stages-1": {
        "item": [
          {
            "cacheClusterEnabled": false,
            "cacheClusterStatus": "NOT_AVAILABLE",
            "createdDate": "datetime",
            "deploymentId": "<id:2>",
            "lastUpdatedDate": "datetime",
            "methodSettings": {},
            "stageName": "s1",
            "tracingEnabled": false
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-deployment-error-2": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Active stages pointing to this deployment must be moved or deleted"
        },
        "message": "Active stages pointing to this deployment must be moved or deleted",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-deployments-2": {
        "items": [
          {
            "createdDate": "datetime",
            "id": "<id:3>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-stages-2": {
        "item": [
          {
            "cacheClusterEnabled": false,
            "cacheClusterStatus": "NOT_AVAILABLE",
            "createdDate": "datetime",
            "deploymentId": "<id:3>",
            "lastUpdatedDate": "datetime",
            "methodSettings": {},
            "stageName": "s1",
            "tracingEnabled": false
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/services/apigateway/test_apigateway_common.py::TestDeployments::test_create_delete_deployments[False]": {
    "recorded-date": "07-09-2023, 19:20:47",
    "recorded-content": {
      "get-deployment": {
        "createdDate": "datetime",
        "id": "<deployment-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-stages": {
        "item": [
          {
            "cacheClusterEnabled": false,
            "cacheClusterStatus": "NOT_AVAILABLE",
            "createdDate": "datetime",
            "deploymentId": "<deployment-id:1>",
            "lastUpdatedDate": "datetime",
            "methodSettings": {},
            "stageName": "s1",
            "tracingEnabled": false
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-deployment-error-0": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Active stages pointing to this deployment must be moved or deleted"
        },
        "message": "Active stages pointing to this deployment must be moved or deleted",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-deployments-0": {
        "items": [
          {
            "createdDate": "datetime",
            "id": "<id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-stages-0": {
        "item": [
          {
            "cacheClusterEnabled": false,
            "cacheClusterStatus": "NOT_AVAILABLE",
            "createdDate": "datetime",
            "deploymentId": "<id:1>",
            "lastUpdatedDate": "datetime",
            "methodSettings": {},
            "stageName": "s1",
            "tracingEnabled": false
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-deployment-error-1": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Active stages pointing to this deployment must be moved or deleted"
        },
        "message": "Active stages pointing to this deployment must be moved or deleted",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-deployments-1": {
        "items": [
          {
            "createdDate": "datetime",
            "id": "<id:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-stages-1": {
        "item": [
          {
            "cacheClusterEnabled": false,
            "cacheClusterStatus": "NOT_AVAILABLE",
            "createdDate": "datetime",
            "deploymentId": "<id:2>",
            "lastUpdatedDate": "datetime",
            "methodSettings": {},
            "stageName": "s1",
            "tracingEnabled": false
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-deployment-error-2": {
        "Error": {
          "Code": "BadRequestException",
          "Message": "Active stages pointing to this deployment must be moved or deleted"
        },
        "message": "Active stages pointing to this deployment must be moved or deleted",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-deployments-2": {
        "items": [
          {
            "createdDate": "datetime",
            "id": "<id:3>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-stages-2": {
        "item": [
          {
            "cacheClusterEnabled": false,
            "cacheClusterStatus": "NOT_AVAILABLE",
            "createdDate": "datetime",
            "deploymentId": "<id:3>",
            "lastUpdatedDate": "datetime",
            "methodSettings": {},
            "stageName": "s1",
            "tracingEnabled": false
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  }
}
