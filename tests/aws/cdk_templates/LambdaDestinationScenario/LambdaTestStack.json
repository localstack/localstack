{
  "Resources": {
    "CollectFnServiceRoleF762C82B": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "CollectFn65CC4EC9": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\nimport json\n\ndef handler(event, context):\n    print(json.dumps(event))\n    return {\"hello\": \"world\"}  # the return value here doesn't really matter\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "CollectFnServiceRoleF762C82B",
            "Arn"
          ]
        },
        "Runtime": "python3.10"
      },
      "DependsOn": [
        "CollectFnServiceRoleF762C82B"
      ]
    },
    "CollectFnInvokePAhlyjIG3CP8l8Cgnn54SqfC1My75Eml5oYjNQSJnA1560504D": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "CollectFn65CC4EC9",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com"
      }
    },
    "CollectFnAllowInvokeLambdaTestStackDestinationTopicE64F5D1B3DE13B23": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "CollectFn65CC4EC9",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "DestinationTopicBA438545"
        }
      }
    },
    "CollectFnDestinationTopicE5523079": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "CollectFn65CC4EC9",
            "Arn"
          ]
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "DestinationTopicBA438545"
        }
      }
    },
    "DestinationTopicBA438545": {
      "Type": "AWS::SNS::Topic"
    },
    "DestinationFnServiceRole45C6FEAB": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "DestinationFnServiceRoleDefaultPolicy2D36D4CF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "DestinationTopicBA438545"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "DestinationFnServiceRoleDefaultPolicy2D36D4CF",
        "Roles": [
          {
            "Ref": "DestinationFnServiceRole45C6FEAB"
          }
        ]
      }
    },
    "DestinationFn4A629F49": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "\ndef handler(event, context):\n    should_fail = event.get(\"should_fail\", \"0\") == \"1\"\n    message = event.get(\"message\", \"no message received\")\n\n    if should_fail:\n        raise Exception(\"Failing per design.\")\n\n    return {\"lstest_message\": message}\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "DestinationFnServiceRole45C6FEAB",
            "Arn"
          ]
        },
        "Runtime": "python3.10"
      },
      "DependsOn": [
        "DestinationFnServiceRoleDefaultPolicy2D36D4CF",
        "DestinationFnServiceRole45C6FEAB"
      ]
    },
    "TopicEicA2461C61": {
      "Type": "AWS::Lambda::EventInvokeConfig",
      "Properties": {
        "DestinationConfig": {
          "OnFailure": {
            "Destination": {
              "Ref": "DestinationTopicBA438545"
            }
          },
          "OnSuccess": {
            "Destination": {
              "Ref": "DestinationTopicBA438545"
            }
          }
        },
        "FunctionName": {
          "Ref": "DestinationFn4A629F49"
        },
        "MaximumEventAgeInSeconds": 60,
        "MaximumRetryAttempts": 0,
        "Qualifier": "$LATEST"
      }
    }
  },
  "Outputs": {
    "CollectFunctionName": {
      "Value": {
        "Ref": "CollectFn65CC4EC9"
      }
    },
    "DestinationTopicName": {
      "Value": {
        "Fn::GetAtt": [
          "DestinationTopicBA438545",
          "TopicName"
        ]
      }
    },
    "DestinationTopicArn": {
      "Value": {
        "Ref": "DestinationTopicBA438545"
      }
    },
    "DestinationFunctionName": {
      "Value": {
        "Ref": "DestinationFn4A629F49"
      }
    }
  }
}
