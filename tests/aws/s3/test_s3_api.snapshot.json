{
  "tests/aws/s3/test_s3_api.py::TestS3ObjectCRUD::test_delete_object_versioned": {
    "recorded-date": "01-08-2023, 22:17:12",
    "recorded-content": {
      "put-object": {
        "ETag": "\"a9a43d6b467d3dc6514412c3a4987415\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-object": {
        "DeleteMarker": true,
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "get-deleted-object": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "test-delete",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "get-object-with-version": {
        "AcceptRanges": "bytes",
        "Body": "test-delete",
        "ContentLength": 11,
        "ContentType": "binary/octet-stream",
        "ETag": "\"a9a43d6b467d3dc6514412c3a4987415\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-delete-marker": {
        "Error": {
          "Code": "MethodNotAllowed",
          "Message": "The specified method is not allowed against this resource.",
          "Method": "GET",
          "ResourceType": "DeleteMarker"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 405
        }
      },
      "delete-object-2": {
        "DeleteMarker": true,
        "VersionId": "<version-id:3>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "list-object-versions": {
        "DeleteMarkers": [
          {
            "IsLatest": true,
            "Key": "test-delete",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "VersionId": "<version-id:3>"
          },
          {
            "IsLatest": false,
            "Key": "test-delete",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "VersionId": "<version-id:2>"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "test-delete",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"a9a43d6b467d3dc6514412c3a4987415\"",
            "IsLatest": false,
            "Key": "test-delete",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 11,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-delete-marker": {
        "DeleteMarker": true,
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "delete-object-version": {
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "get-deleted-object-with-version": {
        "Error": {
          "Code": "NoSuchVersion",
          "Key": "test-delete",
          "Message": "The specified version does not exist.",
          "VersionId": "<version-id:1>"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "delete-with-bad-version": {
        "Error": {
          "ArgumentName": "versionId",
          "ArgumentValue": "<argument-value:1>",
          "Code": "InvalidArgument",
          "Message": "Invalid version id specified"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "delete-wrong-key": {
        "DeleteMarker": true,
        "VersionId": "<version-id:4>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      }
    }
  },
  "tests/aws/s3/test_s3_api.py::TestS3ObjectCRUD::test_delete_object": {
    "recorded-date": "27-07-2023, 01:10:35",
    "recorded-content": {
      "put-object": {
        "ETag": "\"a9a43d6b467d3dc6514412c3a4987415\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-object": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "delete-nonexistent-object": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "delete-nonexistent-object-versionid": {
        "Error": {
          "ArgumentName": "versionId",
          "ArgumentValue": "HPniJFCxqTsMuIH9KX8K8wEjNUgmABCD",
          "Code": "InvalidArgument",
          "Message": "Invalid version id specified"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/aws/s3/test_s3_api.py::TestS3BucketCRUD::test_delete_versioned_bucket_with_objects": {
    "recorded-date": "01-08-2023, 16:54:38",
    "recorded-content": {
      "delete-with-obj-and-delete-marker": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "BucketNotEmpty",
          "Message": "The bucket you tried to delete is not empty. You must delete all versions in the bucket."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      },
      "delete-obj-by-version": {
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "delete-with-only-delete-marker": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "BucketNotEmpty",
          "Message": "The bucket you tried to delete is not empty. You must delete all versions in the bucket."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      },
      "delete-marker-by-version": {
        "DeleteMarker": true,
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "success-delete-bucket": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      }
    }
  },
  "tests/aws/s3/test_s3_api.py::TestS3ObjectCRUD::test_get_object_with_version_unversioned_bucket": {
    "recorded-date": "27-07-2023, 00:53:12",
    "recorded-content": {
      "put-object": {
        "ETag": "\"a8b14b49cca6ee9a2dc6e28f87cc542c\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-with-version": {
        "Error": {
          "ArgumentName": "versionId",
          "ArgumentValue": "HPniJFCxqTsMuIH9KX8K8wEjNUgmABCD",
          "Code": "InvalidArgument",
          "Message": "Invalid version id specified"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "get-obj-with-null-version": {
        "AcceptRanges": "bytes",
        "Body": "test-version",
        "ContentLength": 12,
        "ContentType": "binary/octet-stream",
        "ETag": "\"a8b14b49cca6ee9a2dc6e28f87cc542c\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/s3/test_s3_api.py::TestS3ObjectCRUD::test_list_object_versions_order_unversioned": {
    "recorded-date": "26-07-2023, 21:32:00",
    "recorded-content": {
      "list-empty": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object": {
        "ETag": "\"1b5c4d94104ea274dc3a49a55179de86\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-3": {
        "ETag": "\"2532913c38a0c3046be3dc4e434df6e6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-2": {
        "ETag": "\"2f3c2d190be43f3f6cd1c26ce4c59ae6\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-object-versions": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"1b5c4d94104ea274dc3a49a55179de86\"",
            "IsLatest": true,
            "Key": "a-test-object-1",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 13,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          },
          {
            "ETag": "\"2f3c2d190be43f3f6cd1c26ce4c59ae6\"",
            "IsLatest": true,
            "Key": "b-test-object-2",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 13,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          },
          {
            "ETag": "\"2532913c38a0c3046be3dc4e434df6e6\"",
            "IsLatest": true,
            "Key": "c-test-object-3",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 13,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/s3/test_s3_api.py::TestS3BucketCRUD::test_delete_bucket_with_objects": {
    "recorded-date": "27-07-2023, 00:25:16",
    "recorded-content": {
      "delete-with-obj": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "BucketNotEmpty",
          "Message": "The bucket you tried to delete is not empty"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 409
        }
      },
      "delete-obj": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "delete-bucket": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      }
    }
  },
  "tests/aws/s3/test_s3_api.py::TestS3ObjectCRUD::test_delete_objects": {
    "recorded-date": "27-07-2023, 02:01:09",
    "recorded-content": {
      "put-object": {
        "ETag": "\"a9a43d6b467d3dc6514412c3a4987415\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-object-wrong-version-id": {
        "Errors": [
          {
            "Code": "NoSuchVersion",
            "Key": "test-delete",
            "Message": "The specified version does not exist.",
            "VersionId": "HPniJFCxqTsMuIH9KX8K8wEjNUgmABCD"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-objects": {
        "Deleted": [
          {
            "Key": "a-wrong-key"
          },
          {
            "Key": "c-wrong-key"
          },
          {
            "Key": "test-delete"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/s3/test_s3_api.py::TestS3ObjectCRUD::test_delete_objects_versioned": {
    "recorded-date": "01-08-2023, 22:22:24",
    "recorded-content": {
      "put-object": {
        "ETag": "\"a9a43d6b467d3dc6514412c3a4987415\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-objects-no-version-id": {
        "Deleted": [
          {
            "DeleteMarker": true,
            "DeleteMarkerVersionId": "<version-id:2>",
            "Key": "test-delete"
          },
          {
            "DeleteMarker": true,
            "DeleteMarkerVersionId": "<delete-marker-version-id:1>",
            "Key": "wrongkey"
          },
          {
            "DeleteMarker": true,
            "DeleteMarkerVersionId": "<delete-marker-version-id:2>",
            "Key": "wrongkey-x"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-objects-marker": {
        "Deleted": [
          {
            "DeleteMarker": true,
            "DeleteMarkerVersionId": "<version-id:2>",
            "Key": "test-delete",
            "VersionId": "<version-id:2>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-objects-wrong-version-id": {
        "Errors": [
          {
            "Code": "NoSuchVersion",
            "Key": "test-delete",
            "Message": "The specified version does not exist.",
            "VersionId": "<version-id:3>"
          },
          {
            "Code": "NoSuchVersion",
            "Key": "wrong-key-2",
            "Message": "The specified version does not exist.",
            "VersionId": "<version-id:3>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-objects-version-id": {
        "Deleted": [
          {
            "Key": "test-delete",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/s3/test_s3_api.py::TestS3BucketVersioning::test_bucket_versioning_crud": {
    "recorded-date": "01-08-2023, 16:50:36",
    "recorded-content": {
      "get-versioning-before": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-versioning-suspended-before": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-versioning-after-suspended": {
        "Status": "Suspended",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-versioning-enabled-lowercase": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-versioning-enabled-capitalized": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-versioning-after-enabled": {
        "Status": "Enabled",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-versioning-suspended-after": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-versioning-empty": {
        "Error": {
          "Code": "IllegalVersioningConfigurationException",
          "Message": "The Versioning element must be specified"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-versioning-no-bucket": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "get-versioning-no-bucket": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/aws/s3/test_s3_api.py::TestS3ObjectCRUD::test_put_object_on_suspended_bucket": {
    "recorded-date": "01-08-2023, 22:59:19",
    "recorded-content": {
      "put-object-0": {
        "ETag": "\"b8cb478d2b9408033ceb93aa90386661\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-1": {
        "ETag": "\"066f1ebd4608b82ed545041ff2254d36\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-2": {
        "ETag": "\"0aafaa2dd225df253328c024ceb9efc1\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:3>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-enabled": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"0aafaa2dd225df253328c024ceb9efc1\"",
            "IsLatest": true,
            "Key": "test-version",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          },
          {
            "ETag": "\"066f1ebd4608b82ed545041ff2254d36\"",
            "IsLatest": false,
            "Key": "test-version",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          },
          {
            "ETag": "\"b8cb478d2b9408033ceb93aa90386661\"",
            "IsLatest": false,
            "Key": "test-version",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-suspended": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"0aafaa2dd225df253328c024ceb9efc1\"",
            "IsLatest": true,
            "Key": "test-version",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          },
          {
            "ETag": "\"066f1ebd4608b82ed545041ff2254d36\"",
            "IsLatest": false,
            "Key": "test-version",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          },
          {
            "ETag": "\"b8cb478d2b9408033ceb93aa90386661\"",
            "IsLatest": false,
            "Key": "test-version",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-suspended": {
        "ETag": "\"bb7af07292c35f415ac7da933eb5c927\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-suspended-after-put": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"bb7af07292c35f415ac7da933eb5c927\"",
            "IsLatest": true,
            "Key": "test-version",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 22,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:4>"
          },
          {
            "ETag": "\"0aafaa2dd225df253328c024ceb9efc1\"",
            "IsLatest": false,
            "Key": "test-version",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          },
          {
            "ETag": "\"066f1ebd4608b82ed545041ff2254d36\"",
            "IsLatest": false,
            "Key": "test-version",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          },
          {
            "ETag": "\"b8cb478d2b9408033ceb93aa90386661\"",
            "IsLatest": false,
            "Key": "test-version",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-suspended-overwrite": {
        "ETag": "\"bb7af07292c35f415ac7da933eb5c927\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-suspended-after-overwrite": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"bb7af07292c35f415ac7da933eb5c927\"",
            "IsLatest": true,
            "Key": "test-version",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 22,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:4>"
          },
          {
            "ETag": "\"0aafaa2dd225df253328c024ceb9efc1\"",
            "IsLatest": false,
            "Key": "test-version",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          },
          {
            "ETag": "\"066f1ebd4608b82ed545041ff2254d36\"",
            "IsLatest": false,
            "Key": "test-version",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          },
          {
            "ETag": "\"b8cb478d2b9408033ceb93aa90386661\"",
            "IsLatest": false,
            "Key": "test-version",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-current": {
        "AcceptRanges": "bytes",
        "Body": "test-version-suspended",
        "ContentLength": 22,
        "ContentType": "binary/octet-stream",
        "ETag": "\"bb7af07292c35f415ac7da933eb5c927\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:4>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/aws/s3/test_s3_api.py::TestS3ObjectCRUD::test_delete_object_on_suspended_bucket": {
    "recorded-date": "01-08-2023, 23:07:50",
    "recorded-content": {
      "put-object-0": {
        "ETag": "\"b8cb478d2b9408033ceb93aa90386661\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-1": {
        "ETag": "\"066f1ebd4608b82ed545041ff2254d36\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-suspended": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"066f1ebd4608b82ed545041ff2254d36\"",
            "IsLatest": true,
            "Key": "test-delete-suspended",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          },
          {
            "ETag": "\"b8cb478d2b9408033ceb93aa90386661\"",
            "IsLatest": false,
            "Key": "test-delete-suspended",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-object-no-version": {
        "DeleteMarker": true,
        "VersionId": "<version-id:3>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "list-suspended-delete": {
        "DeleteMarkers": [
          {
            "IsLatest": true,
            "Key": "test-delete-suspended",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "VersionId": "<version-id:3>"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"066f1ebd4608b82ed545041ff2254d36\"",
            "IsLatest": false,
            "Key": "test-delete-suspended",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          },
          {
            "ETag": "\"b8cb478d2b9408033ceb93aa90386661\"",
            "IsLatest": false,
            "Key": "test-delete-suspended",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-suspended": {
        "ETag": "\"195a8078a76b2922899312bf556585e1\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "list-suspended-put": {
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"195a8078a76b2922899312bf556585e1\"",
            "IsLatest": true,
            "Key": "test-delete-suspended",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 35,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:3>"
          },
          {
            "ETag": "\"066f1ebd4608b82ed545041ff2254d36\"",
            "IsLatest": false,
            "Key": "test-delete-suspended",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          },
          {
            "ETag": "\"b8cb478d2b9408033ceb93aa90386661\"",
            "IsLatest": false,
            "Key": "test-delete-suspended",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-object-no-version-after-put": {
        "DeleteMarker": true,
        "VersionId": "<version-id:3>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "list-suspended-after-put": {
        "DeleteMarkers": [
          {
            "IsLatest": true,
            "Key": "test-delete-suspended",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "VersionId": "<version-id:3>"
          }
        ],
        "EncodingType": "url",
        "IsTruncated": false,
        "KeyMarker": "",
        "MaxKeys": 1000,
        "Name": "<bucket-name:1>",
        "Prefix": "",
        "VersionIdMarker": "",
        "Versions": [
          {
            "ETag": "\"066f1ebd4608b82ed545041ff2254d36\"",
            "IsLatest": false,
            "Key": "test-delete-suspended",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:2>"
          },
          {
            "ETag": "\"b8cb478d2b9408033ceb93aa90386661\"",
            "IsLatest": false,
            "Key": "test-delete-suspended",
            "LastModified": "datetime",
            "Owner": {
              "DisplayName": "<display-name>",
              "ID": "<owner-id>"
            },
            "Size": 14,
            "StorageClass": "STANDARD",
            "VersionId": "<version-id:1>"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3_api.py::TestS3BucketEncryption::test_s3_default_bucket_encryption": {
    "recorded-date": "02-08-2023, 00:10:29",
    "recorded-content": {
      "default-bucket-encryption": {
        "ServerSideEncryptionConfiguration": {
          "Rules": [
            {
              "ApplyServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              },
              "BucketKeyEnabled": false
            }
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-bucket-encryption": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "delete-bucket-encryption-idempotent": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "get-bucket-no-encryption": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3_api.py::TestS3BucketEncryption::test_s3_default_bucket_encryption_exc": {
    "recorded-date": "02-08-2023, 00:12:29",
    "recorded-content": {
      "get-bucket-enc-no-bucket": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "delete-bucket-enc-no-bucket": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put-bucket-enc-no-bucket": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put-bucket-encryption-no-rules": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-encryption-two-rules": {
        "Error": {
          "Code": "MalformedXML",
          "Message": "The XML you provided was not well-formed or did not validate against our published schema"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-encryption-kms-with-aes": {
        "Error": {
          "ArgumentName": "ApplyServerSideEncryptionByDefault",
          "Code": "InvalidArgument",
          "Message": "a KMSMasterKeyID is not applicable if the default sse algorithm is not aws:kms"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/s3/test_s3_api.py::TestS3BucketEncryption::test_s3_bucket_encryption_sse_s3": {
    "recorded-date": "02-08-2023, 01:37:10",
    "recorded-content": {
      "put-bucket-enc": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-encrypted": {
        "ETag": "\"16b66fb6b9c0e864b0291fa0dbb5a946\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-encrypted": {
        "AcceptRanges": "bytes",
        "ContentLength": 14,
        "ContentType": "binary/octet-stream",
        "ETag": "\"16b66fb6b9c0e864b0291fa0dbb5a946\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-encrypted": {
        "AcceptRanges": "bytes",
        "Body": "test-encrypted",
        "ContentLength": 14,
        "ContentType": "binary/octet-stream",
        "ETag": "\"16b66fb6b9c0e864b0291fa0dbb5a946\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3_api.py::TestS3BucketEncryption::test_s3_bucket_encryption_sse_kms_aws_managed_key": {
    "recorded-date": "02-08-2023, 01:48:16",
    "recorded-content": {
      "put-bucket-enc": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-enc": {
        "ServerSideEncryptionConfiguration": {
          "Rules": [
            {
              "ApplyServerSideEncryptionByDefault": {
                "SSEAlgorithm": "aws:kms"
              },
              "BucketKeyEnabled": true
            }
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-encrypted": {
        "BucketKeyEnabled": true,
        "ETag": "\"dc1b467a7cb371279306a6f710c7ad2d\"",
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<uuid:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "managed-kms-key": {
        "KeyMetadata": {
          "AWSAccountId": "111111111111",
          "Arn": "arn:aws:kms:<region>:111111111111:key/<uuid:1>",
          "CreationDate": "datetime",
          "CustomerMasterKeySpec": "SYMMETRIC_DEFAULT",
          "Description": "Default key that protects my S3 objects when no other key is defined",
          "Enabled": true,
          "EncryptionAlgorithms": [
            "SYMMETRIC_DEFAULT"
          ],
          "KeyId": "<uuid:1>",
          "KeyManager": "AWS",
          "KeySpec": "SYMMETRIC_DEFAULT",
          "KeyState": "Enabled",
          "KeyUsage": "ENCRYPT_DECRYPT",
          "MultiRegion": false,
          "Origin": "AWS_KMS"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-encrypted": {
        "AcceptRanges": "bytes",
        "BucketKeyEnabled": true,
        "ContentLength": 14,
        "ContentType": "binary/octet-stream",
        "ETag": "\"dc1b467a7cb371279306a6f710c7ad2d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<uuid:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-encrypted": {
        "AcceptRanges": "bytes",
        "Body": "test-encrypted",
        "BucketKeyEnabled": true,
        "ContentLength": 14,
        "ContentType": "binary/octet-stream",
        "ETag": "\"dc1b467a7cb371279306a6f710c7ad2d\"",
        "LastModified": "datetime",
        "Metadata": {},
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<uuid:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3_api.py::TestS3BucketEncryption::test_s3_bucket_encryption_sse_kms": {
    "recorded-date": "02-08-2023, 02:06:21",
    "recorded-content": {
      "put-bucket-enc": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-bucket-enc": {
        "ServerSideEncryptionConfiguration": {
          "Rules": [
            {
              "ApplyServerSideEncryptionByDefault": {
                "KMSMasterKeyID": "<uuid:1>",
                "SSEAlgorithm": "aws:kms"
              },
              "BucketKeyEnabled": true
            }
          ]
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-encrypted": {
        "BucketKeyEnabled": true,
        "ETag": "\"31f9fc96ed971f30ac05dd6eb7b6c2cc\"",
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<uuid:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-object-encrypted": {
        "AcceptRanges": "bytes",
        "BucketKeyEnabled": true,
        "ContentLength": 14,
        "ContentType": "binary/octet-stream",
        "ETag": "\"31f9fc96ed971f30ac05dd6eb7b6c2cc\"",
        "LastModified": "datetime",
        "Metadata": {},
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<uuid:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-encrypted": {
        "AcceptRanges": "bytes",
        "Body": "test-encrypted",
        "BucketKeyEnabled": true,
        "ContentLength": 14,
        "ContentType": "binary/octet-stream",
        "ETag": "\"31f9fc96ed971f30ac05dd6eb7b6c2cc\"",
        "LastModified": "datetime",
        "Metadata": {},
        "SSEKMSKeyId": "arn:aws:kms:<region>:111111111111:key/<uuid:1>",
        "ServerSideEncryption": "aws:kms",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3_api.py::TestS3BucketObjectTagging::test_bucket_tagging_crud": {
    "recorded-date": "02-08-2023, 22:18:20",
    "recorded-content": {
      "get-bucket-tags-empty": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchTagSet",
          "Message": "The TagSet does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put-bucket-tags": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "get-bucket-tags": {
        "TagSet": [
          {
            "Key": "tag1",
            "Value": "tag1"
          },
          {
            "Key": "tag2",
            "Value": ""
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-bucket-tags-overwrite": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "get-bucket-tags-overwritten": {
        "TagSet": [
          {
            "Key": "tag3",
            "Value": "tag3"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-bucket-tags": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "put-bucket-tags-empty": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      }
    }
  },
  "tests/integration/s3/test_s3_api.py::TestS3BucketObjectTagging::test_object_tagging_crud": {
    "recorded-date": "02-08-2023, 23:23:45",
    "recorded-content": {
      "put-object": {
        "ETag": "\"b635a7fc30aa9091e0d236bee77e6844\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-tags-empty": {
        "TagSet": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-tags": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-tags": {
        "TagSet": [
          {
            "Key": "tag1",
            "Value": "tag1"
          },
          {
            "Key": "tag2",
            "Value": ""
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-tags-overwrite": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-tags-overwritten": {
        "TagSet": [
          {
            "Key": "tag3",
            "Value": "tag3"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-after-tags": {
        "AcceptRanges": "bytes",
        "Body": "test-tagging",
        "ContentLength": 12,
        "ContentType": "binary/octet-stream",
        "ETag": "\"b635a7fc30aa9091e0d236bee77e6844\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "TagCount": 1,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "delete-object-tags": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "get-object-tags-deleted": {
        "TagSet": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj-after-tags-deleted": {
        "AcceptRanges": "bytes",
        "Body": "test-tagging",
        "ContentLength": 12,
        "ContentType": "binary/octet-stream",
        "ETag": "\"b635a7fc30aa9091e0d236bee77e6844\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3_api.py::TestS3BucketObjectTagging::test_put_object_with_tags": {
    "recorded-date": "03-08-2023, 01:21:13",
    "recorded-content": {
      "put-object": {
        "ETag": "\"b635a7fc30aa9091e0d236bee77e6844\"",
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-tags": {
        "TagSet": [
          {
            "Key": "tag",
            "Value": ""
          },
          {
            "Key": "tag1",
            "Value": "tag1"
          },
          {
            "Key": "tag2",
            "Value": "tag2"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-tags": {
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-tags-override": {
        "TagSet": [
          {
            "Key": "tag3",
            "Value": "tag3"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "head-obj": {
        "AcceptRanges": "bytes",
        "ContentLength": 12,
        "ContentType": "binary/octet-stream",
        "ETag": "\"b635a7fc30aa9091e0d236bee77e6844\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-obj": {
        "AcceptRanges": "bytes",
        "Body": "test-tagging",
        "ContentLength": 12,
        "ContentType": "binary/octet-stream",
        "ETag": "\"b635a7fc30aa9091e0d236bee77e6844\"",
        "LastModified": "datetime",
        "Metadata": {},
        "ServerSideEncryption": "AES256",
        "TagCount": 1,
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-tags-wrong-format-qs": {
        "TagSet": [
          {
            "Key": "wrongagain",
            "Value": ""
          },
          {
            "Key": "wrongquery",
            "Value": ""
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-tags-wrong-format-qs-2": {
        "TagSet": [
          {
            "Key": "key1",
            "Value": ""
          },
          {
            "Key": "key2",
            "Value": ""
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3_api.py::TestS3BucketObjectTagging::test_bucket_tagging_exc": {
    "recorded-date": "02-08-2023, 22:32:41",
    "recorded-content": {
      "get-no-bucket-tags": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "delete-no-bucket-tags": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put-no-bucket-tags": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      }
    }
  },
  "tests/integration/s3/test_s3_api.py::TestS3BucketObjectTagging::test_object_tagging_versioned": {
    "recorded-date": "02-08-2023, 23:14:16",
    "recorded-content": {
      "put-obj-0": {
        "ETag": "\"86639701cdcc5b39438a5f009bd74cb1\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-obj-1": {
        "ETag": "\"70a37754eb5a2e7db8cd887aaf11cda7\"",
        "ServerSideEncryption": "AES256",
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-tags-current-version": {
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-tags-current-version": {
        "TagSet": [
          {
            "Key": "tag3",
            "Value": "tag3"
          }
        ],
        "VersionId": "<version-id:2>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-object-tags-previous-version": {
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-tags-previous-version": {
        "TagSet": [
          {
            "Key": "tag1",
            "Value": "tag1"
          }
        ],
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "put-delete-marker": {
        "DeleteMarker": true,
        "VersionId": "<version-id:3>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 204
        }
      },
      "put-object-tags-delete-marker": {
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-tags-delete-marker": {
        "TagSet": [
          {
            "Key": "tag1",
            "Value": "tag1"
          }
        ],
        "VersionId": "<version-id:1>",
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3_api.py::TestS3BucketObjectTagging::test_object_tagging_exc": {
    "recorded-date": "03-08-2023, 00:04:47",
    "recorded-content": {
      "get-no-bucket-tags": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "delete-no-bucket-tags": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put-no-bucket-tags": {
        "Error": {
          "BucketName": "<bucket-name:1>",
          "Code": "NoSuchBucket",
          "Message": "The specified bucket does not exist"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "get-no-key-tags": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "<bucket:1>/fake-key",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "delete-no-key-tags": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "fake-key",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put-no-key-tags": {
        "Error": {
          "Code": "NoSuchKey",
          "Key": "fake-key",
          "Message": "The specified key does not exist."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 404
        }
      },
      "put-obj-duplicate-tagging": {
        "Error": {
          "ArgumentName": "x-amz-tagging",
          "ArgumentValue": "key1=val1&key1=val2",
          "Code": "InvalidArgument",
          "Message": "The header 'x-amz-tagging' shall be encoded as UTF-8 then URLEncoded URL query parameters without tag name duplicates."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-obj-wrong-format": {
        "Error": {
          "ArgumentName": "x-amz-tagging",
          "ArgumentValue": "key1=val1,key2=val2",
          "Code": "InvalidArgument",
          "Message": "The header 'x-amz-tagging' shall be encoded as UTF-8 then URLEncoded URL query parameters without tag name duplicates."
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  },
  "tests/integration/s3/test_s3_api.py::TestS3BucketObjectTagging::test_object_tags_delete_or_overwrite_object": {
    "recorded-date": "02-08-2023, 23:52:10",
    "recorded-content": {
      "get-object-after-creation": {
        "TagSet": [
          {
            "Key": "tag1",
            "Value": "val1"
          }
        ],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-after-overwrite": {
        "TagSet": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      },
      "get-object-after-recreation": {
        "TagSet": [],
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 200
        }
      }
    }
  },
  "tests/integration/s3/test_s3_api.py::TestS3BucketObjectTagging::test_tagging_validation": {
    "recorded-date": "03-08-2023, 01:07:47",
    "recorded-content": {
      "put-bucket-tags-duplicate-keys": {
        "Error": {
          "Code": "InvalidTag",
          "Message": "Cannot provide multiple Tags with the same key",
          "TagKey": "Key1"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-tags-invalid-key": {
        "Error": {
          "Code": "InvalidTag",
          "Message": "The TagKey you have provided is invalid",
          "TagKey": "Key1,Key2"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-tags-invalid-value": {
        "Error": {
          "Code": "InvalidTag",
          "Message": "The TagValue you have provided is invalid",
          "TagKey": "Key1",
          "TagValue": "Val1,Val2"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-bucket-tags-aws-prefixed": {
        "Error": {
          "Code": "InvalidTag",
          "Message": "System tags cannot be added/updated by requester",
          "TagKey": "aws:prefixed"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-tags-duplicate-keys": {
        "Error": {
          "Code": "InvalidTag",
          "Message": "Cannot provide multiple Tags with the same key",
          "TagKey": "Key1"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-tags-invalid-field": {
        "Error": {
          "Code": "InvalidTag",
          "Message": "The TagKey you have provided is invalid",
          "TagKey": "Key1,Key2"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      },
      "put-object-tags-aws-prefixed": {
        "Error": {
          "Code": "InvalidTag",
          "Message": "Your TagKey cannot be prefixed with aws:",
          "TagKey": "aws:prefixed"
        },
        "ResponseMetadata": {
          "HTTPHeaders": {},
          "HTTPStatusCode": 400
        }
      }
    }
  }
}
