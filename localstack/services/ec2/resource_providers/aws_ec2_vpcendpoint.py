# LocalStack Resource Provider Scaffolding v2
from __future__ import annotations

from pathlib import Path
from typing import Optional, TypedDict

import localstack.services.cloudformation.provider_utils as util
from localstack.services.cloudformation.resource_provider import (
    OperationStatus,
    ProgressEvent,
    ResourceProvider,
    ResourceRequest,
)


class EC2VPCEndpointProperties(TypedDict):
    ServiceName: Optional[str]
    VpcId: Optional[str]
    CreationTimestamp: Optional[str]
    DnsEntries: Optional[list[str]]
    Id: Optional[str]
    NetworkInterfaceIds: Optional[list[str]]
    PolicyDocument: Optional[str | dict]
    PrivateDnsEnabled: Optional[bool]
    RouteTableIds: Optional[list[str]]
    SecurityGroupIds: Optional[list[str]]
    SubnetIds: Optional[list[str]]
    VpcEndpointType: Optional[str]


REPEATED_INVOCATION = "repeated_invocation"


class EC2VPCEndpointProvider(ResourceProvider[EC2VPCEndpointProperties]):
    TYPE = "AWS::EC2::VPCEndpoint"  # Autogenerated. Don't change
    SCHEMA = util.get_schema_path(Path(__file__))  # Autogenerated. Don't change

    def create(
        self,
        request: ResourceRequest[EC2VPCEndpointProperties],
    ) -> ProgressEvent[EC2VPCEndpointProperties]:
        """
        Create a new resource.

        Primary identifier fields:
          - /properties/Id

        Required properties:
          - VpcId
          - ServiceName

        Create-only properties:
          - /properties/ServiceName
          - /properties/VpcEndpointType
          - /properties/VpcId

        Read-only properties:
          - /properties/NetworkInterfaceIds
          - /properties/CreationTimestamp
          - /properties/DnsEntries
          - /properties/Id

        IAM permissions required:
          - ec2:CreateVpcEndpoint
          - ec2:DescribeVpcEndpoints

        """
        model = request.desired_state
        create_params = util.select_attributes(
            model,
            [
                "PolidyDocument",
                "PrivateDnsEnabled",
                "RouteTablesIds",
                "SecurityGroupIds",
                "ServiceName",
                "SubnetIds",
                "VpcEndpointType",
                "VpcId",
            ],
        )

        response = request.aws_client_factory.ec2.create_vpc_endpoint(**create_params)
        model["Id"] = response["VpcEndpoint"]["VpcEndpointId"]
        model["DnsEntries"] = response["VpcEndpoint"]["DnsEntries"]
        model["CreationTimestamp"] = response["VpcEndpoint"]["CreationTimestamp"]
        model["NetworkInterfaceIds"] = response["VpcEndpoint"]["NetworkInterfaceIds"]

        return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=model)

    def read(
        self,
        request: ResourceRequest[EC2VPCEndpointProperties],
    ) -> ProgressEvent[EC2VPCEndpointProperties]:
        """
        Fetch resource information

        IAM permissions required:
          - ec2:DescribeVpcEndpoints
        """
        raise NotImplementedError

    def delete(
        self,
        request: ResourceRequest[EC2VPCEndpointProperties],
    ) -> ProgressEvent[EC2VPCEndpointProperties]:
        """
        Delete a resource

        IAM permissions required:
          - ec2:DeleteVpcEndpoints
          - ec2:DescribeVpcEndpoints
        """
        model = request.desired_state
        request.aws_client_factory.ec2.delete_vpc_endpoints(VpcEndpointIds=[model["Id"]])
        return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=model)

    def update(
        self,
        request: ResourceRequest[EC2VPCEndpointProperties],
    ) -> ProgressEvent[EC2VPCEndpointProperties]:
        """
        Update a resource

        IAM permissions required:
          - ec2:ModifyVpcEndpoint
          - ec2:DescribeVpcEndpoints
        """
        raise NotImplementedError
