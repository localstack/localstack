# LocalStack Resource Provider Scaffolding v2
from __future__ import annotations

import json
from pathlib import Path
from typing import Optional, TypedDict

import localstack.services.cloudformation.provider_utils as util
from localstack.services.cloudformation.resource_provider import (
    OperationStatus,
    ProgressEvent,
    ResourceProvider,
    ResourceRequest,
)


class SNSSubscriptionProperties(TypedDict):
    Protocol: Optional[str]
    TopicArn: Optional[str]
    DeliveryPolicy: Optional[dict]
    Endpoint: Optional[str]
    FilterPolicy: Optional[dict]
    FilterPolicyScope: Optional[str]
    Id: Optional[str]
    RawMessageDelivery: Optional[bool]
    RedrivePolicy: Optional[dict]
    Region: Optional[str]
    ReplayPolicy: Optional[dict]
    SubscriptionRoleArn: Optional[str]


REPEATED_INVOCATION = "repeated_invocation"


class SNSSubscriptionProvider(ResourceProvider[SNSSubscriptionProperties]):
    TYPE = "AWS::SNS::Subscription"  # Autogenerated. Don't change
    SCHEMA = util.get_schema_path(Path(__file__))  # Autogenerated. Don't change

    def create(
        self,
        request: ResourceRequest[SNSSubscriptionProperties],
    ) -> ProgressEvent[SNSSubscriptionProperties]:
        """
        Create a new resource.

        Primary identifier fields:
          - /properties/Id

        Required properties:
          - TopicArn
          - Protocol

        Create-only properties:
          - /properties/Endpoint
          - /properties/Protocol
          - /properties/TopicArn

        Read-only properties:
          - /properties/Id



        """
        model = request.desired_state
        sns = request.aws_client_factory.sns

        params = util.select_attributes(model=model, params=["TopicArn", "Protocol", "Endpoint"])

        def attr_val(val):
            return json.dumps(val) if isinstance(val, (dict, list)) else str(val)

        attrs = [
            "DeliveryPolicy",
            "FilterPolicy",
            "FilterPolicyScope",
            "RawMessageDelivery",
            "RedrivePolicy",
        ]
        attributes = {a: attr_val(model[a]) for a in attrs if a in model}

        if attributes:
            params["Attributes"] = attributes

        result = sns.subscribe(**params)
        model["Id"] = result["SubscriptionArn"]

        return ProgressEvent(
            status=OperationStatus.SUCCESS,
            resource_model=model,
            custom_context=request.custom_context,
        )

    def read(
        self,
        request: ResourceRequest[SNSSubscriptionProperties],
    ) -> ProgressEvent[SNSSubscriptionProperties]:
        """
        Fetch resource information


        """
        raise NotImplementedError

    def delete(
        self,
        request: ResourceRequest[SNSSubscriptionProperties],
    ) -> ProgressEvent[SNSSubscriptionProperties]:
        """
        Delete a resource


        """
        model = request.desired_state
        sns = request.aws_client_factory.sns

        sns.unsubscribe(SubscriptionArn=model["Id"])

        return ProgressEvent(
            status=OperationStatus.SUCCESS,
            resource_model=model,
            custom_context=request.custom_context,
        )

    def update(
        self,
        request: ResourceRequest[SNSSubscriptionProperties],
    ) -> ProgressEvent[SNSSubscriptionProperties]:
        """
        Update a resource


        """
        raise NotImplementedError
