# LocalStack Resource Provider Scaffolding v2
from __future__ import annotations

from pathlib import Path
from typing import Optional, Type, TypedDict

import localstack.services.cloudformation.provider_utils as util
from localstack.services.cloudformation.resource_provider import (
    CloudFormationResourceProviderPlugin,
    OperationStatus,
    ProgressEvent,
    ResourceProvider,
    ResourceRequest,
)


class ECRRepositoryProperties(TypedDict):
    Arn: Optional[str]
    EncryptionConfiguration: Optional[EncryptionConfiguration]
    ImageScanningConfiguration: Optional[ImageScanningConfiguration]
    ImageTagMutability: Optional[str]
    LifecyclePolicy: Optional[LifecyclePolicy]
    RepositoryName: Optional[str]
    RepositoryPolicyText: Optional[dict | str]
    RepositoryUri: Optional[str]
    Tags: Optional[list[Tag]]


class LifecyclePolicy(TypedDict):
    LifecyclePolicyText: Optional[str]
    RegistryId: Optional[str]


class Tag(TypedDict):
    Key: Optional[str]
    Value: Optional[str]


class ImageScanningConfiguration(TypedDict):
    ScanOnPush: Optional[bool]


class EncryptionConfiguration(TypedDict):
    EncryptionType: Optional[str]
    KmsKey: Optional[str]


REPEATED_INVOCATION = "repeated_invocation"


class ECRRepositoryProvider(ResourceProvider[ECRRepositoryProperties]):

    TYPE = "AWS::ECR::Repository"  # Autogenerated. Don't change
    SCHEMA = util.get_schema_path(Path(__file__))  # Autogenerated. Don't change

    def create(
        self,
        request: ResourceRequest[ECRRepositoryProperties],
    ) -> ProgressEvent[ECRRepositoryProperties]:
        """
        Create a new resource.

        Primary identifier fields:
          - /properties/RepositoryName



        Create-only properties:
          - /properties/RepositoryName
          - /properties/EncryptionConfiguration
          - /properties/EncryptionConfiguration/EncryptionType
          - /properties/EncryptionConfiguration/KmsKey

        Read-only properties:
          - /properties/Arn
          - /properties/RepositoryUri

        IAM permissions required:
          - ecr:CreateRepository
          - ecr:PutLifecyclePolicy
          - ecr:SetRepositoryPolicy
          - ecr:TagResource
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:RetireGrant

        """
        model = request.desired_state

        # TODO: validations

        if not request.custom_context.get(REPEATED_INVOCATION):
            # this is the first time this callback is invoked
            # TODO: defaults
            # TODO: idempotency
            # TODO: actually create the resource
            request.custom_context[REPEATED_INVOCATION] = True
            return ProgressEvent(
                status=OperationStatus.IN_PROGRESS,
                resource_model=model,
                custom_context=request.custom_context,
            )

        # TODO: check the status of the resource
        # - if finished, update the model with all fields and return success event:
        #   return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=model)
        # - else
        #   return ProgressEvent(status=OperationStatus.IN_PROGRESS, resource_model=model)

        raise NotImplementedError

    def read(
        self,
        request: ResourceRequest[ECRRepositoryProperties],
    ) -> ProgressEvent[ECRRepositoryProperties]:
        """
        Fetch resource information

        IAM permissions required:
          - ecr:DescribeRepositories
          - ecr:GetLifecyclePolicy
          - ecr:GetRepositoryPolicy
          - ecr:ListTagsForResource
        """
        raise NotImplementedError

    def delete(
        self,
        request: ResourceRequest[ECRRepositoryProperties],
    ) -> ProgressEvent[ECRRepositoryProperties]:
        """
        Delete a resource

        IAM permissions required:
          - ecr:DeleteRepository
          - kms:RetireGrant
        """
        raise NotImplementedError

    def update(
        self,
        request: ResourceRequest[ECRRepositoryProperties],
    ) -> ProgressEvent[ECRRepositoryProperties]:
        """
        Update a resource

        IAM permissions required:
          - ecr:PutLifecyclePolicy
          - ecr:SetRepositoryPolicy
          - ecr:TagResource
          - ecr:UntagResource
          - ecr:DeleteLifecyclePolicy
          - ecr:DeleteRepositoryPolicy
          - ecr:PutImageScanningConfiguration
          - ecr:PutImageTagMutability
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:RetireGrant
        """
        raise NotImplementedError

