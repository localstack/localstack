# LocalStack Resource Provider Scaffolding v2
from __future__ import annotations

from pathlib import Path
from typing import Optional, Type, TypedDict

import localstack.services.cloudformation.provider_utils as util
from localstack.services.cloudformation.resource_provider import (
    CloudFormationResourceProviderPlugin,
    OperationStatus,
    ProgressEvent,
    ResourceProvider,
    ResourceRequest,
)


class IAMInstanceProfileProperties(TypedDict):
    Roles: Optional[list[str]]
    Arn: Optional[str]
    InstanceProfileName: Optional[str]
    Path: Optional[str]


REPEATED_INVOCATION = "repeated_invocation"


class IAMInstanceProfileProvider(ResourceProvider[IAMInstanceProfileProperties]):

    TYPE = "AWS::IAM::InstanceProfile"  # Autogenerated. Don't change
    SCHEMA = util.get_schema_path(Path(__file__))  # Autogenerated. Don't change

    def create(
        self,
        request: ResourceRequest[IAMInstanceProfileProperties],
    ) -> ProgressEvent[IAMInstanceProfileProperties]:
        """
        Create a new resource.

        Primary identifier fields:
          - /properties/InstanceProfileName

        Required properties:
          - Roles

        Create-only properties:
          - /properties/InstanceProfileName
          - /properties/Path

        Read-only properties:
          - /properties/Arn

        IAM permissions required:
          - iam:CreateInstanceProfile
          - iam:PassRole
          - iam:AddRoleToInstanceProfile
          - iam:GetInstanceProfile

        """
        model = request.desired_state

        # TODO: validations

        if not request.custom_context.get(REPEATED_INVOCATION):
            # this is the first time this callback is invoked
            # TODO: defaults
            # TODO: idempotency
            # TODO: actually create the resource
            request.custom_context[REPEATED_INVOCATION] = True
            return ProgressEvent(
                status=OperationStatus.IN_PROGRESS,
                resource_model=model,
                custom_context=request.custom_context,
            )

        # TODO: check the status of the resource
        # - if finished, update the model with all fields and return success event:
        #   return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=model)
        # - else
        #   return ProgressEvent(status=OperationStatus.IN_PROGRESS, resource_model=model)

        raise NotImplementedError

    def read(
        self,
        request: ResourceRequest[IAMInstanceProfileProperties],
    ) -> ProgressEvent[IAMInstanceProfileProperties]:
        """
        Fetch resource information

        IAM permissions required:
          - iam:GetInstanceProfile
        """
        raise NotImplementedError

    def delete(
        self,
        request: ResourceRequest[IAMInstanceProfileProperties],
    ) -> ProgressEvent[IAMInstanceProfileProperties]:
        """
        Delete a resource

        IAM permissions required:
          - iam:GetInstanceProfile
          - iam:RemoveRoleFromInstanceProfile
          - iam:DeleteInstanceProfile
        """
        raise NotImplementedError

    def update(
        self,
        request: ResourceRequest[IAMInstanceProfileProperties],
    ) -> ProgressEvent[IAMInstanceProfileProperties]:
        """
        Update a resource

        IAM permissions required:
          - iam:PassRole
          - iam:RemoveRoleFromInstanceProfile
          - iam:AddRoleToInstanceProfile
          - iam:GetInstanceProfile
        """
        raise NotImplementedError


class IAMInstanceProfileProviderPlugin(CloudFormationResourceProviderPlugin):
    name = "AWS::IAM::InstanceProfile"

    def __init__(self):
        self.factory: Optional[Type[ResourceProvider]] = None

    def load(self):
        self.factory = IAMInstanceProfileProvider
