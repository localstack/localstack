# Generated from /Users/mep/LocalStack/localstack/localstack/services/stepfunctions/asl/antlr/ASLIntrinsicLexer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,134,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,
        7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,4,10,65,8,10,11,10,12,10,66,1,11,
        1,11,1,11,1,11,1,11,5,11,74,8,11,10,11,12,11,77,9,11,1,11,1,11,1,
        11,1,12,1,12,1,12,3,12,85,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,15,1,15,1,16,3,16,98,8,16,1,16,1,16,1,16,4,16,103,8,16,11,
        16,12,16,104,3,16,107,8,16,1,16,3,16,110,8,16,1,17,1,17,1,17,5,17,
        115,8,17,10,17,12,17,118,9,17,3,17,120,8,17,1,18,1,18,3,18,124,8,
        18,1,18,1,18,1,19,4,19,129,8,19,11,19,12,19,130,1,19,1,19,0,0,20,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,0,27,
        0,29,0,31,0,33,13,35,0,37,0,39,14,1,0,9,4,0,48,57,65,90,95,95,97,
        122,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,116,
        3,0,48,57,65,70,97,102,3,0,0,31,34,34,92,92,1,0,48,57,1,0,49,57,
        2,0,69,69,101,101,2,0,43,43,45,45,2,0,9,9,32,32,140,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,33,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,43,1,0,0,0,5,46,
        1,0,0,0,7,48,1,0,0,0,9,50,1,0,0,0,11,52,1,0,0,0,13,54,1,0,0,0,15,
        56,1,0,0,0,17,58,1,0,0,0,19,60,1,0,0,0,21,64,1,0,0,0,23,68,1,0,0,
        0,25,81,1,0,0,0,27,86,1,0,0,0,29,92,1,0,0,0,31,94,1,0,0,0,33,97,
        1,0,0,0,35,119,1,0,0,0,37,121,1,0,0,0,39,128,1,0,0,0,41,42,5,36,
        0,0,42,2,1,0,0,0,43,44,5,36,0,0,44,45,5,36,0,0,45,4,1,0,0,0,46,47,
        5,46,0,0,47,6,1,0,0,0,48,49,5,44,0,0,49,8,1,0,0,0,50,51,5,40,0,0,
        51,10,1,0,0,0,52,53,5,41,0,0,53,12,1,0,0,0,54,55,5,91,0,0,55,14,
        1,0,0,0,56,57,5,93,0,0,57,16,1,0,0,0,58,59,5,123,0,0,59,18,1,0,0,
        0,60,61,5,125,0,0,61,20,1,0,0,0,62,65,7,0,0,0,63,65,3,27,13,0,64,
        62,1,0,0,0,64,63,1,0,0,0,65,66,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,
        0,67,22,1,0,0,0,68,69,5,92,0,0,69,70,5,34,0,0,70,75,1,0,0,0,71,74,
        3,25,12,0,72,74,3,31,15,0,73,71,1,0,0,0,73,72,1,0,0,0,74,77,1,0,
        0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,79,
        5,92,0,0,79,80,5,34,0,0,80,24,1,0,0,0,81,84,5,92,0,0,82,85,7,1,0,
        0,83,85,3,27,13,0,84,82,1,0,0,0,84,83,1,0,0,0,85,26,1,0,0,0,86,87,
        5,117,0,0,87,88,3,29,14,0,88,89,3,29,14,0,89,90,3,29,14,0,90,91,
        3,29,14,0,91,28,1,0,0,0,92,93,7,2,0,0,93,30,1,0,0,0,94,95,8,3,0,
        0,95,32,1,0,0,0,96,98,5,45,0,0,97,96,1,0,0,0,97,98,1,0,0,0,98,99,
        1,0,0,0,99,106,3,35,17,0,100,102,5,46,0,0,101,103,7,4,0,0,102,101,
        1,0,0,0,103,104,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,
        1,0,0,0,106,100,1,0,0,0,106,107,1,0,0,0,107,109,1,0,0,0,108,110,
        3,37,18,0,109,108,1,0,0,0,109,110,1,0,0,0,110,34,1,0,0,0,111,120,
        5,48,0,0,112,116,7,5,0,0,113,115,7,4,0,0,114,113,1,0,0,0,115,118,
        1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,120,1,0,0,0,118,116,
        1,0,0,0,119,111,1,0,0,0,119,112,1,0,0,0,120,36,1,0,0,0,121,123,7,
        6,0,0,122,124,7,7,0,0,123,122,1,0,0,0,123,124,1,0,0,0,124,125,1,
        0,0,0,125,126,3,35,17,0,126,38,1,0,0,0,127,129,7,8,0,0,128,127,1,
        0,0,0,129,130,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,132,1,
        0,0,0,132,133,6,19,0,0,133,40,1,0,0,0,14,0,64,66,73,75,84,97,104,
        106,109,116,119,123,130,1,6,0,0
    ]

class ASLIntrinsicLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DOLLAR = 1
    DDOLLAR = 2
    DOT = 3
    COMMA = 4
    LPAREN = 5
    RPAREN = 6
    LBRACK = 7
    RBRACK = 8
    LBRACE = 9
    RBRACE = 10
    IDENTIFIER = 11
    STRING = 12
    NUMBER = 13
    WS = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'$'", "'$$'", "'.'", "','", "'('", "')'", "'['", "']'", "'{'", 
            "'}'" ]

    symbolicNames = [ "<INVALID>",
            "DOLLAR", "DDOLLAR", "DOT", "COMMA", "LPAREN", "RPAREN", "LBRACK", 
            "RBRACK", "LBRACE", "RBRACE", "IDENTIFIER", "STRING", "NUMBER", 
            "WS" ]

    ruleNames = [ "DOLLAR", "DDOLLAR", "DOT", "COMMA", "LPAREN", "RPAREN", 
                  "LBRACK", "RBRACK", "LBRACE", "RBRACE", "IDENTIFIER", 
                  "STRING", "ESC", "UNICODE", "HEX", "SAFECODEPOINT", "NUMBER", 
                  "INT", "EXP", "WS" ]

    grammarFileName = "ASLIntrinsicLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


