# Generated from /Users/mep/LocalStack/localstack/localstack/services/stepfunctions/asl/antlr/ASLIntrinsicLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,423,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,
        1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,
        14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
        17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,
        31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,5,37,355,8,
        37,10,37,12,37,358,9,37,1,37,1,37,1,38,1,38,1,38,3,38,365,8,38,1,
        39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,3,42,378,8,
        42,1,42,1,42,1,42,5,42,383,8,42,10,42,12,42,386,9,42,3,42,388,8,
        42,1,43,3,43,391,8,43,1,43,1,43,1,43,4,43,396,8,43,11,43,12,43,397,
        3,43,400,8,43,1,43,3,43,403,8,43,1,44,1,44,3,44,407,8,44,1,44,1,
        44,1,45,1,45,4,45,413,8,45,11,45,12,45,414,1,46,4,46,418,8,46,11,
        46,12,46,419,1,46,1,46,0,0,47,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,0,79,0,81,0,83,
        0,85,39,87,40,89,0,91,41,93,42,1,0,9,8,0,34,34,47,47,92,92,98,98,
        102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,0,31,
        34,34,92,92,1,0,49,57,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,
        4,0,48,57,65,90,95,95,97,122,2,0,9,10,32,32,431,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
        0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
        0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,
        0,0,0,0,75,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,91,1,0,0,0,0,93,1,
        0,0,0,1,95,1,0,0,0,3,98,1,0,0,0,5,100,1,0,0,0,7,102,1,0,0,0,9,104,
        1,0,0,0,11,106,1,0,0,0,13,108,1,0,0,0,15,110,1,0,0,0,17,112,1,0,
        0,0,19,114,1,0,0,0,21,116,1,0,0,0,23,119,1,0,0,0,25,129,1,0,0,0,
        27,132,1,0,0,0,29,135,1,0,0,0,31,138,1,0,0,0,33,140,1,0,0,0,35,145,
        1,0,0,0,37,151,1,0,0,0,39,158,1,0,0,0,41,165,1,0,0,0,43,178,1,0,
        0,0,45,191,1,0,0,0,47,197,1,0,0,0,49,212,1,0,0,0,51,226,1,0,0,0,
        53,237,1,0,0,0,55,250,1,0,0,0,57,262,1,0,0,0,59,274,1,0,0,0,61,287,
        1,0,0,0,63,300,1,0,0,0,65,305,1,0,0,0,67,315,1,0,0,0,69,326,1,0,
        0,0,71,334,1,0,0,0,73,346,1,0,0,0,75,351,1,0,0,0,77,361,1,0,0,0,
        79,366,1,0,0,0,81,372,1,0,0,0,83,374,1,0,0,0,85,377,1,0,0,0,87,390,
        1,0,0,0,89,404,1,0,0,0,91,412,1,0,0,0,93,417,1,0,0,0,95,96,5,36,
        0,0,96,97,5,46,0,0,97,2,1,0,0,0,98,99,5,46,0,0,99,4,1,0,0,0,100,
        101,5,42,0,0,101,6,1,0,0,0,102,103,5,44,0,0,103,8,1,0,0,0,104,105,
        5,40,0,0,105,10,1,0,0,0,106,107,5,41,0,0,107,12,1,0,0,0,108,109,
        5,91,0,0,109,14,1,0,0,0,110,111,5,93,0,0,111,16,1,0,0,0,112,113,
        5,60,0,0,113,18,1,0,0,0,114,115,5,62,0,0,115,20,1,0,0,0,116,117,
        5,64,0,0,117,118,5,46,0,0,118,22,1,0,0,0,119,120,5,64,0,0,120,121,
        5,46,0,0,121,122,5,108,0,0,122,123,5,101,0,0,123,124,5,110,0,0,124,
        125,5,103,0,0,125,126,5,116,0,0,126,127,5,104,0,0,127,128,5,45,0,
        0,128,24,1,0,0,0,129,130,5,38,0,0,130,131,5,38,0,0,131,26,1,0,0,
        0,132,133,5,124,0,0,133,134,5,124,0,0,134,28,1,0,0,0,135,136,5,61,
        0,0,136,137,5,61,0,0,137,30,1,0,0,0,138,139,5,61,0,0,139,32,1,0,
        0,0,140,141,5,116,0,0,141,142,5,114,0,0,142,143,5,117,0,0,143,144,
        5,101,0,0,144,34,1,0,0,0,145,146,5,102,0,0,146,147,5,97,0,0,147,
        148,5,108,0,0,148,149,5,115,0,0,149,150,5,101,0,0,150,36,1,0,0,0,
        151,152,5,83,0,0,152,153,5,116,0,0,153,154,5,97,0,0,154,155,5,116,
        0,0,155,156,5,101,0,0,156,157,5,115,0,0,157,38,1,0,0,0,158,159,5,
        70,0,0,159,160,5,111,0,0,160,161,5,114,0,0,161,162,5,109,0,0,162,
        163,5,97,0,0,163,164,5,116,0,0,164,40,1,0,0,0,165,166,5,83,0,0,166,
        167,5,116,0,0,167,168,5,114,0,0,168,169,5,105,0,0,169,170,5,110,
        0,0,170,171,5,103,0,0,171,172,5,84,0,0,172,173,5,111,0,0,173,174,
        5,74,0,0,174,175,5,115,0,0,175,176,5,111,0,0,176,177,5,110,0,0,177,
        42,1,0,0,0,178,179,5,74,0,0,179,180,5,115,0,0,180,181,5,111,0,0,
        181,182,5,110,0,0,182,183,5,84,0,0,183,184,5,111,0,0,184,185,5,83,
        0,0,185,186,5,116,0,0,186,187,5,114,0,0,187,188,5,105,0,0,188,189,
        5,110,0,0,189,190,5,103,0,0,190,44,1,0,0,0,191,192,5,65,0,0,192,
        193,5,114,0,0,193,194,5,114,0,0,194,195,5,97,0,0,195,196,5,121,0,
        0,196,46,1,0,0,0,197,198,5,65,0,0,198,199,5,114,0,0,199,200,5,114,
        0,0,200,201,5,97,0,0,201,202,5,121,0,0,202,203,5,80,0,0,203,204,
        5,97,0,0,204,205,5,114,0,0,205,206,5,116,0,0,206,207,5,105,0,0,207,
        208,5,116,0,0,208,209,5,105,0,0,209,210,5,111,0,0,210,211,5,110,
        0,0,211,48,1,0,0,0,212,213,5,65,0,0,213,214,5,114,0,0,214,215,5,
        114,0,0,215,216,5,97,0,0,216,217,5,121,0,0,217,218,5,67,0,0,218,
        219,5,111,0,0,219,220,5,110,0,0,220,221,5,116,0,0,221,222,5,97,0,
        0,222,223,5,105,0,0,223,224,5,110,0,0,224,225,5,115,0,0,225,50,1,
        0,0,0,226,227,5,65,0,0,227,228,5,114,0,0,228,229,5,114,0,0,229,230,
        5,97,0,0,230,231,5,121,0,0,231,232,5,82,0,0,232,233,5,97,0,0,233,
        234,5,110,0,0,234,235,5,103,0,0,235,236,5,101,0,0,236,52,1,0,0,0,
        237,238,5,65,0,0,238,239,5,114,0,0,239,240,5,114,0,0,240,241,5,97,
        0,0,241,242,5,121,0,0,242,243,5,71,0,0,243,244,5,101,0,0,244,245,
        5,116,0,0,245,246,5,73,0,0,246,247,5,116,0,0,247,248,5,101,0,0,248,
        249,5,109,0,0,249,54,1,0,0,0,250,251,5,65,0,0,251,252,5,114,0,0,
        252,253,5,114,0,0,253,254,5,97,0,0,254,255,5,121,0,0,255,256,5,76,
        0,0,256,257,5,101,0,0,257,258,5,110,0,0,258,259,5,103,0,0,259,260,
        5,116,0,0,260,261,5,104,0,0,261,56,1,0,0,0,262,263,5,65,0,0,263,
        264,5,114,0,0,264,265,5,114,0,0,265,266,5,97,0,0,266,267,5,121,0,
        0,267,268,5,85,0,0,268,269,5,110,0,0,269,270,5,105,0,0,270,271,5,
        113,0,0,271,272,5,117,0,0,272,273,5,101,0,0,273,58,1,0,0,0,274,275,
        5,66,0,0,275,276,5,97,0,0,276,277,5,115,0,0,277,278,5,101,0,0,278,
        279,5,54,0,0,279,280,5,52,0,0,280,281,5,69,0,0,281,282,5,110,0,0,
        282,283,5,99,0,0,283,284,5,111,0,0,284,285,5,100,0,0,285,286,5,101,
        0,0,286,60,1,0,0,0,287,288,5,66,0,0,288,289,5,97,0,0,289,290,5,115,
        0,0,290,291,5,101,0,0,291,292,5,54,0,0,292,293,5,52,0,0,293,294,
        5,68,0,0,294,295,5,101,0,0,295,296,5,99,0,0,296,297,5,111,0,0,297,
        298,5,100,0,0,298,299,5,101,0,0,299,62,1,0,0,0,300,301,5,72,0,0,
        301,302,5,97,0,0,302,303,5,115,0,0,303,304,5,104,0,0,304,64,1,0,
        0,0,305,306,5,74,0,0,306,307,5,115,0,0,307,308,5,111,0,0,308,309,
        5,110,0,0,309,310,5,77,0,0,310,311,5,101,0,0,311,312,5,114,0,0,312,
        313,5,103,0,0,313,314,5,101,0,0,314,66,1,0,0,0,315,316,5,77,0,0,
        316,317,5,97,0,0,317,318,5,116,0,0,318,319,5,104,0,0,319,320,5,82,
        0,0,320,321,5,97,0,0,321,322,5,110,0,0,322,323,5,100,0,0,323,324,
        5,111,0,0,324,325,5,109,0,0,325,68,1,0,0,0,326,327,5,77,0,0,327,
        328,5,97,0,0,328,329,5,116,0,0,329,330,5,104,0,0,330,331,5,65,0,
        0,331,332,5,100,0,0,332,333,5,100,0,0,333,70,1,0,0,0,334,335,5,83,
        0,0,335,336,5,116,0,0,336,337,5,114,0,0,337,338,5,105,0,0,338,339,
        5,110,0,0,339,340,5,103,0,0,340,341,5,83,0,0,341,342,5,112,0,0,342,
        343,5,108,0,0,343,344,5,105,0,0,344,345,5,116,0,0,345,72,1,0,0,0,
        346,347,5,85,0,0,347,348,5,85,0,0,348,349,5,73,0,0,349,350,5,68,
        0,0,350,74,1,0,0,0,351,356,5,39,0,0,352,355,3,77,38,0,353,355,3,
        83,41,0,354,352,1,0,0,0,354,353,1,0,0,0,355,358,1,0,0,0,356,354,
        1,0,0,0,356,357,1,0,0,0,357,359,1,0,0,0,358,356,1,0,0,0,359,360,
        5,39,0,0,360,76,1,0,0,0,361,364,5,92,0,0,362,365,7,0,0,0,363,365,
        3,79,39,0,364,362,1,0,0,0,364,363,1,0,0,0,365,78,1,0,0,0,366,367,
        5,117,0,0,367,368,3,81,40,0,368,369,3,81,40,0,369,370,3,81,40,0,
        370,371,3,81,40,0,371,80,1,0,0,0,372,373,7,1,0,0,373,82,1,0,0,0,
        374,375,8,2,0,0,375,84,1,0,0,0,376,378,5,45,0,0,377,376,1,0,0,0,
        377,378,1,0,0,0,378,387,1,0,0,0,379,388,5,48,0,0,380,384,7,3,0,0,
        381,383,7,4,0,0,382,381,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,
        384,385,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,387,379,1,0,0,0,
        387,380,1,0,0,0,388,86,1,0,0,0,389,391,5,45,0,0,390,389,1,0,0,0,
        390,391,1,0,0,0,391,392,1,0,0,0,392,399,3,85,42,0,393,395,5,46,0,
        0,394,396,7,4,0,0,395,394,1,0,0,0,396,397,1,0,0,0,397,395,1,0,0,
        0,397,398,1,0,0,0,398,400,1,0,0,0,399,393,1,0,0,0,399,400,1,0,0,
        0,400,402,1,0,0,0,401,403,3,89,44,0,402,401,1,0,0,0,402,403,1,0,
        0,0,403,88,1,0,0,0,404,406,7,5,0,0,405,407,7,6,0,0,406,405,1,0,0,
        0,406,407,1,0,0,0,407,408,1,0,0,0,408,409,3,85,42,0,409,90,1,0,0,
        0,410,413,7,7,0,0,411,413,3,79,39,0,412,410,1,0,0,0,412,411,1,0,
        0,0,413,414,1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,92,1,0,0,
        0,416,418,7,8,0,0,417,416,1,0,0,0,418,419,1,0,0,0,419,417,1,0,0,
        0,419,420,1,0,0,0,420,421,1,0,0,0,421,422,6,46,0,0,422,94,1,0,0,
        0,15,0,354,356,364,377,384,387,390,397,399,402,406,412,414,419,1,
        6,0,0
    ]

class ASLIntrinsicLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DOLLARDOT = 1
    DOT = 2
    STAR = 3
    COMMA = 4
    LPAREN = 5
    RPAREN = 6
    LBRACK = 7
    RBRACK = 8
    LDIAM = 9
    RDIAM = 10
    ATDOT = 11
    ATDOTLENGTHDASH = 12
    ANDAND = 13
    OROR = 14
    EQEQ = 15
    EQ = 16
    TRUE = 17
    FALSE = 18
    States = 19
    Format = 20
    StringToJson = 21
    JsonToString = 22
    Array = 23
    ArrayPartition = 24
    ArrayContains = 25
    ArrayRange = 26
    ArrayGetItem = 27
    ArrayLength = 28
    ArrayUnique = 29
    Base64Encode = 30
    Base64Decode = 31
    Hash = 32
    JsonMerge = 33
    MathRandom = 34
    MathAdd = 35
    StringSplit = 36
    UUID = 37
    STRING = 38
    INT = 39
    NUMBER = 40
    IDENTIFIER = 41
    WS = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'$.'", "'.'", "'*'", "','", "'('", "')'", "'['", "']'", "'<'", 
            "'>'", "'@.'", "'@.length-'", "'&&'", "'||'", "'=='", "'='", 
            "'true'", "'false'", "'States'", "'Format'", "'StringToJson'", 
            "'JsonToString'", "'Array'", "'ArrayPartition'", "'ArrayContains'", 
            "'ArrayRange'", "'ArrayGetItem'", "'ArrayLength'", "'ArrayUnique'", 
            "'Base64Encode'", "'Base64Decode'", "'Hash'", "'JsonMerge'", 
            "'MathRandom'", "'MathAdd'", "'StringSplit'", "'UUID'" ]

    symbolicNames = [ "<INVALID>",
            "DOLLARDOT", "DOT", "STAR", "COMMA", "LPAREN", "RPAREN", "LBRACK", 
            "RBRACK", "LDIAM", "RDIAM", "ATDOT", "ATDOTLENGTHDASH", "ANDAND", 
            "OROR", "EQEQ", "EQ", "TRUE", "FALSE", "States", "Format", "StringToJson", 
            "JsonToString", "Array", "ArrayPartition", "ArrayContains", 
            "ArrayRange", "ArrayGetItem", "ArrayLength", "ArrayUnique", 
            "Base64Encode", "Base64Decode", "Hash", "JsonMerge", "MathRandom", 
            "MathAdd", "StringSplit", "UUID", "STRING", "INT", "NUMBER", 
            "IDENTIFIER", "WS" ]

    ruleNames = [ "DOLLARDOT", "DOT", "STAR", "COMMA", "LPAREN", "RPAREN", 
                  "LBRACK", "RBRACK", "LDIAM", "RDIAM", "ATDOT", "ATDOTLENGTHDASH", 
                  "ANDAND", "OROR", "EQEQ", "EQ", "TRUE", "FALSE", "States", 
                  "Format", "StringToJson", "JsonToString", "Array", "ArrayPartition", 
                  "ArrayContains", "ArrayRange", "ArrayGetItem", "ArrayLength", 
                  "ArrayUnique", "Base64Encode", "Base64Decode", "Hash", 
                  "JsonMerge", "MathRandom", "MathAdd", "StringSplit", "UUID", 
                  "STRING", "ESC", "UNICODE", "HEX", "SAFECODEPOINT", "INT", 
                  "NUMBER", "EXP", "IDENTIFIER", "WS" ]

    grammarFileName = "ASLIntrinsicLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


