# Generated from /Users/mep/LocalStack/localstack/localstack/services/stepfunctions/asl/antlr/ASLIntrinsicLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,406,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,3,2,90,8,2,1,2,1,2,3,2,94,
        8,2,1,2,3,2,97,8,2,5,2,99,8,2,10,2,12,2,102,9,2,1,3,1,3,1,3,5,3,
        107,8,3,10,3,12,3,110,9,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
        7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,1,30,1,30,1,30,5,30,338,8,30,10,30,12,30,341,
        9,30,1,30,1,30,1,31,1,31,1,31,3,31,348,8,31,1,32,1,32,1,32,1,32,
        1,32,1,32,1,33,1,33,1,34,1,34,1,35,3,35,361,8,35,1,35,1,35,1,35,
        5,35,366,8,35,10,35,12,35,369,9,35,3,35,371,8,35,1,36,3,36,374,8,
        36,1,36,1,36,1,36,4,36,379,8,36,11,36,12,36,380,3,36,383,8,36,1,
        36,3,36,386,8,36,1,37,1,37,3,37,390,8,37,1,37,1,37,1,38,1,38,4,38,
        396,8,38,11,38,12,38,397,1,39,4,39,401,8,39,11,39,12,39,402,1,39,
        1,39,1,339,0,40,1,1,3,2,5,0,7,0,9,3,11,4,13,5,15,6,17,7,19,8,21,
        9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,
        20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,0,65,
        0,67,0,69,0,71,30,73,31,75,0,77,32,79,33,1,0,9,1,0,93,93,3,0,48,
        57,65,70,97,102,3,0,0,31,39,39,92,92,1,0,49,57,1,0,48,57,2,0,69,
        69,101,101,2,0,43,43,45,45,4,0,48,57,65,90,95,95,97,122,2,0,9,10,
        32,32,418,0,1,1,0,0,0,0,3,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,81,1,0,0,0,3,85,
        1,0,0,0,5,89,1,0,0,0,7,103,1,0,0,0,9,113,1,0,0,0,11,115,1,0,0,0,
        13,117,1,0,0,0,15,119,1,0,0,0,17,121,1,0,0,0,19,123,1,0,0,0,21,128,
        1,0,0,0,23,134,1,0,0,0,25,141,1,0,0,0,27,148,1,0,0,0,29,161,1,0,
        0,0,31,174,1,0,0,0,33,180,1,0,0,0,35,195,1,0,0,0,37,209,1,0,0,0,
        39,220,1,0,0,0,41,233,1,0,0,0,43,245,1,0,0,0,45,257,1,0,0,0,47,270,
        1,0,0,0,49,283,1,0,0,0,51,288,1,0,0,0,53,298,1,0,0,0,55,309,1,0,
        0,0,57,317,1,0,0,0,59,329,1,0,0,0,61,334,1,0,0,0,63,344,1,0,0,0,
        65,349,1,0,0,0,67,355,1,0,0,0,69,357,1,0,0,0,71,360,1,0,0,0,73,373,
        1,0,0,0,75,387,1,0,0,0,77,395,1,0,0,0,79,400,1,0,0,0,81,82,3,9,4,
        0,82,83,3,9,4,0,83,84,3,5,2,0,84,2,1,0,0,0,85,86,3,9,4,0,86,87,3,
        5,2,0,87,4,1,0,0,0,88,90,3,7,3,0,89,88,1,0,0,0,89,90,1,0,0,0,90,
        100,1,0,0,0,91,93,3,17,8,0,92,94,3,77,38,0,93,92,1,0,0,0,93,94,1,
        0,0,0,94,96,1,0,0,0,95,97,3,7,3,0,96,95,1,0,0,0,96,97,1,0,0,0,97,
        99,1,0,0,0,98,91,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,
        0,0,0,101,6,1,0,0,0,102,100,1,0,0,0,103,108,5,91,0,0,104,107,3,7,
        3,0,105,107,8,0,0,0,106,104,1,0,0,0,106,105,1,0,0,0,107,110,1,0,
        0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,111,1,0,0,0,110,108,1,0,
        0,0,111,112,5,93,0,0,112,8,1,0,0,0,113,114,5,36,0,0,114,10,1,0,0,
        0,115,116,5,40,0,0,116,12,1,0,0,0,117,118,5,41,0,0,118,14,1,0,0,
        0,119,120,5,44,0,0,120,16,1,0,0,0,121,122,5,46,0,0,122,18,1,0,0,
        0,123,124,5,116,0,0,124,125,5,114,0,0,125,126,5,117,0,0,126,127,
        5,101,0,0,127,20,1,0,0,0,128,129,5,102,0,0,129,130,5,97,0,0,130,
        131,5,108,0,0,131,132,5,115,0,0,132,133,5,101,0,0,133,22,1,0,0,0,
        134,135,5,83,0,0,135,136,5,116,0,0,136,137,5,97,0,0,137,138,5,116,
        0,0,138,139,5,101,0,0,139,140,5,115,0,0,140,24,1,0,0,0,141,142,5,
        70,0,0,142,143,5,111,0,0,143,144,5,114,0,0,144,145,5,109,0,0,145,
        146,5,97,0,0,146,147,5,116,0,0,147,26,1,0,0,0,148,149,5,83,0,0,149,
        150,5,116,0,0,150,151,5,114,0,0,151,152,5,105,0,0,152,153,5,110,
        0,0,153,154,5,103,0,0,154,155,5,84,0,0,155,156,5,111,0,0,156,157,
        5,74,0,0,157,158,5,115,0,0,158,159,5,111,0,0,159,160,5,110,0,0,160,
        28,1,0,0,0,161,162,5,74,0,0,162,163,5,115,0,0,163,164,5,111,0,0,
        164,165,5,110,0,0,165,166,5,84,0,0,166,167,5,111,0,0,167,168,5,83,
        0,0,168,169,5,116,0,0,169,170,5,114,0,0,170,171,5,105,0,0,171,172,
        5,110,0,0,172,173,5,103,0,0,173,30,1,0,0,0,174,175,5,65,0,0,175,
        176,5,114,0,0,176,177,5,114,0,0,177,178,5,97,0,0,178,179,5,121,0,
        0,179,32,1,0,0,0,180,181,5,65,0,0,181,182,5,114,0,0,182,183,5,114,
        0,0,183,184,5,97,0,0,184,185,5,121,0,0,185,186,5,80,0,0,186,187,
        5,97,0,0,187,188,5,114,0,0,188,189,5,116,0,0,189,190,5,105,0,0,190,
        191,5,116,0,0,191,192,5,105,0,0,192,193,5,111,0,0,193,194,5,110,
        0,0,194,34,1,0,0,0,195,196,5,65,0,0,196,197,5,114,0,0,197,198,5,
        114,0,0,198,199,5,97,0,0,199,200,5,121,0,0,200,201,5,67,0,0,201,
        202,5,111,0,0,202,203,5,110,0,0,203,204,5,116,0,0,204,205,5,97,0,
        0,205,206,5,105,0,0,206,207,5,110,0,0,207,208,5,115,0,0,208,36,1,
        0,0,0,209,210,5,65,0,0,210,211,5,114,0,0,211,212,5,114,0,0,212,213,
        5,97,0,0,213,214,5,121,0,0,214,215,5,82,0,0,215,216,5,97,0,0,216,
        217,5,110,0,0,217,218,5,103,0,0,218,219,5,101,0,0,219,38,1,0,0,0,
        220,221,5,65,0,0,221,222,5,114,0,0,222,223,5,114,0,0,223,224,5,97,
        0,0,224,225,5,121,0,0,225,226,5,71,0,0,226,227,5,101,0,0,227,228,
        5,116,0,0,228,229,5,73,0,0,229,230,5,116,0,0,230,231,5,101,0,0,231,
        232,5,109,0,0,232,40,1,0,0,0,233,234,5,65,0,0,234,235,5,114,0,0,
        235,236,5,114,0,0,236,237,5,97,0,0,237,238,5,121,0,0,238,239,5,76,
        0,0,239,240,5,101,0,0,240,241,5,110,0,0,241,242,5,103,0,0,242,243,
        5,116,0,0,243,244,5,104,0,0,244,42,1,0,0,0,245,246,5,65,0,0,246,
        247,5,114,0,0,247,248,5,114,0,0,248,249,5,97,0,0,249,250,5,121,0,
        0,250,251,5,85,0,0,251,252,5,110,0,0,252,253,5,105,0,0,253,254,5,
        113,0,0,254,255,5,117,0,0,255,256,5,101,0,0,256,44,1,0,0,0,257,258,
        5,66,0,0,258,259,5,97,0,0,259,260,5,115,0,0,260,261,5,101,0,0,261,
        262,5,54,0,0,262,263,5,52,0,0,263,264,5,69,0,0,264,265,5,110,0,0,
        265,266,5,99,0,0,266,267,5,111,0,0,267,268,5,100,0,0,268,269,5,101,
        0,0,269,46,1,0,0,0,270,271,5,66,0,0,271,272,5,97,0,0,272,273,5,115,
        0,0,273,274,5,101,0,0,274,275,5,54,0,0,275,276,5,52,0,0,276,277,
        5,68,0,0,277,278,5,101,0,0,278,279,5,99,0,0,279,280,5,111,0,0,280,
        281,5,100,0,0,281,282,5,101,0,0,282,48,1,0,0,0,283,284,5,72,0,0,
        284,285,5,97,0,0,285,286,5,115,0,0,286,287,5,104,0,0,287,50,1,0,
        0,0,288,289,5,74,0,0,289,290,5,115,0,0,290,291,5,111,0,0,291,292,
        5,110,0,0,292,293,5,77,0,0,293,294,5,101,0,0,294,295,5,114,0,0,295,
        296,5,103,0,0,296,297,5,101,0,0,297,52,1,0,0,0,298,299,5,77,0,0,
        299,300,5,97,0,0,300,301,5,116,0,0,301,302,5,104,0,0,302,303,5,82,
        0,0,303,304,5,97,0,0,304,305,5,110,0,0,305,306,5,100,0,0,306,307,
        5,111,0,0,307,308,5,109,0,0,308,54,1,0,0,0,309,310,5,77,0,0,310,
        311,5,97,0,0,311,312,5,116,0,0,312,313,5,104,0,0,313,314,5,65,0,
        0,314,315,5,100,0,0,315,316,5,100,0,0,316,56,1,0,0,0,317,318,5,83,
        0,0,318,319,5,116,0,0,319,320,5,114,0,0,320,321,5,105,0,0,321,322,
        5,110,0,0,322,323,5,103,0,0,323,324,5,83,0,0,324,325,5,112,0,0,325,
        326,5,108,0,0,326,327,5,105,0,0,327,328,5,116,0,0,328,58,1,0,0,0,
        329,330,5,85,0,0,330,331,5,85,0,0,331,332,5,73,0,0,332,333,5,68,
        0,0,333,60,1,0,0,0,334,339,5,39,0,0,335,338,3,63,31,0,336,338,3,
        69,34,0,337,335,1,0,0,0,337,336,1,0,0,0,338,341,1,0,0,0,339,340,
        1,0,0,0,339,337,1,0,0,0,340,342,1,0,0,0,341,339,1,0,0,0,342,343,
        5,39,0,0,343,62,1,0,0,0,344,347,5,92,0,0,345,348,3,65,32,0,346,348,
        9,0,0,0,347,345,1,0,0,0,347,346,1,0,0,0,348,64,1,0,0,0,349,350,5,
        117,0,0,350,351,3,67,33,0,351,352,3,67,33,0,352,353,3,67,33,0,353,
        354,3,67,33,0,354,66,1,0,0,0,355,356,7,1,0,0,356,68,1,0,0,0,357,
        358,8,2,0,0,358,70,1,0,0,0,359,361,5,45,0,0,360,359,1,0,0,0,360,
        361,1,0,0,0,361,370,1,0,0,0,362,371,5,48,0,0,363,367,7,3,0,0,364,
        366,7,4,0,0,365,364,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,
        368,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,370,362,1,0,0,0,370,
        363,1,0,0,0,371,72,1,0,0,0,372,374,5,45,0,0,373,372,1,0,0,0,373,
        374,1,0,0,0,374,375,1,0,0,0,375,382,3,71,35,0,376,378,5,46,0,0,377,
        379,7,4,0,0,378,377,1,0,0,0,379,380,1,0,0,0,380,378,1,0,0,0,380,
        381,1,0,0,0,381,383,1,0,0,0,382,376,1,0,0,0,382,383,1,0,0,0,383,
        385,1,0,0,0,384,386,3,75,37,0,385,384,1,0,0,0,385,386,1,0,0,0,386,
        74,1,0,0,0,387,389,7,5,0,0,388,390,7,6,0,0,389,388,1,0,0,0,389,390,
        1,0,0,0,390,391,1,0,0,0,391,392,3,71,35,0,392,76,1,0,0,0,393,396,
        7,7,0,0,394,396,3,65,32,0,395,393,1,0,0,0,395,394,1,0,0,0,396,397,
        1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,78,1,0,0,0,399,401,7,
        8,0,0,400,399,1,0,0,0,401,402,1,0,0,0,402,400,1,0,0,0,402,403,1,
        0,0,0,403,404,1,0,0,0,404,405,6,39,0,0,405,80,1,0,0,0,21,0,89,93,
        96,100,106,108,337,339,347,360,367,370,373,380,382,385,389,395,397,
        402,1,6,0,0
    ]

class ASLIntrinsicLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CONTEXT_PATH_STRING = 1
    JSON_PATH_STRING = 2
    DOLLAR = 3
    LPAREN = 4
    RPAREN = 5
    COMMA = 6
    DOT = 7
    TRUE = 8
    FALSE = 9
    States = 10
    Format = 11
    StringToJson = 12
    JsonToString = 13
    Array = 14
    ArrayPartition = 15
    ArrayContains = 16
    ArrayRange = 17
    ArrayGetItem = 18
    ArrayLength = 19
    ArrayUnique = 20
    Base64Encode = 21
    Base64Decode = 22
    Hash = 23
    JsonMerge = 24
    MathRandom = 25
    MathAdd = 26
    StringSplit = 27
    UUID = 28
    STRING = 29
    INT = 30
    NUMBER = 31
    IDENTIFIER = 32
    WS = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'$'", "'('", "')'", "','", "'.'", "'true'", "'false'", "'States'", 
            "'Format'", "'StringToJson'", "'JsonToString'", "'Array'", "'ArrayPartition'", 
            "'ArrayContains'", "'ArrayRange'", "'ArrayGetItem'", "'ArrayLength'", 
            "'ArrayUnique'", "'Base64Encode'", "'Base64Decode'", "'Hash'", 
            "'JsonMerge'", "'MathRandom'", "'MathAdd'", "'StringSplit'", 
            "'UUID'" ]

    symbolicNames = [ "<INVALID>",
            "CONTEXT_PATH_STRING", "JSON_PATH_STRING", "DOLLAR", "LPAREN", 
            "RPAREN", "COMMA", "DOT", "TRUE", "FALSE", "States", "Format", 
            "StringToJson", "JsonToString", "Array", "ArrayPartition", "ArrayContains", 
            "ArrayRange", "ArrayGetItem", "ArrayLength", "ArrayUnique", 
            "Base64Encode", "Base64Decode", "Hash", "JsonMerge", "MathRandom", 
            "MathAdd", "StringSplit", "UUID", "STRING", "INT", "NUMBER", 
            "IDENTIFIER", "WS" ]

    ruleNames = [ "CONTEXT_PATH_STRING", "JSON_PATH_STRING", "JSON_PATH_BODY", 
                  "JSON_PATH_BRACK", "DOLLAR", "LPAREN", "RPAREN", "COMMA", 
                  "DOT", "TRUE", "FALSE", "States", "Format", "StringToJson", 
                  "JsonToString", "Array", "ArrayPartition", "ArrayContains", 
                  "ArrayRange", "ArrayGetItem", "ArrayLength", "ArrayUnique", 
                  "Base64Encode", "Base64Decode", "Hash", "JsonMerge", "MathRandom", 
                  "MathAdd", "StringSplit", "UUID", "STRING", "ESC", "UNICODE", 
                  "HEX", "SAFECODEPOINT", "INT", "NUMBER", "EXP", "IDENTIFIER", 
                  "WS" ]

    grammarFileName = "ASLIntrinsicLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


